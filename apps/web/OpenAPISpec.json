{
  "info": {
    "description": "This OpenAPI specification is automatically generated by Hasura.",
    "title": "Rest Endpoints",
    "version": ""
  },
  "paths": {
    "/api/rest/projects-tasks/project/{id}": {
      "get": {
        "summary": "projects_tasks_by_project_id",
        "description": "***\nThe GraphQl query for this endpoint is:\n``` graphql\nquery projects_tasks_by_project_id($id: uuid!) {\r\n  projects_tasks(where: {project_id: {_eq: $id}}) {\r\n    id\r\n    project_id\r\n    task_description\r\n    updated_at\r\n    date\r\n    created_at\r\n  }\r\n}\n```",
        "parameters": [
          {
            "description": "Your x-hasura-admin-secret will be used for authentication of the API request.",
            "in": "header",
            "name": "x-hasura-admin-secret",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "_\"id\" is required (enter it either in parameters or request body)_",
            "in": "path",
            "name": "id",
            "schema": {
              "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/uuid!"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Query parameters can also be provided in the request body as a JSON object",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "projects_tasks": {
                      "items": {
                        "description": "columns and relationships of \"projects_tasks\"",
                        "nullable": false,
                        "properties": {
                          "created_at": {
                            "$ref": "#/components/schemas/timestamp!"
                          },
                          "date": {
                            "$ref": "#/components/schemas/timestamp"
                          },
                          "id": {
                            "$ref": "#/components/schemas/uuid!"
                          },
                          "project_id": {
                            "$ref": "#/components/schemas/uuid!"
                          },
                          "task_description": {
                            "nullable": true,
                            "title": "String",
                            "type": "string"
                          },
                          "updated_at": {
                            "$ref": "#/components/schemas/timestamp"
                          }
                        },
                        "title": "projects_tasks",
                        "type": "object"
                      },
                      "nullable": false,
                      "type": "array"
                    }
                  }
                }
              }
            },
            "description": "Responses for GET /api/rest/projects-tasks/project/{id}"
          }
        }
      }
    },
    "/api/rest/timesheets": {
      "get": {
        "summary": "timesheets",
        "description": "***\nThe GraphQl query for this endpoint is:\n``` graphql\nquery timesheets {\n  timesheets {\n    client_id\n    created_at\n    freelance_id\n    id\n    project_task_id\n    updated_at\n    working_date\n    working_durations\n    }\n}\n\n```",
        "parameters": [
          {
            "description": "Your x-hasura-admin-secret will be used for authentication of the API request.",
            "in": "header",
            "name": "x-hasura-admin-secret",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "timesheets": {
                      "items": {
                        "description": "columns and relationships of \"timesheets\"",
                        "nullable": false,
                        "properties": {
                          "client_id": {
                            "$ref": "#/components/schemas/uuid!"
                          },
                          "created_at": {
                            "$ref": "#/components/schemas/timestamp!"
                          },
                          "freelance_id": {
                            "$ref": "#/components/schemas/uuid!"
                          },
                          "id": {
                            "$ref": "#/components/schemas/uuid!"
                          },
                          "project_task_id": {
                            "$ref": "#/components/schemas/uuid!"
                          },
                          "updated_at": {
                            "$ref": "#/components/schemas/timestamp"
                          },
                          "working_date": {
                            "nullable": false,
                            "title": "String",
                            "type": "string"
                          },
                          "working_durations": {
                            "$ref": "#/components/schemas/jsonb"
                          }
                        },
                        "title": "timesheets",
                        "type": "object"
                      },
                      "nullable": false,
                      "type": "array"
                    }
                  }
                }
              }
            },
            "description": "Responses for GET /api/rest/timesheets"
          }
        }
      },
      "post": {
        "summary": "insert_timesheets_one",
        "description": "***\nThe GraphQl query for this endpoint is:\n``` graphql\nmutation insert_timesheets_one($object: timesheets_insert_input!) {\n  insert_timesheets_one(object: $object) {\n    client_id\n    created_at\n    freelance_id\n    id\n    project_task_id\n    updated_at\n    working_date\n    working_durations\n    }\n}\n\n```",
        "parameters": [
          {
            "description": "Your x-hasura-admin-secret will be used for authentication of the API request.",
            "in": "header",
            "name": "x-hasura-admin-secret",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "object": {
                    "$ref": "#/components/schemas/timesheets_insert_input!"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Query parameters can also be provided in the request body as a JSON object",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "insert_timesheets_one": {
                      "description": "columns and relationships of \"timesheets\"",
                      "nullable": true,
                      "properties": {
                        "client_id": {
                          "$ref": "#/components/schemas/uuid!"
                        },
                        "created_at": {
                          "$ref": "#/components/schemas/timestamp!"
                        },
                        "freelance_id": {
                          "$ref": "#/components/schemas/uuid!"
                        },
                        "id": {
                          "$ref": "#/components/schemas/uuid!"
                        },
                        "project_task_id": {
                          "$ref": "#/components/schemas/uuid!"
                        },
                        "updated_at": {
                          "$ref": "#/components/schemas/timestamp"
                        },
                        "working_date": {
                          "nullable": false,
                          "title": "String",
                          "type": "string"
                        },
                        "working_durations": {
                          "$ref": "#/components/schemas/jsonb"
                        }
                      },
                      "title": "timesheets",
                      "type": "object"
                    }
                  }
                }
              }
            },
            "description": "Responses for POST /api/rest/timesheets"
          }
        }
      }
    },
    "/api/rest/timesheets/{id}": {
      "get": {
        "summary": "timesheets_by_pk",
        "description": "***\nThe GraphQl query for this endpoint is:\n``` graphql\nquery timesheets_by_pk($id: uuid!) {\n  timesheets_by_pk(id: $id) {\n    client_id\n    created_at\n    freelance_id\n    id\n    project_task_id\n    updated_at\n    working_date\n    working_durations\n }\n}\n\n```",
        "parameters": [
          {
            "description": "Your x-hasura-admin-secret will be used for authentication of the API request.",
            "in": "header",
            "name": "x-hasura-admin-secret",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "_\"id\" is required (enter it either in parameters or request body)_",
            "in": "path",
            "name": "id",
            "schema": {
              "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/uuid!"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Query parameters can also be provided in the request body as a JSON object",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "timesheets_by_pk": {
                      "description": "columns and relationships of \"timesheets\"",
                      "nullable": true,
                      "properties": {
                        "client_id": {
                          "$ref": "#/components/schemas/uuid!"
                        },
                        "created_at": {
                          "$ref": "#/components/schemas/timestamp!"
                        },
                        "freelance_id": {
                          "$ref": "#/components/schemas/uuid!"
                        },
                        "id": {
                          "$ref": "#/components/schemas/uuid!"
                        },
                        "project_task_id": {
                          "$ref": "#/components/schemas/uuid!"
                        },
                        "updated_at": {
                          "$ref": "#/components/schemas/timestamp"
                        },
                        "working_date": {
                          "nullable": false,
                          "title": "String",
                          "type": "string"
                        },
                        "working_durations": {
                          "$ref": "#/components/schemas/jsonb"
                        }
                      },
                      "title": "timesheets",
                      "type": "object"
                    }
                  }
                }
              }
            },
            "description": "Responses for GET /api/rest/timesheets/{id}"
          }
        }
      },
      "post": {
        "summary": "update_timesheets_by_pk",
        "description": "***\nThe GraphQl query for this endpoint is:\n``` graphql\nmutation update_timesheets_by_pk($id: uuid!, $object: timesheets_set_input!) {\n  update_timesheets_by_pk(pk_columns: {id: $id}, _set: $object) {\n    client_id\n    created_at\n    freelance_id\n    id\n    project_task_id\n    updated_at\n    working_date\n    working_durations\n }\n}\n\n```",
        "parameters": [
          {
            "description": "Your x-hasura-admin-secret will be used for authentication of the API request.",
            "in": "header",
            "name": "x-hasura-admin-secret",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "_\"id\" is required (enter it either in parameters or request body)_",
            "in": "path",
            "name": "id",
            "schema": {
              "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/uuid!"
                  },
                  "object": {
                    "$ref": "#/components/schemas/timesheets_set_input!"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Query parameters can also be provided in the request body as a JSON object",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "update_timesheets_by_pk": {
                      "description": "columns and relationships of \"timesheets\"",
                      "nullable": true,
                      "properties": {
                        "client_id": {
                          "$ref": "#/components/schemas/uuid!"
                        },
                        "created_at": {
                          "$ref": "#/components/schemas/timestamp!"
                        },
                        "freelance_id": {
                          "$ref": "#/components/schemas/uuid!"
                        },
                        "id": {
                          "$ref": "#/components/schemas/uuid!"
                        },
                        "project_task_id": {
                          "$ref": "#/components/schemas/uuid!"
                        },
                        "updated_at": {
                          "$ref": "#/components/schemas/timestamp"
                        },
                        "working_date": {
                          "nullable": false,
                          "title": "String",
                          "type": "string"
                        },
                        "working_durations": {
                          "$ref": "#/components/schemas/jsonb"
                        }
                      },
                      "title": "timesheets",
                      "type": "object"
                    }
                  }
                }
              }
            },
            "description": "Responses for POST /api/rest/timesheets/{id}"
          }
        }
      },
      "delete": {
        "summary": "delete_timesheets_by_pk",
        "description": "***\nThe GraphQl query for this endpoint is:\n``` graphql\nmutation delete_timesheets_by_pk($id: uuid!) {\n  delete_timesheets_by_pk(id: $id) {\n    client_id\n    created_at\n    freelance_id\n    id\n    project_task_id\n    updated_at\n    working_date\n    working_durations\n }\n}\n\n```",
        "parameters": [
          {
            "description": "Your x-hasura-admin-secret will be used for authentication of the API request.",
            "in": "header",
            "name": "x-hasura-admin-secret",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "_\"id\" is required (enter it either in parameters or request body)_",
            "in": "path",
            "name": "id",
            "schema": {
              "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/uuid!"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Query parameters can also be provided in the request body as a JSON object",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "delete_timesheets_by_pk": {
                      "description": "columns and relationships of \"timesheets\"",
                      "nullable": true,
                      "properties": {
                        "client_id": {
                          "$ref": "#/components/schemas/uuid!"
                        },
                        "created_at": {
                          "$ref": "#/components/schemas/timestamp!"
                        },
                        "freelance_id": {
                          "$ref": "#/components/schemas/uuid!"
                        },
                        "id": {
                          "$ref": "#/components/schemas/uuid!"
                        },
                        "project_task_id": {
                          "$ref": "#/components/schemas/uuid!"
                        },
                        "updated_at": {
                          "$ref": "#/components/schemas/timestamp"
                        },
                        "working_date": {
                          "nullable": false,
                          "title": "String",
                          "type": "string"
                        },
                        "working_durations": {
                          "$ref": "#/components/schemas/jsonb"
                        }
                      },
                      "title": "timesheets",
                      "type": "object"
                    }
                  }
                }
              }
            },
            "description": "Responses for DELETE /api/rest/timesheets/{id}"
          }
        }
      }
    },
    "/api/rest/Session": {
      "get": {
        "summary": "Session",
        "description": "***\nThe GraphQl query for this endpoint is:\n``` graphql\nquery Session {\n  Session {\n    createdAt\n    expires\n    sessionToken\n    updatedAt\n    userId\n  }\n}\n\n```",
        "parameters": [
          {
            "description": "Your x-hasura-admin-secret will be used for authentication of the API request.",
            "in": "header",
            "name": "x-hasura-admin-secret",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "Session": {
                      "items": {
                        "description": "columns and relationships of \"Session\"",
                        "nullable": false,
                        "properties": {
                          "createdAt": {
                            "$ref": "#/components/schemas/timestamp!"
                          },
                          "expires": {
                            "$ref": "#/components/schemas/timestamp!"
                          },
                          "sessionToken": {
                            "nullable": false,
                            "title": "String",
                            "type": "string"
                          },
                          "updatedAt": {
                            "$ref": "#/components/schemas/timestamp!"
                          },
                          "userId": {
                            "$ref": "#/components/schemas/uuid!"
                          }
                        },
                        "title": "Session",
                        "type": "object"
                      },
                      "nullable": false,
                      "type": "array"
                    }
                  }
                }
              }
            },
            "description": "Responses for GET /api/rest/Session"
          }
        }
      },
      "post": {
        "summary": "insert_Session_one",
        "description": "***\nThe GraphQl query for this endpoint is:\n``` graphql\nmutation insert_Session_one($object: Session_insert_input!) {\n  insert_Session_one(object: $object) {\n    createdAt\n    expires\n    sessionToken\n    updatedAt\n    userId\n  }\n}\n\n```",
        "parameters": [
          {
            "description": "Your x-hasura-admin-secret will be used for authentication of the API request.",
            "in": "header",
            "name": "x-hasura-admin-secret",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "object": {
                    "$ref": "#/components/schemas/Session_insert_input!"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Query parameters can also be provided in the request body as a JSON object",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "insert_Session_one": {
                      "description": "columns and relationships of \"Session\"",
                      "nullable": true,
                      "properties": {
                        "createdAt": {
                          "$ref": "#/components/schemas/timestamp!"
                        },
                        "expires": {
                          "$ref": "#/components/schemas/timestamp!"
                        },
                        "sessionToken": {
                          "nullable": false,
                          "title": "String",
                          "type": "string"
                        },
                        "updatedAt": {
                          "$ref": "#/components/schemas/timestamp!"
                        },
                        "userId": {
                          "$ref": "#/components/schemas/uuid!"
                        }
                      },
                      "title": "Session",
                      "type": "object"
                    }
                  }
                }
              }
            },
            "description": "Responses for POST /api/rest/Session"
          }
        }
      }
    },
    "/api/rest/freelances": {
      "get": {
        "summary": "freelances",
        "description": "***\nThe GraphQl query for this endpoint is:\n``` graphql\nquery freelances {\n  freelances {\n    created_at\n    daily_rate\n    email\n    id\n    updated_at\n  }\n}\n\n```",
        "parameters": [
          {
            "description": "Your x-hasura-admin-secret will be used for authentication of the API request.",
            "in": "header",
            "name": "x-hasura-admin-secret",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "freelances": {
                      "items": {
                        "description": "columns and relationships of \"freelances\"",
                        "nullable": false,
                        "properties": {
                          "created_at": {
                            "$ref": "#/components/schemas/timestamp!"
                          },
                          "daily_rate": {
                            "$ref": "#/components/schemas/numeric!"
                          },
                          "email": {
                            "nullable": true,
                            "title": "String",
                            "type": "string"
                          },
                          "id": {
                            "$ref": "#/components/schemas/uuid!"
                          },
                          "updated_at": {
                            "$ref": "#/components/schemas/timestamp"
                          }
                        },
                        "title": "freelances",
                        "type": "object"
                      },
                      "nullable": false,
                      "type": "array"
                    }
                  }
                }
              }
            },
            "description": "Responses for GET /api/rest/freelances"
          }
        }
      },
      "post": {
        "summary": "insert_freelances_one",
        "description": "***\nThe GraphQl query for this endpoint is:\n``` graphql\nmutation insert_freelances_one($object: freelances_insert_input!) {\n  insert_freelances_one(object: $object) {\n    created_at\n    daily_rate\n    email\n    id\n    updated_at\n  }\n}\n\n```",
        "parameters": [
          {
            "description": "Your x-hasura-admin-secret will be used for authentication of the API request.",
            "in": "header",
            "name": "x-hasura-admin-secret",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "object": {
                    "$ref": "#/components/schemas/freelances_insert_input!"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Query parameters can also be provided in the request body as a JSON object",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "insert_freelances_one": {
                      "description": "columns and relationships of \"freelances\"",
                      "nullable": true,
                      "properties": {
                        "created_at": {
                          "$ref": "#/components/schemas/timestamp!"
                        },
                        "daily_rate": {
                          "$ref": "#/components/schemas/numeric!"
                        },
                        "email": {
                          "nullable": true,
                          "title": "String",
                          "type": "string"
                        },
                        "id": {
                          "$ref": "#/components/schemas/uuid!"
                        },
                        "updated_at": {
                          "$ref": "#/components/schemas/timestamp"
                        }
                      },
                      "title": "freelances",
                      "type": "object"
                    }
                  }
                }
              }
            },
            "description": "Responses for POST /api/rest/freelances"
          }
        }
      }
    },
    "/api/rest/freelances/{id}": {
      "get": {
        "summary": "freelances_by_pk",
        "description": "***\nThe GraphQl query for this endpoint is:\n``` graphql\nquery freelances_by_pk($id: uuid!) {\n  freelances_by_pk(id: $id) {\n    created_at\n    daily_rate\n    email\n    id\n    updated_at\n  }\n}\n\n```",
        "parameters": [
          {
            "description": "Your x-hasura-admin-secret will be used for authentication of the API request.",
            "in": "header",
            "name": "x-hasura-admin-secret",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "_\"id\" is required (enter it either in parameters or request body)_",
            "in": "path",
            "name": "id",
            "schema": {
              "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/uuid!"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Query parameters can also be provided in the request body as a JSON object",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "freelances_by_pk": {
                      "description": "columns and relationships of \"freelances\"",
                      "nullable": true,
                      "properties": {
                        "created_at": {
                          "$ref": "#/components/schemas/timestamp!"
                        },
                        "daily_rate": {
                          "$ref": "#/components/schemas/numeric!"
                        },
                        "email": {
                          "nullable": true,
                          "title": "String",
                          "type": "string"
                        },
                        "id": {
                          "$ref": "#/components/schemas/uuid!"
                        },
                        "updated_at": {
                          "$ref": "#/components/schemas/timestamp"
                        }
                      },
                      "title": "freelances",
                      "type": "object"
                    }
                  }
                }
              }
            },
            "description": "Responses for GET /api/rest/freelances/{id}"
          }
        }
      },
      "post": {
        "summary": "update_freelances_by_pk",
        "description": "***\nThe GraphQl query for this endpoint is:\n``` graphql\nmutation update_freelances_by_pk($id: uuid!, $object: freelances_set_input!) {\n  update_freelances_by_pk(pk_columns: {id: $id}, _set: $object) {\n    created_at\n    daily_rate\n    email\n    id\n    updated_at\n  }\n}\n\n```",
        "parameters": [
          {
            "description": "Your x-hasura-admin-secret will be used for authentication of the API request.",
            "in": "header",
            "name": "x-hasura-admin-secret",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "_\"id\" is required (enter it either in parameters or request body)_",
            "in": "path",
            "name": "id",
            "schema": {
              "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/uuid!"
                  },
                  "object": {
                    "$ref": "#/components/schemas/freelances_set_input!"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Query parameters can also be provided in the request body as a JSON object",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "update_freelances_by_pk": {
                      "description": "columns and relationships of \"freelances\"",
                      "nullable": true,
                      "properties": {
                        "created_at": {
                          "$ref": "#/components/schemas/timestamp!"
                        },
                        "daily_rate": {
                          "$ref": "#/components/schemas/numeric!"
                        },
                        "email": {
                          "nullable": true,
                          "title": "String",
                          "type": "string"
                        },
                        "id": {
                          "$ref": "#/components/schemas/uuid!"
                        },
                        "updated_at": {
                          "$ref": "#/components/schemas/timestamp"
                        }
                      },
                      "title": "freelances",
                      "type": "object"
                    }
                  }
                }
              }
            },
            "description": "Responses for POST /api/rest/freelances/{id}"
          }
        }
      },
      "delete": {
        "summary": "delete_freelances_by_pk",
        "description": "***\nThe GraphQl query for this endpoint is:\n``` graphql\nmutation delete_freelances_by_pk($id: uuid!) {\n  delete_freelances_by_pk(id: $id) {\n    created_at\n    daily_rate\n    email\n    id\n    updated_at\n  }\n}\n\n```",
        "parameters": [
          {
            "description": "Your x-hasura-admin-secret will be used for authentication of the API request.",
            "in": "header",
            "name": "x-hasura-admin-secret",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "_\"id\" is required (enter it either in parameters or request body)_",
            "in": "path",
            "name": "id",
            "schema": {
              "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/uuid!"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Query parameters can also be provided in the request body as a JSON object",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "delete_freelances_by_pk": {
                      "description": "columns and relationships of \"freelances\"",
                      "nullable": true,
                      "properties": {
                        "created_at": {
                          "$ref": "#/components/schemas/timestamp!"
                        },
                        "daily_rate": {
                          "$ref": "#/components/schemas/numeric!"
                        },
                        "email": {
                          "nullable": true,
                          "title": "String",
                          "type": "string"
                        },
                        "id": {
                          "$ref": "#/components/schemas/uuid!"
                        },
                        "updated_at": {
                          "$ref": "#/components/schemas/timestamp"
                        }
                      },
                      "title": "freelances",
                      "type": "object"
                    }
                  }
                }
              }
            },
            "description": "Responses for DELETE /api/rest/freelances/{id}"
          }
        }
      }
    },
    "/api/rest/clients": {
      "get": {
        "summary": "clients",
        "description": "***\nThe GraphQl query for this endpoint is:\n``` graphql\nquery clients {\n  clients {\n    created_at\n    email\n    id\n    name\n    phone\n    updated_at\n  }\n}\n\n```",
        "parameters": [
          {
            "description": "Your x-hasura-admin-secret will be used for authentication of the API request.",
            "in": "header",
            "name": "x-hasura-admin-secret",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "clients": {
                      "items": {
                        "description": "columns and relationships of \"clients\"",
                        "nullable": false,
                        "properties": {
                          "created_at": {
                            "$ref": "#/components/schemas/timestamp!"
                          },
                          "email": {
                            "nullable": false,
                            "title": "String",
                            "type": "string"
                          },
                          "id": {
                            "$ref": "#/components/schemas/uuid!"
                          },
                          "name": {
                            "nullable": false,
                            "title": "String",
                            "type": "string"
                          },
                          "phone": {
                            "nullable": false,
                            "title": "String",
                            "type": "string"
                          },
                          "updated_at": {
                            "$ref": "#/components/schemas/timestamp"
                          }
                        },
                        "title": "clients",
                        "type": "object"
                      },
                      "nullable": false,
                      "type": "array"
                    }
                  }
                }
              }
            },
            "description": "Responses for GET /api/rest/clients"
          }
        }
      },
      "post": {
        "summary": "insert_clients_one",
        "description": "***\nThe GraphQl query for this endpoint is:\n``` graphql\nmutation insert_clients_one($object: clients_insert_input!) {\n  insert_clients_one(object: $object) {\n    created_at\n    email\n    id\n    name\n    phone\n    updated_at\n  }\n}\n\n```",
        "parameters": [
          {
            "description": "Your x-hasura-admin-secret will be used for authentication of the API request.",
            "in": "header",
            "name": "x-hasura-admin-secret",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "object": {
                    "$ref": "#/components/schemas/clients_insert_input!"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Query parameters can also be provided in the request body as a JSON object",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "insert_clients_one": {
                      "description": "columns and relationships of \"clients\"",
                      "nullable": true,
                      "properties": {
                        "created_at": {
                          "$ref": "#/components/schemas/timestamp!"
                        },
                        "email": {
                          "nullable": false,
                          "title": "String",
                          "type": "string"
                        },
                        "id": {
                          "$ref": "#/components/schemas/uuid!"
                        },
                        "name": {
                          "nullable": false,
                          "title": "String",
                          "type": "string"
                        },
                        "phone": {
                          "nullable": false,
                          "title": "String",
                          "type": "string"
                        },
                        "updated_at": {
                          "$ref": "#/components/schemas/timestamp"
                        }
                      },
                      "title": "clients",
                      "type": "object"
                    }
                  }
                }
              }
            },
            "description": "Responses for POST /api/rest/clients"
          }
        }
      }
    },
    "/api/rest/clients/{id}": {
      "get": {
        "summary": "clients_by_pk",
        "description": "***\nThe GraphQl query for this endpoint is:\n``` graphql\nquery clients_by_pk($id: uuid!) {\n  clients_by_pk(id: $id) {\n    created_at\n    email\n    id\n    name\n    phone\n    updated_at\n  }\n}\n\n```",
        "parameters": [
          {
            "description": "Your x-hasura-admin-secret will be used for authentication of the API request.",
            "in": "header",
            "name": "x-hasura-admin-secret",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "_\"id\" is required (enter it either in parameters or request body)_",
            "in": "path",
            "name": "id",
            "schema": {
              "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/uuid!"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Query parameters can also be provided in the request body as a JSON object",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "clients_by_pk": {
                      "description": "columns and relationships of \"clients\"",
                      "nullable": true,
                      "properties": {
                        "created_at": {
                          "$ref": "#/components/schemas/timestamp!"
                        },
                        "email": {
                          "nullable": false,
                          "title": "String",
                          "type": "string"
                        },
                        "id": {
                          "$ref": "#/components/schemas/uuid!"
                        },
                        "name": {
                          "nullable": false,
                          "title": "String",
                          "type": "string"
                        },
                        "phone": {
                          "nullable": false,
                          "title": "String",
                          "type": "string"
                        },
                        "updated_at": {
                          "$ref": "#/components/schemas/timestamp"
                        }
                      },
                      "title": "clients",
                      "type": "object"
                    }
                  }
                }
              }
            },
            "description": "Responses for GET /api/rest/clients/{id}"
          }
        }
      },
      "post": {
        "summary": "update_clients_by_pk",
        "description": "***\nThe GraphQl query for this endpoint is:\n``` graphql\nmutation update_clients_by_pk($id: uuid!, $object: clients_set_input!) {\n  update_clients_by_pk(pk_columns: {id: $id}, _set: $object) {\n    created_at\n    email\n    id\n    name\n    phone\n    updated_at\n  }\n}\n\n```",
        "parameters": [
          {
            "description": "Your x-hasura-admin-secret will be used for authentication of the API request.",
            "in": "header",
            "name": "x-hasura-admin-secret",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "_\"id\" is required (enter it either in parameters or request body)_",
            "in": "path",
            "name": "id",
            "schema": {
              "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/uuid!"
                  },
                  "object": {
                    "$ref": "#/components/schemas/clients_set_input!"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Query parameters can also be provided in the request body as a JSON object",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "update_clients_by_pk": {
                      "description": "columns and relationships of \"clients\"",
                      "nullable": true,
                      "properties": {
                        "created_at": {
                          "$ref": "#/components/schemas/timestamp!"
                        },
                        "email": {
                          "nullable": false,
                          "title": "String",
                          "type": "string"
                        },
                        "id": {
                          "$ref": "#/components/schemas/uuid!"
                        },
                        "name": {
                          "nullable": false,
                          "title": "String",
                          "type": "string"
                        },
                        "phone": {
                          "nullable": false,
                          "title": "String",
                          "type": "string"
                        },
                        "updated_at": {
                          "$ref": "#/components/schemas/timestamp"
                        }
                      },
                      "title": "clients",
                      "type": "object"
                    }
                  }
                }
              }
            },
            "description": "Responses for POST /api/rest/clients/{id}"
          }
        }
      },
      "delete": {
        "summary": "delete_clients_by_pk",
        "description": "***\nThe GraphQl query for this endpoint is:\n``` graphql\nmutation delete_clients_by_pk($id: uuid!) {\n  delete_clients_by_pk(id: $id) {\n    created_at\n    email\n    id\n    name\n    phone\n    updated_at\n  }\n}\n\n```",
        "parameters": [
          {
            "description": "Your x-hasura-admin-secret will be used for authentication of the API request.",
            "in": "header",
            "name": "x-hasura-admin-secret",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "_\"id\" is required (enter it either in parameters or request body)_",
            "in": "path",
            "name": "id",
            "schema": {
              "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/uuid!"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Query parameters can also be provided in the request body as a JSON object",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "delete_clients_by_pk": {
                      "description": "columns and relationships of \"clients\"",
                      "nullable": true,
                      "properties": {
                        "created_at": {
                          "$ref": "#/components/schemas/timestamp!"
                        },
                        "email": {
                          "nullable": false,
                          "title": "String",
                          "type": "string"
                        },
                        "id": {
                          "$ref": "#/components/schemas/uuid!"
                        },
                        "name": {
                          "nullable": false,
                          "title": "String",
                          "type": "string"
                        },
                        "phone": {
                          "nullable": false,
                          "title": "String",
                          "type": "string"
                        },
                        "updated_at": {
                          "$ref": "#/components/schemas/timestamp"
                        }
                      },
                      "title": "clients",
                      "type": "object"
                    }
                  }
                }
              }
            },
            "description": "Responses for DELETE /api/rest/clients/{id}"
          }
        }
      }
    },
    "/api/rest/projects": {
      "get": {
        "summary": "projects",
        "description": "***\nThe GraphQl query for this endpoint is:\n``` graphql\nquery projects {\n  projects {\n    created_at\n    description\n    end_date\n    id\n    is_active\n    name\n    start_date\n    updated_at\n  }\n}\n\n```",
        "parameters": [
          {
            "description": "Your x-hasura-admin-secret will be used for authentication of the API request.",
            "in": "header",
            "name": "x-hasura-admin-secret",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "projects": {
                      "items": {
                        "description": "columns and relationships of \"projects\"",
                        "nullable": false,
                        "properties": {
                          "created_at": {
                            "$ref": "#/components/schemas/timestamp!"
                          },
                          "description": {
                            "nullable": true,
                            "title": "String",
                            "type": "string"
                          },
                          "end_date": {
                            "$ref": "#/components/schemas/timestamp"
                          },
                          "id": {
                            "$ref": "#/components/schemas/uuid!"
                          },
                          "is_active": {
                            "nullable": false,
                            "title": "Boolean",
                            "type": "boolean"
                          },
                          "name": {
                            "nullable": false,
                            "title": "String",
                            "type": "string"
                          },
                          "start_date": {
                            "$ref": "#/components/schemas/timestamp"
                          },
                          "updated_at": {
                            "$ref": "#/components/schemas/timestamp"
                          }
                        },
                        "title": "projects",
                        "type": "object"
                      },
                      "nullable": false,
                      "type": "array"
                    }
                  }
                }
              }
            },
            "description": "Responses for GET /api/rest/projects"
          }
        }
      },
      "post": {
        "summary": "insert_projects_one",
        "description": "***\nThe GraphQl query for this endpoint is:\n``` graphql\nmutation insert_projects_one($object: projects_insert_input!) {\n  insert_projects_one(object: $object) {\n    created_at\n    description\n    end_date\n    id\n    is_active\n    name\n    start_date\n    updated_at\n  }\n}\n\n```",
        "parameters": [
          {
            "description": "Your x-hasura-admin-secret will be used for authentication of the API request.",
            "in": "header",
            "name": "x-hasura-admin-secret",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "object": {
                    "$ref": "#/components/schemas/projects_insert_input!"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Query parameters can also be provided in the request body as a JSON object",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "insert_projects_one": {
                      "description": "columns and relationships of \"projects\"",
                      "nullable": true,
                      "properties": {
                        "created_at": {
                          "$ref": "#/components/schemas/timestamp!"
                        },
                        "description": {
                          "nullable": true,
                          "title": "String",
                          "type": "string"
                        },
                        "end_date": {
                          "$ref": "#/components/schemas/timestamp"
                        },
                        "id": {
                          "$ref": "#/components/schemas/uuid!"
                        },
                        "is_active": {
                          "nullable": false,
                          "title": "Boolean",
                          "type": "boolean"
                        },
                        "name": {
                          "nullable": false,
                          "title": "String",
                          "type": "string"
                        },
                        "start_date": {
                          "$ref": "#/components/schemas/timestamp"
                        },
                        "updated_at": {
                          "$ref": "#/components/schemas/timestamp"
                        }
                      },
                      "title": "projects",
                      "type": "object"
                    }
                  }
                }
              }
            },
            "description": "Responses for POST /api/rest/projects"
          }
        }
      }
    },
    "/api/rest/projects/{id}": {
      "get": {
        "summary": "projects_by_pk",
        "description": "***\nThe GraphQl query for this endpoint is:\n``` graphql\nquery projects_by_pk($id: uuid!) {\n  projects_by_pk(id: $id) {\n    created_at\n    description\n    end_date\n    id\n    is_active\n    name\n    start_date\n    updated_at\n  }\n}\n\n```",
        "parameters": [
          {
            "description": "Your x-hasura-admin-secret will be used for authentication of the API request.",
            "in": "header",
            "name": "x-hasura-admin-secret",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "_\"id\" is required (enter it either in parameters or request body)_",
            "in": "path",
            "name": "id",
            "schema": {
              "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/uuid!"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Query parameters can also be provided in the request body as a JSON object",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "projects_by_pk": {
                      "description": "columns and relationships of \"projects\"",
                      "nullable": true,
                      "properties": {
                        "created_at": {
                          "$ref": "#/components/schemas/timestamp!"
                        },
                        "description": {
                          "nullable": true,
                          "title": "String",
                          "type": "string"
                        },
                        "end_date": {
                          "$ref": "#/components/schemas/timestamp"
                        },
                        "id": {
                          "$ref": "#/components/schemas/uuid!"
                        },
                        "is_active": {
                          "nullable": false,
                          "title": "Boolean",
                          "type": "boolean"
                        },
                        "name": {
                          "nullable": false,
                          "title": "String",
                          "type": "string"
                        },
                        "start_date": {
                          "$ref": "#/components/schemas/timestamp"
                        },
                        "updated_at": {
                          "$ref": "#/components/schemas/timestamp"
                        }
                      },
                      "title": "projects",
                      "type": "object"
                    }
                  }
                }
              }
            },
            "description": "Responses for GET /api/rest/projects/{id}"
          }
        }
      },
      "post": {
        "summary": "update_projects_by_pk",
        "description": "***\nThe GraphQl query for this endpoint is:\n``` graphql\nmutation update_projects_by_pk($id: uuid!, $object: projects_set_input!) {\n  update_projects_by_pk(pk_columns: {id: $id}, _set: $object) {\n    created_at\n    description\n    end_date\n    id\n    is_active\n    name\n    start_date\n    updated_at\n  }\n}\n\n```",
        "parameters": [
          {
            "description": "Your x-hasura-admin-secret will be used for authentication of the API request.",
            "in": "header",
            "name": "x-hasura-admin-secret",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "_\"id\" is required (enter it either in parameters or request body)_",
            "in": "path",
            "name": "id",
            "schema": {
              "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/uuid!"
                  },
                  "object": {
                    "$ref": "#/components/schemas/projects_set_input!"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Query parameters can also be provided in the request body as a JSON object",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "update_projects_by_pk": {
                      "description": "columns and relationships of \"projects\"",
                      "nullable": true,
                      "properties": {
                        "created_at": {
                          "$ref": "#/components/schemas/timestamp!"
                        },
                        "description": {
                          "nullable": true,
                          "title": "String",
                          "type": "string"
                        },
                        "end_date": {
                          "$ref": "#/components/schemas/timestamp"
                        },
                        "id": {
                          "$ref": "#/components/schemas/uuid!"
                        },
                        "is_active": {
                          "nullable": false,
                          "title": "Boolean",
                          "type": "boolean"
                        },
                        "name": {
                          "nullable": false,
                          "title": "String",
                          "type": "string"
                        },
                        "start_date": {
                          "$ref": "#/components/schemas/timestamp"
                        },
                        "updated_at": {
                          "$ref": "#/components/schemas/timestamp"
                        }
                      },
                      "title": "projects",
                      "type": "object"
                    }
                  }
                }
              }
            },
            "description": "Responses for POST /api/rest/projects/{id}"
          }
        }
      },
      "delete": {
        "summary": "delete_projects_by_pk",
        "description": "***\nThe GraphQl query for this endpoint is:\n``` graphql\nmutation delete_projects_by_pk($id: uuid!) {\n  delete_projects_by_pk(id: $id) {\n    created_at\n    description\n    end_date\n    id\n    is_active\n    name\n    start_date\n    updated_at\n  }\n}\n\n```",
        "parameters": [
          {
            "description": "Your x-hasura-admin-secret will be used for authentication of the API request.",
            "in": "header",
            "name": "x-hasura-admin-secret",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "_\"id\" is required (enter it either in parameters or request body)_",
            "in": "path",
            "name": "id",
            "schema": {
              "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/uuid!"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Query parameters can also be provided in the request body as a JSON object",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "delete_projects_by_pk": {
                      "description": "columns and relationships of \"projects\"",
                      "nullable": true,
                      "properties": {
                        "created_at": {
                          "$ref": "#/components/schemas/timestamp!"
                        },
                        "description": {
                          "nullable": true,
                          "title": "String",
                          "type": "string"
                        },
                        "end_date": {
                          "$ref": "#/components/schemas/timestamp"
                        },
                        "id": {
                          "$ref": "#/components/schemas/uuid!"
                        },
                        "is_active": {
                          "nullable": false,
                          "title": "Boolean",
                          "type": "boolean"
                        },
                        "name": {
                          "nullable": false,
                          "title": "String",
                          "type": "string"
                        },
                        "start_date": {
                          "$ref": "#/components/schemas/timestamp"
                        },
                        "updated_at": {
                          "$ref": "#/components/schemas/timestamp"
                        }
                      },
                      "title": "projects",
                      "type": "object"
                    }
                  }
                }
              }
            },
            "description": "Responses for DELETE /api/rest/projects/{id}"
          }
        }
      }
    },
    "/api/rest/projects_tasks": {
      "get": {
        "summary": "projects_tasks",
        "description": "***\nThe GraphQl query for this endpoint is:\n``` graphql\nquery projects_tasks {\n  projects_tasks {\n    created_at\n    date\n    id\n    project_id\n    task_description\n    updated_at\n  }\n}\n\n```",
        "parameters": [
          {
            "description": "Your x-hasura-admin-secret will be used for authentication of the API request.",
            "in": "header",
            "name": "x-hasura-admin-secret",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "projects_tasks": {
                      "items": {
                        "description": "columns and relationships of \"projects_tasks\"",
                        "nullable": false,
                        "properties": {
                          "created_at": {
                            "$ref": "#/components/schemas/timestamp!"
                          },
                          "date": {
                            "$ref": "#/components/schemas/timestamp"
                          },
                          "id": {
                            "$ref": "#/components/schemas/uuid!"
                          },
                          "project_id": {
                            "$ref": "#/components/schemas/uuid!"
                          },
                          "task_description": {
                            "nullable": true,
                            "title": "String",
                            "type": "string"
                          },
                          "updated_at": {
                            "$ref": "#/components/schemas/timestamp"
                          }
                        },
                        "title": "projects_tasks",
                        "type": "object"
                      },
                      "nullable": false,
                      "type": "array"
                    }
                  }
                }
              }
            },
            "description": "Responses for GET /api/rest/projects_tasks"
          }
        }
      },
      "post": {
        "summary": "insert_projects_tasks_one",
        "description": "***\nThe GraphQl query for this endpoint is:\n``` graphql\nmutation insert_projects_tasks_one($object: projects_tasks_insert_input!) {\n  insert_projects_tasks_one(object: $object) {\n    created_at\n    date\n   id\n    project_id\n    task_description\n    updated_at\n  }\n}\n\n```",
        "parameters": [
          {
            "description": "Your x-hasura-admin-secret will be used for authentication of the API request.",
            "in": "header",
            "name": "x-hasura-admin-secret",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "object": {
                    "$ref": "#/components/schemas/projects_tasks_insert_input!"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Query parameters can also be provided in the request body as a JSON object",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "insert_projects_tasks_one": {
                      "description": "columns and relationships of \"projects_tasks\"",
                      "nullable": true,
                      "properties": {
                        "created_at": {
                          "$ref": "#/components/schemas/timestamp!"
                        },
                        "date": {
                          "$ref": "#/components/schemas/timestamp"
                        },
                        "id": {
                          "$ref": "#/components/schemas/uuid!"
                        },
                        "project_id": {
                          "$ref": "#/components/schemas/uuid!"
                        },
                        "task_description": {
                          "nullable": true,
                          "title": "String",
                          "type": "string"
                        },
                        "updated_at": {
                          "$ref": "#/components/schemas/timestamp"
                        }
                      },
                      "title": "projects_tasks",
                      "type": "object"
                    }
                  }
                }
              }
            },
            "description": "Responses for POST /api/rest/projects_tasks"
          }
        }
      }
    },
    "/api/rest/projects_tasks/{id}": {
      "get": {
        "summary": "projects_tasks_by_pk",
        "description": "***\nThe GraphQl query for this endpoint is:\n``` graphql\nquery projects_tasks_by_pk($id: uuid!) {\n  projects_tasks_by_pk(id: $id) {\n    created_at\n    date\n     id\n    project_id\n    task_description\n    updated_at\n  }\n}\n\n```",
        "parameters": [
          {
            "description": "Your x-hasura-admin-secret will be used for authentication of the API request.",
            "in": "header",
            "name": "x-hasura-admin-secret",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "_\"id\" is required (enter it either in parameters or request body)_",
            "in": "path",
            "name": "id",
            "schema": {
              "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/uuid!"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Query parameters can also be provided in the request body as a JSON object",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "projects_tasks_by_pk": {
                      "description": "columns and relationships of \"projects_tasks\"",
                      "nullable": true,
                      "properties": {
                        "created_at": {
                          "$ref": "#/components/schemas/timestamp!"
                        },
                        "date": {
                          "$ref": "#/components/schemas/timestamp"
                        },
                        "id": {
                          "$ref": "#/components/schemas/uuid!"
                        },
                        "project_id": {
                          "$ref": "#/components/schemas/uuid!"
                        },
                        "task_description": {
                          "nullable": true,
                          "title": "String",
                          "type": "string"
                        },
                        "updated_at": {
                          "$ref": "#/components/schemas/timestamp"
                        }
                      },
                      "title": "projects_tasks",
                      "type": "object"
                    }
                  }
                }
              }
            },
            "description": "Responses for GET /api/rest/projects_tasks/{id}"
          }
        }
      },
      "post": {
        "summary": "update_projects_tasks_by_pk",
        "description": "***\nThe GraphQl query for this endpoint is:\n``` graphql\nmutation update_projects_tasks_by_pk($id: uuid!, $object: projects_tasks_set_input!) {\n  update_projects_tasks_by_pk(pk_columns: {id: $id}, _set: $object) {\n    created_at\n    date\n     id\n    project_id\n    task_description\n    updated_at\n  }\n}\n\n```",
        "parameters": [
          {
            "description": "Your x-hasura-admin-secret will be used for authentication of the API request.",
            "in": "header",
            "name": "x-hasura-admin-secret",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "_\"id\" is required (enter it either in parameters or request body)_",
            "in": "path",
            "name": "id",
            "schema": {
              "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/uuid!"
                  },
                  "object": {
                    "$ref": "#/components/schemas/projects_tasks_set_input!"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Query parameters can also be provided in the request body as a JSON object",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "update_projects_tasks_by_pk": {
                      "description": "columns and relationships of \"projects_tasks\"",
                      "nullable": true,
                      "properties": {
                        "created_at": {
                          "$ref": "#/components/schemas/timestamp!"
                        },
                        "date": {
                          "$ref": "#/components/schemas/timestamp"
                        },
                        "id": {
                          "$ref": "#/components/schemas/uuid!"
                        },
                        "project_id": {
                          "$ref": "#/components/schemas/uuid!"
                        },
                        "task_description": {
                          "nullable": true,
                          "title": "String",
                          "type": "string"
                        },
                        "updated_at": {
                          "$ref": "#/components/schemas/timestamp"
                        }
                      },
                      "title": "projects_tasks",
                      "type": "object"
                    }
                  }
                }
              }
            },
            "description": "Responses for POST /api/rest/projects_tasks/{id}"
          }
        }
      },
      "delete": {
        "summary": "delete_projects_tasks_by_pk",
        "description": "***\nThe GraphQl query for this endpoint is:\n``` graphql\nmutation delete_projects_tasks_by_pk($id: uuid!) {\n  delete_projects_tasks_by_pk(id: $id) {\n    created_at\n    date\n     id\n    project_id\n    task_description\n    updated_at\n  }\n}\n\n```",
        "parameters": [
          {
            "description": "Your x-hasura-admin-secret will be used for authentication of the API request.",
            "in": "header",
            "name": "x-hasura-admin-secret",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "_\"id\" is required (enter it either in parameters or request body)_",
            "in": "path",
            "name": "id",
            "schema": {
              "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/uuid!"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Query parameters can also be provided in the request body as a JSON object",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "delete_projects_tasks_by_pk": {
                      "description": "columns and relationships of \"projects_tasks\"",
                      "nullable": true,
                      "properties": {
                        "created_at": {
                          "$ref": "#/components/schemas/timestamp!"
                        },
                        "date": {
                          "$ref": "#/components/schemas/timestamp"
                        },
                        "id": {
                          "$ref": "#/components/schemas/uuid!"
                        },
                        "project_id": {
                          "$ref": "#/components/schemas/uuid!"
                        },
                        "task_description": {
                          "nullable": true,
                          "title": "String",
                          "type": "string"
                        },
                        "updated_at": {
                          "$ref": "#/components/schemas/timestamp"
                        }
                      },
                      "title": "projects_tasks",
                      "type": "object"
                    }
                  }
                }
              }
            },
            "description": "Responses for DELETE /api/rest/projects_tasks/{id}"
          }
        }
      }
    },
    "/api/rest/Role": {
      "get": {
        "summary": "Role",
        "description": "***\nThe GraphQl query for this endpoint is:\n``` graphql\nquery Role {\n  Role {\n    createdAt\n    description\n    id\n    name\n    updatedAt\n  }\n}\n\n```",
        "parameters": [
          {
            "description": "Your x-hasura-admin-secret will be used for authentication of the API request.",
            "in": "header",
            "name": "x-hasura-admin-secret",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "Role": {
                      "items": {
                        "description": "columns and relationships of \"Role\"",
                        "nullable": false,
                        "properties": {
                          "createdAt": {
                            "$ref": "#/components/schemas/timestamp!"
                          },
                          "description": {
                            "nullable": true,
                            "title": "String",
                            "type": "string"
                          },
                          "id": {
                            "$ref": "#/components/schemas/uuid!"
                          },
                          "name": {
                            "nullable": false,
                            "title": "String",
                            "type": "string"
                          },
                          "updatedAt": {
                            "$ref": "#/components/schemas/timestamp!"
                          }
                        },
                        "title": "Role",
                        "type": "object"
                      },
                      "nullable": false,
                      "type": "array"
                    }
                  }
                }
              }
            },
            "description": "Responses for GET /api/rest/Role"
          }
        }
      },
      "post": {
        "summary": "insert_Role_one",
        "description": "***\nThe GraphQl query for this endpoint is:\n``` graphql\nmutation insert_Role_one($object: Role_insert_input!) {\n  insert_Role_one(object: $object) {\n    createdAt\n    description\n    id\n    name\n    updatedAt\n  }\n}\n\n```",
        "parameters": [
          {
            "description": "Your x-hasura-admin-secret will be used for authentication of the API request.",
            "in": "header",
            "name": "x-hasura-admin-secret",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "object": {
                    "$ref": "#/components/schemas/Role_insert_input!"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Query parameters can also be provided in the request body as a JSON object",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "insert_Role_one": {
                      "description": "columns and relationships of \"Role\"",
                      "nullable": true,
                      "properties": {
                        "createdAt": {
                          "$ref": "#/components/schemas/timestamp!"
                        },
                        "description": {
                          "nullable": true,
                          "title": "String",
                          "type": "string"
                        },
                        "id": {
                          "$ref": "#/components/schemas/uuid!"
                        },
                        "name": {
                          "nullable": false,
                          "title": "String",
                          "type": "string"
                        },
                        "updatedAt": {
                          "$ref": "#/components/schemas/timestamp!"
                        }
                      },
                      "title": "Role",
                      "type": "object"
                    }
                  }
                }
              }
            },
            "description": "Responses for POST /api/rest/Role"
          }
        }
      }
    },
    "/api/rest/Role/{id}": {
      "get": {
        "summary": "Role_by_pk",
        "description": "***\nThe GraphQl query for this endpoint is:\n``` graphql\nquery Role_by_pk($id: uuid!) {\n  Role_by_pk(id: $id) {\n    createdAt\n    description\n    id\n    name\n    updatedAt\n  }\n}\n\n```",
        "parameters": [
          {
            "description": "Your x-hasura-admin-secret will be used for authentication of the API request.",
            "in": "header",
            "name": "x-hasura-admin-secret",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "_\"id\" is required (enter it either in parameters or request body)_",
            "in": "path",
            "name": "id",
            "schema": {
              "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/uuid!"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Query parameters can also be provided in the request body as a JSON object",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "Role_by_pk": {
                      "description": "columns and relationships of \"Role\"",
                      "nullable": true,
                      "properties": {
                        "createdAt": {
                          "$ref": "#/components/schemas/timestamp!"
                        },
                        "description": {
                          "nullable": true,
                          "title": "String",
                          "type": "string"
                        },
                        "id": {
                          "$ref": "#/components/schemas/uuid!"
                        },
                        "name": {
                          "nullable": false,
                          "title": "String",
                          "type": "string"
                        },
                        "updatedAt": {
                          "$ref": "#/components/schemas/timestamp!"
                        }
                      },
                      "title": "Role",
                      "type": "object"
                    }
                  }
                }
              }
            },
            "description": "Responses for GET /api/rest/Role/{id}"
          }
        }
      },
      "post": {
        "summary": "update_Role_by_pk",
        "description": "***\nThe GraphQl query for this endpoint is:\n``` graphql\nmutation update_Role_by_pk($id: uuid!, $object: Role_set_input!) {\n  update_Role_by_pk(pk_columns: {id: $id}, _set: $object) {\n    createdAt\n    description\n    id\n    name\n    updatedAt\n  }\n}\n\n```",
        "parameters": [
          {
            "description": "Your x-hasura-admin-secret will be used for authentication of the API request.",
            "in": "header",
            "name": "x-hasura-admin-secret",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "_\"id\" is required (enter it either in parameters or request body)_",
            "in": "path",
            "name": "id",
            "schema": {
              "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/uuid!"
                  },
                  "object": {
                    "$ref": "#/components/schemas/Role_set_input!"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Query parameters can also be provided in the request body as a JSON object",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "update_Role_by_pk": {
                      "description": "columns and relationships of \"Role\"",
                      "nullable": true,
                      "properties": {
                        "createdAt": {
                          "$ref": "#/components/schemas/timestamp!"
                        },
                        "description": {
                          "nullable": true,
                          "title": "String",
                          "type": "string"
                        },
                        "id": {
                          "$ref": "#/components/schemas/uuid!"
                        },
                        "name": {
                          "nullable": false,
                          "title": "String",
                          "type": "string"
                        },
                        "updatedAt": {
                          "$ref": "#/components/schemas/timestamp!"
                        }
                      },
                      "title": "Role",
                      "type": "object"
                    }
                  }
                }
              }
            },
            "description": "Responses for POST /api/rest/Role/{id}"
          }
        }
      },
      "delete": {
        "summary": "delete_Role_by_pk",
        "description": "***\nThe GraphQl query for this endpoint is:\n``` graphql\nmutation delete_Role_by_pk($id: uuid!) {\n  delete_Role_by_pk(id: $id) {\n    createdAt\n    description\n    id\n    name\n    updatedAt\n  }\n}\n\n```",
        "parameters": [
          {
            "description": "Your x-hasura-admin-secret will be used for authentication of the API request.",
            "in": "header",
            "name": "x-hasura-admin-secret",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "_\"id\" is required (enter it either in parameters or request body)_",
            "in": "path",
            "name": "id",
            "schema": {
              "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/uuid!"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Query parameters can also be provided in the request body as a JSON object",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "delete_Role_by_pk": {
                      "description": "columns and relationships of \"Role\"",
                      "nullable": true,
                      "properties": {
                        "createdAt": {
                          "$ref": "#/components/schemas/timestamp!"
                        },
                        "description": {
                          "nullable": true,
                          "title": "String",
                          "type": "string"
                        },
                        "id": {
                          "$ref": "#/components/schemas/uuid!"
                        },
                        "name": {
                          "nullable": false,
                          "title": "String",
                          "type": "string"
                        },
                        "updatedAt": {
                          "$ref": "#/components/schemas/timestamp!"
                        }
                      },
                      "title": "Role",
                      "type": "object"
                    }
                  }
                }
              }
            },
            "description": "Responses for DELETE /api/rest/Role/{id}"
          }
        }
      }
    },
    "/api/rest/Permission": {
      "get": {
        "summary": "Permission",
        "description": "***\nThe GraphQl query for this endpoint is:\n``` graphql\nquery Permission {\n  Permission {\n    code\n    createdAt\n    description\n    id\n    name\n    updatedAt\n  }\n}\n\n```",
        "parameters": [
          {
            "description": "Your x-hasura-admin-secret will be used for authentication of the API request.",
            "in": "header",
            "name": "x-hasura-admin-secret",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "Permission": {
                      "items": {
                        "description": "columns and relationships of \"Permission\"",
                        "nullable": false,
                        "properties": {
                          "code": {
                            "nullable": false,
                            "title": "String",
                            "type": "string"
                          },
                          "createdAt": {
                            "$ref": "#/components/schemas/timestamp!"
                          },
                          "description": {
                            "nullable": true,
                            "title": "String",
                            "type": "string"
                          },
                          "id": {
                            "$ref": "#/components/schemas/uuid!"
                          },
                          "name": {
                            "nullable": false,
                            "title": "String",
                            "type": "string"
                          },
                          "updatedAt": {
                            "$ref": "#/components/schemas/timestamp!"
                          }
                        },
                        "title": "Permission",
                        "type": "object"
                      },
                      "nullable": false,
                      "type": "array"
                    }
                  }
                }
              }
            },
            "description": "Responses for GET /api/rest/Permission"
          }
        }
      },
      "post": {
        "summary": "insert_Permission_one",
        "description": "***\nThe GraphQl query for this endpoint is:\n``` graphql\nmutation insert_Permission_one($object: Permission_insert_input!) {\n  insert_Permission_one(object: $object) {\n    code\n    createdAt\n    description\n    id\n    name\n    updatedAt\n  }\n}\n\n```",
        "parameters": [
          {
            "description": "Your x-hasura-admin-secret will be used for authentication of the API request.",
            "in": "header",
            "name": "x-hasura-admin-secret",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "object": {
                    "$ref": "#/components/schemas/Permission_insert_input!"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Query parameters can also be provided in the request body as a JSON object",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "insert_Permission_one": {
                      "description": "columns and relationships of \"Permission\"",
                      "nullable": true,
                      "properties": {
                        "code": {
                          "nullable": false,
                          "title": "String",
                          "type": "string"
                        },
                        "createdAt": {
                          "$ref": "#/components/schemas/timestamp!"
                        },
                        "description": {
                          "nullable": true,
                          "title": "String",
                          "type": "string"
                        },
                        "id": {
                          "$ref": "#/components/schemas/uuid!"
                        },
                        "name": {
                          "nullable": false,
                          "title": "String",
                          "type": "string"
                        },
                        "updatedAt": {
                          "$ref": "#/components/schemas/timestamp!"
                        }
                      },
                      "title": "Permission",
                      "type": "object"
                    }
                  }
                }
              }
            },
            "description": "Responses for POST /api/rest/Permission"
          }
        }
      }
    },
    "/api/rest/Permission/{id}": {
      "get": {
        "summary": "Permission_by_pk",
        "description": "***\nThe GraphQl query for this endpoint is:\n``` graphql\nquery Permission_by_pk($id: uuid!) {\n  Permission_by_pk(id: $id) {\n    code\n    createdAt\n    description\n    id\n    name\n    updatedAt\n  }\n}\n\n```",
        "parameters": [
          {
            "description": "Your x-hasura-admin-secret will be used for authentication of the API request.",
            "in": "header",
            "name": "x-hasura-admin-secret",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "_\"id\" is required (enter it either in parameters or request body)_",
            "in": "path",
            "name": "id",
            "schema": {
              "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/uuid!"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Query parameters can also be provided in the request body as a JSON object",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "Permission_by_pk": {
                      "description": "columns and relationships of \"Permission\"",
                      "nullable": true,
                      "properties": {
                        "code": {
                          "nullable": false,
                          "title": "String",
                          "type": "string"
                        },
                        "createdAt": {
                          "$ref": "#/components/schemas/timestamp!"
                        },
                        "description": {
                          "nullable": true,
                          "title": "String",
                          "type": "string"
                        },
                        "id": {
                          "$ref": "#/components/schemas/uuid!"
                        },
                        "name": {
                          "nullable": false,
                          "title": "String",
                          "type": "string"
                        },
                        "updatedAt": {
                          "$ref": "#/components/schemas/timestamp!"
                        }
                      },
                      "title": "Permission",
                      "type": "object"
                    }
                  }
                }
              }
            },
            "description": "Responses for GET /api/rest/Permission/{id}"
          }
        }
      },
      "post": {
        "summary": "update_Permission_by_pk",
        "description": "***\nThe GraphQl query for this endpoint is:\n``` graphql\nmutation update_Permission_by_pk($id: uuid!, $object: Permission_set_input!) {\n  update_Permission_by_pk(pk_columns: {id: $id}, _set: $object) {\n    code\n    createdAt\n    description\n    id\n    name\n    updatedAt\n  }\n}\n\n```",
        "parameters": [
          {
            "description": "Your x-hasura-admin-secret will be used for authentication of the API request.",
            "in": "header",
            "name": "x-hasura-admin-secret",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "_\"id\" is required (enter it either in parameters or request body)_",
            "in": "path",
            "name": "id",
            "schema": {
              "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/uuid!"
                  },
                  "object": {
                    "$ref": "#/components/schemas/Permission_set_input!"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Query parameters can also be provided in the request body as a JSON object",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "update_Permission_by_pk": {
                      "description": "columns and relationships of \"Permission\"",
                      "nullable": true,
                      "properties": {
                        "code": {
                          "nullable": false,
                          "title": "String",
                          "type": "string"
                        },
                        "createdAt": {
                          "$ref": "#/components/schemas/timestamp!"
                        },
                        "description": {
                          "nullable": true,
                          "title": "String",
                          "type": "string"
                        },
                        "id": {
                          "$ref": "#/components/schemas/uuid!"
                        },
                        "name": {
                          "nullable": false,
                          "title": "String",
                          "type": "string"
                        },
                        "updatedAt": {
                          "$ref": "#/components/schemas/timestamp!"
                        }
                      },
                      "title": "Permission",
                      "type": "object"
                    }
                  }
                }
              }
            },
            "description": "Responses for POST /api/rest/Permission/{id}"
          }
        }
      },
      "delete": {
        "summary": "delete_Permission_by_pk",
        "description": "***\nThe GraphQl query for this endpoint is:\n``` graphql\nmutation delete_Permission_by_pk($id: uuid!) {\n  delete_Permission_by_pk(id: $id) {\n    code\n    createdAt\n    description\n    id\n    name\n    updatedAt\n  }\n}\n\n```",
        "parameters": [
          {
            "description": "Your x-hasura-admin-secret will be used for authentication of the API request.",
            "in": "header",
            "name": "x-hasura-admin-secret",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "_\"id\" is required (enter it either in parameters or request body)_",
            "in": "path",
            "name": "id",
            "schema": {
              "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/uuid!"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Query parameters can also be provided in the request body as a JSON object",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "delete_Permission_by_pk": {
                      "description": "columns and relationships of \"Permission\"",
                      "nullable": true,
                      "properties": {
                        "code": {
                          "nullable": false,
                          "title": "String",
                          "type": "string"
                        },
                        "createdAt": {
                          "$ref": "#/components/schemas/timestamp!"
                        },
                        "description": {
                          "nullable": true,
                          "title": "String",
                          "type": "string"
                        },
                        "id": {
                          "$ref": "#/components/schemas/uuid!"
                        },
                        "name": {
                          "nullable": false,
                          "title": "String",
                          "type": "string"
                        },
                        "updatedAt": {
                          "$ref": "#/components/schemas/timestamp!"
                        }
                      },
                      "title": "Permission",
                      "type": "object"
                    }
                  }
                }
              }
            },
            "description": "Responses for DELETE /api/rest/Permission/{id}"
          }
        }
      }
    },
    "/api/rest/User": {
      "get": {
        "summary": "User",
        "description": "***\nThe GraphQl query for this endpoint is:\n``` graphql\nquery User {\n  User {\n    createdAt\n    email\n    emailVerified\n    id\n    image\n    name\n    updatedAt\n  }\n}\n\n```",
        "parameters": [
          {
            "description": "Your x-hasura-admin-secret will be used for authentication of the API request.",
            "in": "header",
            "name": "x-hasura-admin-secret",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "User": {
                      "items": {
                        "description": "columns and relationships of \"User\"",
                        "nullable": false,
                        "properties": {
                          "createdAt": {
                            "$ref": "#/components/schemas/timestamp!"
                          },
                          "email": {
                            "nullable": false,
                            "title": "String",
                            "type": "string"
                          },
                          "emailVerified": {
                            "$ref": "#/components/schemas/timestamp"
                          },
                          "id": {
                            "$ref": "#/components/schemas/uuid!"
                          },
                          "image": {
                            "nullable": true,
                            "title": "String",
                            "type": "string"
                          },
                          "name": {
                            "nullable": true,
                            "title": "String",
                            "type": "string"
                          },
                          "updatedAt": {
                            "$ref": "#/components/schemas/timestamp!"
                          }
                        },
                        "title": "User",
                        "type": "object"
                      },
                      "nullable": false,
                      "type": "array"
                    }
                  }
                }
              }
            },
            "description": "Responses for GET /api/rest/User"
          }
        }
      },
      "post": {
        "summary": "insert_User_one",
        "description": "***\nThe GraphQl query for this endpoint is:\n``` graphql\nmutation insert_User_one($object: User_insert_input!) {\n  insert_User_one(object: $object) {\n    createdAt\n    email\n    emailVerified\n    id\n    image\n    name\n    updatedAt\n  }\n}\n\n```",
        "parameters": [
          {
            "description": "Your x-hasura-admin-secret will be used for authentication of the API request.",
            "in": "header",
            "name": "x-hasura-admin-secret",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "object": {
                    "$ref": "#/components/schemas/User_insert_input!"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Query parameters can also be provided in the request body as a JSON object",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "insert_User_one": {
                      "description": "columns and relationships of \"User\"",
                      "nullable": true,
                      "properties": {
                        "createdAt": {
                          "$ref": "#/components/schemas/timestamp!"
                        },
                        "email": {
                          "nullable": false,
                          "title": "String",
                          "type": "string"
                        },
                        "emailVerified": {
                          "$ref": "#/components/schemas/timestamp"
                        },
                        "id": {
                          "$ref": "#/components/schemas/uuid!"
                        },
                        "image": {
                          "nullable": true,
                          "title": "String",
                          "type": "string"
                        },
                        "name": {
                          "nullable": true,
                          "title": "String",
                          "type": "string"
                        },
                        "updatedAt": {
                          "$ref": "#/components/schemas/timestamp!"
                        }
                      },
                      "title": "User",
                      "type": "object"
                    }
                  }
                }
              }
            },
            "description": "Responses for POST /api/rest/User"
          }
        }
      }
    },
    "/api/rest/User/{id}": {
      "get": {
        "summary": "User_by_pk",
        "description": "***\nThe GraphQl query for this endpoint is:\n``` graphql\nquery User_by_pk($id: uuid!) {\n  User_by_pk(id: $id) {\n    createdAt\n    email\n    emailVerified\n    id\n    image\n    name\n    updatedAt\n  }\n}\n\n```",
        "parameters": [
          {
            "description": "Your x-hasura-admin-secret will be used for authentication of the API request.",
            "in": "header",
            "name": "x-hasura-admin-secret",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "_\"id\" is required (enter it either in parameters or request body)_",
            "in": "path",
            "name": "id",
            "schema": {
              "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/uuid!"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Query parameters can also be provided in the request body as a JSON object",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "User_by_pk": {
                      "description": "columns and relationships of \"User\"",
                      "nullable": true,
                      "properties": {
                        "createdAt": {
                          "$ref": "#/components/schemas/timestamp!"
                        },
                        "email": {
                          "nullable": false,
                          "title": "String",
                          "type": "string"
                        },
                        "emailVerified": {
                          "$ref": "#/components/schemas/timestamp"
                        },
                        "id": {
                          "$ref": "#/components/schemas/uuid!"
                        },
                        "image": {
                          "nullable": true,
                          "title": "String",
                          "type": "string"
                        },
                        "name": {
                          "nullable": true,
                          "title": "String",
                          "type": "string"
                        },
                        "updatedAt": {
                          "$ref": "#/components/schemas/timestamp!"
                        }
                      },
                      "title": "User",
                      "type": "object"
                    }
                  }
                }
              }
            },
            "description": "Responses for GET /api/rest/User/{id}"
          }
        }
      },
      "post": {
        "summary": "update_User_by_pk",
        "description": "***\nThe GraphQl query for this endpoint is:\n``` graphql\nmutation update_User_by_pk($id: uuid!, $object: User_set_input!) {\n  update_User_by_pk(pk_columns: {id: $id}, _set: $object) {\n    createdAt\n    email\n    emailVerified\n    id\n    image\n    name\n    updatedAt\n  }\n}\n\n```",
        "parameters": [
          {
            "description": "Your x-hasura-admin-secret will be used for authentication of the API request.",
            "in": "header",
            "name": "x-hasura-admin-secret",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "_\"id\" is required (enter it either in parameters or request body)_",
            "in": "path",
            "name": "id",
            "schema": {
              "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/uuid!"
                  },
                  "object": {
                    "$ref": "#/components/schemas/User_set_input!"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Query parameters can also be provided in the request body as a JSON object",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "update_User_by_pk": {
                      "description": "columns and relationships of \"User\"",
                      "nullable": true,
                      "properties": {
                        "createdAt": {
                          "$ref": "#/components/schemas/timestamp!"
                        },
                        "email": {
                          "nullable": false,
                          "title": "String",
                          "type": "string"
                        },
                        "emailVerified": {
                          "$ref": "#/components/schemas/timestamp"
                        },
                        "id": {
                          "$ref": "#/components/schemas/uuid!"
                        },
                        "image": {
                          "nullable": true,
                          "title": "String",
                          "type": "string"
                        },
                        "name": {
                          "nullable": true,
                          "title": "String",
                          "type": "string"
                        },
                        "updatedAt": {
                          "$ref": "#/components/schemas/timestamp!"
                        }
                      },
                      "title": "User",
                      "type": "object"
                    }
                  }
                }
              }
            },
            "description": "Responses for POST /api/rest/User/{id}"
          }
        }
      },
      "delete": {
        "summary": "delete_User_by_pk",
        "description": "***\nThe GraphQl query for this endpoint is:\n``` graphql\nmutation delete_User_by_pk($id: uuid!) {\n  delete_User_by_pk(id: $id) {\n    createdAt\n    email\n    emailVerified\n    id\n    image\n    name\n    updatedAt\n  }\n}\n\n```",
        "parameters": [
          {
            "description": "Your x-hasura-admin-secret will be used for authentication of the API request.",
            "in": "header",
            "name": "x-hasura-admin-secret",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "_\"id\" is required (enter it either in parameters or request body)_",
            "in": "path",
            "name": "id",
            "schema": {
              "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "id": {
                    "$ref": "#/components/schemas/uuid!"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Query parameters can also be provided in the request body as a JSON object",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "delete_User_by_pk": {
                      "description": "columns and relationships of \"User\"",
                      "nullable": true,
                      "properties": {
                        "createdAt": {
                          "$ref": "#/components/schemas/timestamp!"
                        },
                        "email": {
                          "nullable": false,
                          "title": "String",
                          "type": "string"
                        },
                        "emailVerified": {
                          "$ref": "#/components/schemas/timestamp"
                        },
                        "id": {
                          "$ref": "#/components/schemas/uuid!"
                        },
                        "image": {
                          "nullable": true,
                          "title": "String",
                          "type": "string"
                        },
                        "name": {
                          "nullable": true,
                          "title": "String",
                          "type": "string"
                        },
                        "updatedAt": {
                          "$ref": "#/components/schemas/timestamp!"
                        }
                      },
                      "title": "User",
                      "type": "object"
                    }
                  }
                }
              }
            },
            "description": "Responses for DELETE /api/rest/User/{id}"
          }
        }
      }
    },
    "/api/rest/Account": {
      "get": {
        "summary": "Account",
        "description": "***\nThe GraphQl query for this endpoint is:\n``` graphql\nquery Account {\n  Account {\n    access_token\n    createdAt\n    expires_at\n    id_token\n    provider\n    providerAccountId\n    refresh_token\n    scope\n    session_state\n    token_type\n    type\n    updatedAt\n    userId\n  }\n}\n\n```",
        "parameters": [
          {
            "description": "Your x-hasura-admin-secret will be used for authentication of the API request.",
            "in": "header",
            "name": "x-hasura-admin-secret",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "Account": {
                      "items": {
                        "description": "columns and relationships of \"Account\"",
                        "nullable": false,
                        "properties": {
                          "access_token": {
                            "nullable": true,
                            "title": "String",
                            "type": "string"
                          },
                          "createdAt": {
                            "$ref": "#/components/schemas/timestamp!"
                          },
                          "expires_at": {
                            "nullable": true,
                            "title": "Int",
                            "type": "integer"
                          },
                          "id_token": {
                            "nullable": true,
                            "title": "String",
                            "type": "string"
                          },
                          "provider": {
                            "nullable": false,
                            "title": "String",
                            "type": "string"
                          },
                          "providerAccountId": {
                            "nullable": false,
                            "title": "String",
                            "type": "string"
                          },
                          "refresh_token": {
                            "nullable": true,
                            "title": "String",
                            "type": "string"
                          },
                          "scope": {
                            "nullable": true,
                            "title": "String",
                            "type": "string"
                          },
                          "session_state": {
                            "nullable": true,
                            "title": "String",
                            "type": "string"
                          },
                          "token_type": {
                            "nullable": true,
                            "title": "String",
                            "type": "string"
                          },
                          "type": {
                            "nullable": false,
                            "title": "String",
                            "type": "string"
                          },
                          "updatedAt": {
                            "$ref": "#/components/schemas/timestamp!"
                          },
                          "userId": {
                            "$ref": "#/components/schemas/uuid!"
                          }
                        },
                        "title": "Account",
                        "type": "object"
                      },
                      "nullable": false,
                      "type": "array"
                    }
                  }
                }
              }
            },
            "description": "Responses for GET /api/rest/Account"
          }
        }
      },
      "post": {
        "summary": "insert_Account_one",
        "description": "***\nThe GraphQl query for this endpoint is:\n``` graphql\nmutation insert_Account_one($object: Account_insert_input!) {\n  insert_Account_one(object: $object) {\n    access_token\n    createdAt\n    expires_at\n    id_token\n    provider\n    providerAccountId\n    refresh_token\n    scope\n    session_state\n    token_type\n    type\n    updatedAt\n    userId\n  }\n}\n\n```",
        "parameters": [
          {
            "description": "Your x-hasura-admin-secret will be used for authentication of the API request.",
            "in": "header",
            "name": "x-hasura-admin-secret",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "object": {
                    "$ref": "#/components/schemas/Account_insert_input!"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Query parameters can also be provided in the request body as a JSON object",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "insert_Account_one": {
                      "description": "columns and relationships of \"Account\"",
                      "nullable": true,
                      "properties": {
                        "access_token": {
                          "nullable": true,
                          "title": "String",
                          "type": "string"
                        },
                        "createdAt": {
                          "$ref": "#/components/schemas/timestamp!"
                        },
                        "expires_at": {
                          "nullable": true,
                          "title": "Int",
                          "type": "integer"
                        },
                        "id_token": {
                          "nullable": true,
                          "title": "String",
                          "type": "string"
                        },
                        "provider": {
                          "nullable": false,
                          "title": "String",
                          "type": "string"
                        },
                        "providerAccountId": {
                          "nullable": false,
                          "title": "String",
                          "type": "string"
                        },
                        "refresh_token": {
                          "nullable": true,
                          "title": "String",
                          "type": "string"
                        },
                        "scope": {
                          "nullable": true,
                          "title": "String",
                          "type": "string"
                        },
                        "session_state": {
                          "nullable": true,
                          "title": "String",
                          "type": "string"
                        },
                        "token_type": {
                          "nullable": true,
                          "title": "String",
                          "type": "string"
                        },
                        "type": {
                          "nullable": false,
                          "title": "String",
                          "type": "string"
                        },
                        "updatedAt": {
                          "$ref": "#/components/schemas/timestamp!"
                        },
                        "userId": {
                          "$ref": "#/components/schemas/uuid!"
                        }
                      },
                      "title": "Account",
                      "type": "object"
                    }
                  }
                }
              }
            },
            "description": "Responses for POST /api/rest/Account"
          }
        }
      }
    },
    "/api/rest/Account/{provider}/{providerAccountId}": {
      "get": {
        "summary": "Account_by_pk",
        "description": "***\nThe GraphQl query for this endpoint is:\n``` graphql\nquery Account_by_pk($provider: String!, $providerAccountId: String!) {\n  Account_by_pk(provider: $provider, providerAccountId: $providerAccountId) {\n    access_token\n    createdAt\n    expires_at\n    id_token\n    provider\n    providerAccountId\n    refresh_token\n    scope\n    session_state\n    token_type\n    type\n    updatedAt\n    userId\n  }\n}\n\n```",
        "parameters": [
          {
            "description": "Your x-hasura-admin-secret will be used for authentication of the API request.",
            "in": "header",
            "name": "x-hasura-admin-secret",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "_\"provider\" is required (enter it either in parameters or request body)_",
            "in": "path",
            "name": "provider",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "_\"providerAccountId\" is required (enter it either in parameters or request body)_",
            "in": "path",
            "name": "providerAccountId",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "provider": {
                    "nullable": false,
                    "title": "String",
                    "type": "string"
                  },
                  "providerAccountId": {
                    "nullable": false,
                    "title": "String",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Query parameters can also be provided in the request body as a JSON object",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "Account_by_pk": {
                      "description": "columns and relationships of \"Account\"",
                      "nullable": true,
                      "properties": {
                        "access_token": {
                          "nullable": true,
                          "title": "String",
                          "type": "string"
                        },
                        "createdAt": {
                          "$ref": "#/components/schemas/timestamp!"
                        },
                        "expires_at": {
                          "nullable": true,
                          "title": "Int",
                          "type": "integer"
                        },
                        "id_token": {
                          "nullable": true,
                          "title": "String",
                          "type": "string"
                        },
                        "provider": {
                          "nullable": false,
                          "title": "String",
                          "type": "string"
                        },
                        "providerAccountId": {
                          "nullable": false,
                          "title": "String",
                          "type": "string"
                        },
                        "refresh_token": {
                          "nullable": true,
                          "title": "String",
                          "type": "string"
                        },
                        "scope": {
                          "nullable": true,
                          "title": "String",
                          "type": "string"
                        },
                        "session_state": {
                          "nullable": true,
                          "title": "String",
                          "type": "string"
                        },
                        "token_type": {
                          "nullable": true,
                          "title": "String",
                          "type": "string"
                        },
                        "type": {
                          "nullable": false,
                          "title": "String",
                          "type": "string"
                        },
                        "updatedAt": {
                          "$ref": "#/components/schemas/timestamp!"
                        },
                        "userId": {
                          "$ref": "#/components/schemas/uuid!"
                        }
                      },
                      "title": "Account",
                      "type": "object"
                    }
                  }
                }
              }
            },
            "description": "Responses for GET /api/rest/Account/{provider}/{providerAccountId}"
          }
        }
      },
      "post": {
        "summary": "update_Account_by_pk",
        "description": "***\nThe GraphQl query for this endpoint is:\n``` graphql\nmutation update_Account_by_pk($provider: String!, $providerAccountId: String!, $object: Account_set_input!) {\n  update_Account_by_pk(\n    pk_columns: {provider: $provider, providerAccountId: $providerAccountId}\n    _set: $object\n  ) {\n    access_token\n    createdAt\n    expires_at\n    id_token\n    provider\n    providerAccountId\n    refresh_token\n    scope\n    session_state\n    token_type\n    type\n    updatedAt\n    userId\n  }\n}\n\n```",
        "parameters": [
          {
            "description": "Your x-hasura-admin-secret will be used for authentication of the API request.",
            "in": "header",
            "name": "x-hasura-admin-secret",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "_\"provider\" is required (enter it either in parameters or request body)_",
            "in": "path",
            "name": "provider",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "_\"providerAccountId\" is required (enter it either in parameters or request body)_",
            "in": "path",
            "name": "providerAccountId",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "object": {
                    "$ref": "#/components/schemas/Account_set_input!"
                  },
                  "provider": {
                    "nullable": false,
                    "title": "String",
                    "type": "string"
                  },
                  "providerAccountId": {
                    "nullable": false,
                    "title": "String",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Query parameters can also be provided in the request body as a JSON object",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "update_Account_by_pk": {
                      "description": "columns and relationships of \"Account\"",
                      "nullable": true,
                      "properties": {
                        "access_token": {
                          "nullable": true,
                          "title": "String",
                          "type": "string"
                        },
                        "createdAt": {
                          "$ref": "#/components/schemas/timestamp!"
                        },
                        "expires_at": {
                          "nullable": true,
                          "title": "Int",
                          "type": "integer"
                        },
                        "id_token": {
                          "nullable": true,
                          "title": "String",
                          "type": "string"
                        },
                        "provider": {
                          "nullable": false,
                          "title": "String",
                          "type": "string"
                        },
                        "providerAccountId": {
                          "nullable": false,
                          "title": "String",
                          "type": "string"
                        },
                        "refresh_token": {
                          "nullable": true,
                          "title": "String",
                          "type": "string"
                        },
                        "scope": {
                          "nullable": true,
                          "title": "String",
                          "type": "string"
                        },
                        "session_state": {
                          "nullable": true,
                          "title": "String",
                          "type": "string"
                        },
                        "token_type": {
                          "nullable": true,
                          "title": "String",
                          "type": "string"
                        },
                        "type": {
                          "nullable": false,
                          "title": "String",
                          "type": "string"
                        },
                        "updatedAt": {
                          "$ref": "#/components/schemas/timestamp!"
                        },
                        "userId": {
                          "$ref": "#/components/schemas/uuid!"
                        }
                      },
                      "title": "Account",
                      "type": "object"
                    }
                  }
                }
              }
            },
            "description": "Responses for POST /api/rest/Account/{provider}/{providerAccountId}"
          }
        }
      },
      "delete": {
        "summary": "delete_Account_by_pk",
        "description": "***\nThe GraphQl query for this endpoint is:\n``` graphql\nmutation delete_Account_by_pk($provider: String!, $providerAccountId: String!) {\n  delete_Account_by_pk(provider: $provider, providerAccountId: $providerAccountId) {\n    access_token\n    createdAt\n    expires_at\n    id_token\n    provider\n    providerAccountId\n    refresh_token\n    scope\n    session_state\n    token_type\n    type\n    updatedAt\n    userId\n  }\n}\n\n```",
        "parameters": [
          {
            "description": "Your x-hasura-admin-secret will be used for authentication of the API request.",
            "in": "header",
            "name": "x-hasura-admin-secret",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "_\"provider\" is required (enter it either in parameters or request body)_",
            "in": "path",
            "name": "provider",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "_\"providerAccountId\" is required (enter it either in parameters or request body)_",
            "in": "path",
            "name": "providerAccountId",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "provider": {
                    "nullable": false,
                    "title": "String",
                    "type": "string"
                  },
                  "providerAccountId": {
                    "nullable": false,
                    "title": "String",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Query parameters can also be provided in the request body as a JSON object",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "delete_Account_by_pk": {
                      "description": "columns and relationships of \"Account\"",
                      "nullable": true,
                      "properties": {
                        "access_token": {
                          "nullable": true,
                          "title": "String",
                          "type": "string"
                        },
                        "createdAt": {
                          "$ref": "#/components/schemas/timestamp!"
                        },
                        "expires_at": {
                          "nullable": true,
                          "title": "Int",
                          "type": "integer"
                        },
                        "id_token": {
                          "nullable": true,
                          "title": "String",
                          "type": "string"
                        },
                        "provider": {
                          "nullable": false,
                          "title": "String",
                          "type": "string"
                        },
                        "providerAccountId": {
                          "nullable": false,
                          "title": "String",
                          "type": "string"
                        },
                        "refresh_token": {
                          "nullable": true,
                          "title": "String",
                          "type": "string"
                        },
                        "scope": {
                          "nullable": true,
                          "title": "String",
                          "type": "string"
                        },
                        "session_state": {
                          "nullable": true,
                          "title": "String",
                          "type": "string"
                        },
                        "token_type": {
                          "nullable": true,
                          "title": "String",
                          "type": "string"
                        },
                        "type": {
                          "nullable": false,
                          "title": "String",
                          "type": "string"
                        },
                        "updatedAt": {
                          "$ref": "#/components/schemas/timestamp!"
                        },
                        "userId": {
                          "$ref": "#/components/schemas/uuid!"
                        }
                      },
                      "title": "Account",
                      "type": "object"
                    }
                  }
                }
              }
            },
            "description": "Responses for DELETE /api/rest/Account/{provider}/{providerAccountId}"
          }
        }
      }
    },
    "/api/rest/UserRole": {
      "get": {
        "summary": "UserRole",
        "description": "***\nThe GraphQl query for this endpoint is:\n``` graphql\nquery UserRole {\n  UserRole {\n    roleId\n    userId\n  }\n}\n\n```",
        "parameters": [
          {
            "description": "Your x-hasura-admin-secret will be used for authentication of the API request.",
            "in": "header",
            "name": "x-hasura-admin-secret",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "UserRole": {
                      "items": {
                        "description": "columns and relationships of \"UserRole\"",
                        "nullable": false,
                        "properties": {
                          "roleId": {
                            "$ref": "#/components/schemas/uuid!"
                          },
                          "userId": {
                            "$ref": "#/components/schemas/uuid!"
                          }
                        },
                        "title": "UserRole",
                        "type": "object"
                      },
                      "nullable": false,
                      "type": "array"
                    }
                  }
                }
              }
            },
            "description": "Responses for GET /api/rest/UserRole"
          }
        }
      },
      "post": {
        "summary": "insert_UserRole_one",
        "description": "***\nThe GraphQl query for this endpoint is:\n``` graphql\nmutation insert_UserRole_one($object: UserRole_insert_input!) {\n  insert_UserRole_one(object: $object) {\n    roleId\n    userId\n  }\n}\n\n```",
        "parameters": [
          {
            "description": "Your x-hasura-admin-secret will be used for authentication of the API request.",
            "in": "header",
            "name": "x-hasura-admin-secret",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "object": {
                    "$ref": "#/components/schemas/UserRole_insert_input!"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Query parameters can also be provided in the request body as a JSON object",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "insert_UserRole_one": {
                      "description": "columns and relationships of \"UserRole\"",
                      "nullable": true,
                      "properties": {
                        "roleId": {
                          "$ref": "#/components/schemas/uuid!"
                        },
                        "userId": {
                          "$ref": "#/components/schemas/uuid!"
                        }
                      },
                      "title": "UserRole",
                      "type": "object"
                    }
                  }
                }
              }
            },
            "description": "Responses for POST /api/rest/UserRole"
          }
        }
      }
    },
    "/api/rest/UserRole/{roleId}/{userId}": {
      "get": {
        "summary": "UserRole_by_pk",
        "description": "***\nThe GraphQl query for this endpoint is:\n``` graphql\nquery UserRole_by_pk($roleId: uuid!, $userId: uuid!) {\n  UserRole_by_pk(roleId: $roleId, userId: $userId) {\n    roleId\n    userId\n  }\n}\n\n```",
        "parameters": [
          {
            "description": "Your x-hasura-admin-secret will be used for authentication of the API request.",
            "in": "header",
            "name": "x-hasura-admin-secret",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "_\"roleId\" is required (enter it either in parameters or request body)_",
            "in": "path",
            "name": "roleId",
            "schema": {
              "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}",
              "type": "string"
            }
          },
          {
            "description": "_\"userId\" is required (enter it either in parameters or request body)_",
            "in": "path",
            "name": "userId",
            "schema": {
              "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "roleId": {
                    "$ref": "#/components/schemas/uuid!"
                  },
                  "userId": {
                    "$ref": "#/components/schemas/uuid!"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Query parameters can also be provided in the request body as a JSON object",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "UserRole_by_pk": {
                      "description": "columns and relationships of \"UserRole\"",
                      "nullable": true,
                      "properties": {
                        "roleId": {
                          "$ref": "#/components/schemas/uuid!"
                        },
                        "userId": {
                          "$ref": "#/components/schemas/uuid!"
                        }
                      },
                      "title": "UserRole",
                      "type": "object"
                    }
                  }
                }
              }
            },
            "description": "Responses for GET /api/rest/UserRole/{roleId}/{userId}"
          }
        }
      },
      "post": {
        "summary": "update_UserRole_by_pk",
        "description": "***\nThe GraphQl query for this endpoint is:\n``` graphql\nmutation update_UserRole_by_pk($roleId: uuid!, $userId: uuid!, $object: UserRole_set_input!) {\n  update_UserRole_by_pk(\n    pk_columns: {roleId: $roleId, userId: $userId}\n    _set: $object\n  ) {\n    roleId\n    userId\n  }\n}\n\n```",
        "parameters": [
          {
            "description": "Your x-hasura-admin-secret will be used for authentication of the API request.",
            "in": "header",
            "name": "x-hasura-admin-secret",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "_\"roleId\" is required (enter it either in parameters or request body)_",
            "in": "path",
            "name": "roleId",
            "schema": {
              "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}",
              "type": "string"
            }
          },
          {
            "description": "_\"userId\" is required (enter it either in parameters or request body)_",
            "in": "path",
            "name": "userId",
            "schema": {
              "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "object": {
                    "$ref": "#/components/schemas/UserRole_set_input!"
                  },
                  "roleId": {
                    "$ref": "#/components/schemas/uuid!"
                  },
                  "userId": {
                    "$ref": "#/components/schemas/uuid!"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Query parameters can also be provided in the request body as a JSON object",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "update_UserRole_by_pk": {
                      "description": "columns and relationships of \"UserRole\"",
                      "nullable": true,
                      "properties": {
                        "roleId": {
                          "$ref": "#/components/schemas/uuid!"
                        },
                        "userId": {
                          "$ref": "#/components/schemas/uuid!"
                        }
                      },
                      "title": "UserRole",
                      "type": "object"
                    }
                  }
                }
              }
            },
            "description": "Responses for POST /api/rest/UserRole/{roleId}/{userId}"
          }
        }
      },
      "delete": {
        "summary": "delete_UserRole_by_pk",
        "description": "***\nThe GraphQl query for this endpoint is:\n``` graphql\nmutation delete_UserRole_by_pk($roleId: uuid!, $userId: uuid!) {\n  delete_UserRole_by_pk(roleId: $roleId, userId: $userId) {\n    roleId\n    userId\n  }\n}\n\n```",
        "parameters": [
          {
            "description": "Your x-hasura-admin-secret will be used for authentication of the API request.",
            "in": "header",
            "name": "x-hasura-admin-secret",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "_\"roleId\" is required (enter it either in parameters or request body)_",
            "in": "path",
            "name": "roleId",
            "schema": {
              "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}",
              "type": "string"
            }
          },
          {
            "description": "_\"userId\" is required (enter it either in parameters or request body)_",
            "in": "path",
            "name": "userId",
            "schema": {
              "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "roleId": {
                    "$ref": "#/components/schemas/uuid!"
                  },
                  "userId": {
                    "$ref": "#/components/schemas/uuid!"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Query parameters can also be provided in the request body as a JSON object",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "delete_UserRole_by_pk": {
                      "description": "columns and relationships of \"UserRole\"",
                      "nullable": true,
                      "properties": {
                        "roleId": {
                          "$ref": "#/components/schemas/uuid!"
                        },
                        "userId": {
                          "$ref": "#/components/schemas/uuid!"
                        }
                      },
                      "title": "UserRole",
                      "type": "object"
                    }
                  }
                }
              }
            },
            "description": "Responses for DELETE /api/rest/UserRole/{roleId}/{userId}"
          }
        }
      }
    },
    "/api/rest/Authenticator": {
      "get": {
        "summary": "Authenticator",
        "description": "***\nThe GraphQl query for this endpoint is:\n``` graphql\nquery Authenticator {\n  Authenticator {\n    counter\n    credentialBackedUp\n    credentialDeviceType\n    credentialID\n    credentialPublicKey\n    providerAccountId\n    transports\n    userId\n  }\n}\n\n```",
        "parameters": [
          {
            "description": "Your x-hasura-admin-secret will be used for authentication of the API request.",
            "in": "header",
            "name": "x-hasura-admin-secret",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "Authenticator": {
                      "items": {
                        "description": "columns and relationships of \"Authenticator\"",
                        "nullable": false,
                        "properties": {
                          "counter": {
                            "nullable": false,
                            "title": "Int",
                            "type": "integer"
                          },
                          "credentialBackedUp": {
                            "nullable": false,
                            "title": "Boolean",
                            "type": "boolean"
                          },
                          "credentialDeviceType": {
                            "nullable": false,
                            "title": "String",
                            "type": "string"
                          },
                          "credentialID": {
                            "nullable": false,
                            "title": "String",
                            "type": "string"
                          },
                          "credentialPublicKey": {
                            "nullable": false,
                            "title": "String",
                            "type": "string"
                          },
                          "providerAccountId": {
                            "nullable": false,
                            "title": "String",
                            "type": "string"
                          },
                          "transports": {
                            "nullable": true,
                            "title": "String",
                            "type": "string"
                          },
                          "userId": {
                            "$ref": "#/components/schemas/uuid!"
                          }
                        },
                        "title": "Authenticator",
                        "type": "object"
                      },
                      "nullable": false,
                      "type": "array"
                    }
                  }
                }
              }
            },
            "description": "Responses for GET /api/rest/Authenticator"
          }
        }
      },
      "post": {
        "summary": "insert_Authenticator_one",
        "description": "***\nThe GraphQl query for this endpoint is:\n``` graphql\nmutation insert_Authenticator_one($object: Authenticator_insert_input!) {\n  insert_Authenticator_one(object: $object) {\n    counter\n    credentialBackedUp\n    credentialDeviceType\n    credentialID\n    credentialPublicKey\n    providerAccountId\n    transports\n    userId\n  }\n}\n\n```",
        "parameters": [
          {
            "description": "Your x-hasura-admin-secret will be used for authentication of the API request.",
            "in": "header",
            "name": "x-hasura-admin-secret",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "object": {
                    "$ref": "#/components/schemas/Authenticator_insert_input!"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Query parameters can also be provided in the request body as a JSON object",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "insert_Authenticator_one": {
                      "description": "columns and relationships of \"Authenticator\"",
                      "nullable": true,
                      "properties": {
                        "counter": {
                          "nullable": false,
                          "title": "Int",
                          "type": "integer"
                        },
                        "credentialBackedUp": {
                          "nullable": false,
                          "title": "Boolean",
                          "type": "boolean"
                        },
                        "credentialDeviceType": {
                          "nullable": false,
                          "title": "String",
                          "type": "string"
                        },
                        "credentialID": {
                          "nullable": false,
                          "title": "String",
                          "type": "string"
                        },
                        "credentialPublicKey": {
                          "nullable": false,
                          "title": "String",
                          "type": "string"
                        },
                        "providerAccountId": {
                          "nullable": false,
                          "title": "String",
                          "type": "string"
                        },
                        "transports": {
                          "nullable": true,
                          "title": "String",
                          "type": "string"
                        },
                        "userId": {
                          "$ref": "#/components/schemas/uuid!"
                        }
                      },
                      "title": "Authenticator",
                      "type": "object"
                    }
                  }
                }
              }
            },
            "description": "Responses for POST /api/rest/Authenticator"
          }
        }
      }
    },
    "/api/rest/Authenticator/{credentialID}/{userId}": {
      "get": {
        "summary": "Authenticator_by_pk",
        "description": "***\nThe GraphQl query for this endpoint is:\n``` graphql\nquery Authenticator_by_pk($credentialID: String!, $userId: uuid!) {\n  Authenticator_by_pk(credentialID: $credentialID, userId: $userId) {\n    counter\n    credentialBackedUp\n    credentialDeviceType\n    credentialID\n    credentialPublicKey\n    providerAccountId\n    transports\n    userId\n  }\n}\n\n```",
        "parameters": [
          {
            "description": "Your x-hasura-admin-secret will be used for authentication of the API request.",
            "in": "header",
            "name": "x-hasura-admin-secret",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "_\"credentialID\" is required (enter it either in parameters or request body)_",
            "in": "path",
            "name": "credentialID",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "_\"userId\" is required (enter it either in parameters or request body)_",
            "in": "path",
            "name": "userId",
            "schema": {
              "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "credentialID": {
                    "nullable": false,
                    "title": "String",
                    "type": "string"
                  },
                  "userId": {
                    "$ref": "#/components/schemas/uuid!"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Query parameters can also be provided in the request body as a JSON object",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "Authenticator_by_pk": {
                      "description": "columns and relationships of \"Authenticator\"",
                      "nullable": true,
                      "properties": {
                        "counter": {
                          "nullable": false,
                          "title": "Int",
                          "type": "integer"
                        },
                        "credentialBackedUp": {
                          "nullable": false,
                          "title": "Boolean",
                          "type": "boolean"
                        },
                        "credentialDeviceType": {
                          "nullable": false,
                          "title": "String",
                          "type": "string"
                        },
                        "credentialID": {
                          "nullable": false,
                          "title": "String",
                          "type": "string"
                        },
                        "credentialPublicKey": {
                          "nullable": false,
                          "title": "String",
                          "type": "string"
                        },
                        "providerAccountId": {
                          "nullable": false,
                          "title": "String",
                          "type": "string"
                        },
                        "transports": {
                          "nullable": true,
                          "title": "String",
                          "type": "string"
                        },
                        "userId": {
                          "$ref": "#/components/schemas/uuid!"
                        }
                      },
                      "title": "Authenticator",
                      "type": "object"
                    }
                  }
                }
              }
            },
            "description": "Responses for GET /api/rest/Authenticator/{credentialID}/{userId}"
          }
        }
      },
      "post": {
        "summary": "update_Authenticator_by_pk",
        "description": "***\nThe GraphQl query for this endpoint is:\n``` graphql\nmutation update_Authenticator_by_pk($credentialID: String!, $userId: uuid!, $object: Authenticator_set_input!) {\n  update_Authenticator_by_pk(\n    pk_columns: {credentialID: $credentialID, userId: $userId}\n    _set: $object\n  ) {\n    counter\n    credentialBackedUp\n    credentialDeviceType\n    credentialID\n    credentialPublicKey\n    providerAccountId\n    transports\n    userId\n  }\n}\n\n```",
        "parameters": [
          {
            "description": "Your x-hasura-admin-secret will be used for authentication of the API request.",
            "in": "header",
            "name": "x-hasura-admin-secret",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "_\"credentialID\" is required (enter it either in parameters or request body)_",
            "in": "path",
            "name": "credentialID",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "_\"userId\" is required (enter it either in parameters or request body)_",
            "in": "path",
            "name": "userId",
            "schema": {
              "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "credentialID": {
                    "nullable": false,
                    "title": "String",
                    "type": "string"
                  },
                  "object": {
                    "$ref": "#/components/schemas/Authenticator_set_input!"
                  },
                  "userId": {
                    "$ref": "#/components/schemas/uuid!"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Query parameters can also be provided in the request body as a JSON object",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "update_Authenticator_by_pk": {
                      "description": "columns and relationships of \"Authenticator\"",
                      "nullable": true,
                      "properties": {
                        "counter": {
                          "nullable": false,
                          "title": "Int",
                          "type": "integer"
                        },
                        "credentialBackedUp": {
                          "nullable": false,
                          "title": "Boolean",
                          "type": "boolean"
                        },
                        "credentialDeviceType": {
                          "nullable": false,
                          "title": "String",
                          "type": "string"
                        },
                        "credentialID": {
                          "nullable": false,
                          "title": "String",
                          "type": "string"
                        },
                        "credentialPublicKey": {
                          "nullable": false,
                          "title": "String",
                          "type": "string"
                        },
                        "providerAccountId": {
                          "nullable": false,
                          "title": "String",
                          "type": "string"
                        },
                        "transports": {
                          "nullable": true,
                          "title": "String",
                          "type": "string"
                        },
                        "userId": {
                          "$ref": "#/components/schemas/uuid!"
                        }
                      },
                      "title": "Authenticator",
                      "type": "object"
                    }
                  }
                }
              }
            },
            "description": "Responses for POST /api/rest/Authenticator/{credentialID}/{userId}"
          }
        }
      },
      "delete": {
        "summary": "delete_Authenticator_by_pk",
        "description": "***\nThe GraphQl query for this endpoint is:\n``` graphql\nmutation delete_Authenticator_by_pk($credentialID: String!, $userId: uuid!) {\n  delete_Authenticator_by_pk(credentialID: $credentialID, userId: $userId) {\n    counter\n    credentialBackedUp\n    credentialDeviceType\n    credentialID\n    credentialPublicKey\n    providerAccountId\n    transports\n    userId\n  }\n}\n\n```",
        "parameters": [
          {
            "description": "Your x-hasura-admin-secret will be used for authentication of the API request.",
            "in": "header",
            "name": "x-hasura-admin-secret",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "_\"credentialID\" is required (enter it either in parameters or request body)_",
            "in": "path",
            "name": "credentialID",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "_\"userId\" is required (enter it either in parameters or request body)_",
            "in": "path",
            "name": "userId",
            "schema": {
              "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "credentialID": {
                    "nullable": false,
                    "title": "String",
                    "type": "string"
                  },
                  "userId": {
                    "$ref": "#/components/schemas/uuid!"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Query parameters can also be provided in the request body as a JSON object",
          "required": false
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "delete_Authenticator_by_pk": {
                      "description": "columns and relationships of \"Authenticator\"",
                      "nullable": true,
                      "properties": {
                        "counter": {
                          "nullable": false,
                          "title": "Int",
                          "type": "integer"
                        },
                        "credentialBackedUp": {
                          "nullable": false,
                          "title": "Boolean",
                          "type": "boolean"
                        },
                        "credentialDeviceType": {
                          "nullable": false,
                          "title": "String",
                          "type": "string"
                        },
                        "credentialID": {
                          "nullable": false,
                          "title": "String",
                          "type": "string"
                        },
                        "credentialPublicKey": {
                          "nullable": false,
                          "title": "String",
                          "type": "string"
                        },
                        "providerAccountId": {
                          "nullable": false,
                          "title": "String",
                          "type": "string"
                        },
                        "transports": {
                          "nullable": true,
                          "title": "String",
                          "type": "string"
                        },
                        "userId": {
                          "$ref": "#/components/schemas/uuid!"
                        }
                      },
                      "title": "Authenticator",
                      "type": "object"
                    }
                  }
                }
              }
            },
            "description": "Responses for DELETE /api/rest/Authenticator/{credentialID}/{userId}"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "uuid!": {
        "nullable": false,
        "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}",
        "title": "uuid",
        "type": "string"
      },
      "timestamp!": {
        "nullable": false,
        "title": "timestamp"
      },
      "timestamp": {
        "nullable": true,
        "title": "timestamp"
      },
      "jsonb": {
        "nullable": true,
        "title": "jsonb"
      },
      "uuid": {
        "nullable": true,
        "pattern": "[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}",
        "title": "uuid",
        "type": "string"
      },
      "projects_tasks_update_column!": {
        "description": "update columns of table \"projects_tasks\"",
        "enum": [
          "created_at",
          "date",
          "id",
          "project_id",
          "task_description",
          "updated_at"
        ],
        "nullable": false,
        "title": "projects_tasks_update_column"
      },
      "uuid_comparison_exp": {
        "description": "Boolean expression to compare columns of type \"uuid\". All fields are combined with logical 'AND'.",
        "nullable": true,
        "properties": {
          "_eq": {
            "$ref": "#/components/schemas/uuid"
          },
          "_gt": {
            "$ref": "#/components/schemas/uuid"
          },
          "_gte": {
            "$ref": "#/components/schemas/uuid"
          },
          "_in": {
            "items": {
              "$ref": "#/components/schemas/uuid!"
            },
            "nullable": true,
            "type": "array"
          },
          "_is_null": {
            "nullable": true,
            "title": "Boolean",
            "type": "boolean"
          },
          "_lt": {
            "$ref": "#/components/schemas/uuid"
          },
          "_lte": {
            "$ref": "#/components/schemas/uuid"
          },
          "_neq": {
            "$ref": "#/components/schemas/uuid"
          },
          "_nin": {
            "items": {
              "$ref": "#/components/schemas/uuid!"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "title": "uuid_comparison_exp",
        "type": "object"
      },
      "timestamp_comparison_exp": {
        "description": "Boolean expression to compare columns of type \"timestamp\". All fields are combined with logical 'AND'.",
        "nullable": true,
        "properties": {
          "_eq": {
            "$ref": "#/components/schemas/timestamp"
          },
          "_gt": {
            "$ref": "#/components/schemas/timestamp"
          },
          "_gte": {
            "$ref": "#/components/schemas/timestamp"
          },
          "_in": {
            "items": {
              "$ref": "#/components/schemas/timestamp!"
            },
            "nullable": true,
            "type": "array"
          },
          "_is_null": {
            "nullable": true,
            "title": "Boolean",
            "type": "boolean"
          },
          "_lt": {
            "$ref": "#/components/schemas/timestamp"
          },
          "_lte": {
            "$ref": "#/components/schemas/timestamp"
          },
          "_neq": {
            "$ref": "#/components/schemas/timestamp"
          },
          "_nin": {
            "items": {
              "$ref": "#/components/schemas/timestamp!"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "title": "timestamp_comparison_exp",
        "type": "object"
      },
      "jsonb!": {
        "nullable": false,
        "title": "jsonb"
      },
      "String_comparison_exp": {
        "description": "Boolean expression to compare columns of type \"String\". All fields are combined with logical 'AND'.",
        "nullable": true,
        "properties": {
          "_eq": {
            "nullable": true,
            "title": "String",
            "type": "string"
          },
          "_gt": {
            "nullable": true,
            "title": "String",
            "type": "string"
          },
          "_gte": {
            "nullable": true,
            "title": "String",
            "type": "string"
          },
          "_ilike": {
            "nullable": true,
            "title": "String",
            "type": "string"
          },
          "_in": {
            "items": {
              "nullable": false,
              "title": "String",
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "_iregex": {
            "nullable": true,
            "title": "String",
            "type": "string"
          },
          "_is_null": {
            "nullable": true,
            "title": "Boolean",
            "type": "boolean"
          },
          "_like": {
            "nullable": true,
            "title": "String",
            "type": "string"
          },
          "_lt": {
            "nullable": true,
            "title": "String",
            "type": "string"
          },
          "_lte": {
            "nullable": true,
            "title": "String",
            "type": "string"
          },
          "_neq": {
            "nullable": true,
            "title": "String",
            "type": "string"
          },
          "_nilike": {
            "nullable": true,
            "title": "String",
            "type": "string"
          },
          "_nin": {
            "items": {
              "nullable": false,
              "title": "String",
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "_niregex": {
            "nullable": true,
            "title": "String",
            "type": "string"
          },
          "_nlike": {
            "nullable": true,
            "title": "String",
            "type": "string"
          },
          "_nregex": {
            "nullable": true,
            "title": "String",
            "type": "string"
          },
          "_nsimilar": {
            "nullable": true,
            "title": "String",
            "type": "string"
          },
          "_regex": {
            "nullable": true,
            "title": "String",
            "type": "string"
          },
          "_similar": {
            "nullable": true,
            "title": "String",
            "type": "string"
          }
        },
        "title": "String_comparison_exp",
        "type": "object"
      },
      "jsonb_cast_exp": {
        "nullable": true,
        "properties": {
          "String": {
            "$ref": "#/components/schemas/String_comparison_exp"
          }
        },
        "title": "jsonb_cast_exp",
        "type": "object"
      },
      "jsonb_comparison_exp": {
        "description": "Boolean expression to compare columns of type \"jsonb\". All fields are combined with logical 'AND'.",
        "nullable": true,
        "properties": {
          "_cast": {
            "$ref": "#/components/schemas/jsonb_cast_exp"
          },
          "_contained_in": {
            "$ref": "#/components/schemas/jsonb"
          },
          "_contains": {
            "$ref": "#/components/schemas/jsonb"
          },
          "_eq": {
            "$ref": "#/components/schemas/jsonb"
          },
          "_gt": {
            "$ref": "#/components/schemas/jsonb"
          },
          "_gte": {
            "$ref": "#/components/schemas/jsonb"
          },
          "_has_key": {
            "nullable": true,
            "title": "String",
            "type": "string"
          },
          "_has_keys_all": {
            "items": {
              "nullable": false,
              "title": "String",
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "_has_keys_any": {
            "items": {
              "nullable": false,
              "title": "String",
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          },
          "_in": {
            "items": {
              "$ref": "#/components/schemas/jsonb!"
            },
            "nullable": true,
            "type": "array"
          },
          "_is_null": {
            "nullable": true,
            "title": "Boolean",
            "type": "boolean"
          },
          "_lt": {
            "$ref": "#/components/schemas/jsonb"
          },
          "_lte": {
            "$ref": "#/components/schemas/jsonb"
          },
          "_neq": {
            "$ref": "#/components/schemas/jsonb"
          },
          "_nin": {
            "items": {
              "$ref": "#/components/schemas/jsonb!"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "title": "jsonb_comparison_exp",
        "type": "object"
      },
      "clients_bool_exp!": {
        "description": "Boolean expression to filter rows from the table \"clients\". All fields are combined with a logical 'AND'.",
        "nullable": false,
        "properties": {
          "_and": {
            "items": {
              "$ref": "#/components/schemas/clients_bool_exp!"
            },
            "nullable": true,
            "type": "array"
          },
          "_not": {
            "$ref": "#/components/schemas/clients_bool_exp"
          },
          "_or": {
            "items": {
              "$ref": "#/components/schemas/clients_bool_exp!"
            },
            "nullable": true,
            "type": "array"
          },
          "created_at": {
            "$ref": "#/components/schemas/timestamp_comparison_exp"
          },
          "email": {
            "$ref": "#/components/schemas/String_comparison_exp"
          },
          "id": {
            "$ref": "#/components/schemas/uuid_comparison_exp"
          },
          "name": {
            "$ref": "#/components/schemas/String_comparison_exp"
          },
          "phone": {
            "$ref": "#/components/schemas/String_comparison_exp"
          },
          "timesheets": {
            "$ref": "#/components/schemas/timesheets_bool_exp"
          },
          "timesheets_aggregate": {
            "$ref": "#/components/schemas/timesheets_aggregate_bool_exp"
          },
          "updated_at": {
            "$ref": "#/components/schemas/timestamp_comparison_exp"
          }
        },
        "title": "clients_bool_exp",
        "type": "object"
      },
      "clients_bool_exp": {
        "description": "Boolean expression to filter rows from the table \"clients\". All fields are combined with a logical 'AND'.",
        "nullable": true,
        "properties": {
          "_and": {
            "items": {
              "$ref": "#/components/schemas/clients_bool_exp!"
            },
            "nullable": true,
            "type": "array"
          },
          "_not": {
            "$ref": "#/components/schemas/clients_bool_exp"
          },
          "_or": {
            "items": {
              "$ref": "#/components/schemas/clients_bool_exp!"
            },
            "nullable": true,
            "type": "array"
          },
          "created_at": {
            "$ref": "#/components/schemas/timestamp_comparison_exp"
          },
          "email": {
            "$ref": "#/components/schemas/String_comparison_exp"
          },
          "id": {
            "$ref": "#/components/schemas/uuid_comparison_exp"
          },
          "name": {
            "$ref": "#/components/schemas/String_comparison_exp"
          },
          "phone": {
            "$ref": "#/components/schemas/String_comparison_exp"
          },
          "timesheets": {
            "$ref": "#/components/schemas/timesheets_bool_exp"
          },
          "timesheets_aggregate": {
            "$ref": "#/components/schemas/timesheets_aggregate_bool_exp"
          },
          "updated_at": {
            "$ref": "#/components/schemas/timestamp_comparison_exp"
          }
        },
        "title": "clients_bool_exp",
        "type": "object"
      },
      "numeric!": {
        "nullable": false,
        "title": "numeric"
      },
      "numeric": {
        "nullable": true,
        "title": "numeric"
      },
      "numeric_comparison_exp": {
        "description": "Boolean expression to compare columns of type \"numeric\". All fields are combined with logical 'AND'.",
        "nullable": true,
        "properties": {
          "_eq": {
            "$ref": "#/components/schemas/numeric"
          },
          "_gt": {
            "$ref": "#/components/schemas/numeric"
          },
          "_gte": {
            "$ref": "#/components/schemas/numeric"
          },
          "_in": {
            "items": {
              "$ref": "#/components/schemas/numeric!"
            },
            "nullable": true,
            "type": "array"
          },
          "_is_null": {
            "nullable": true,
            "title": "Boolean",
            "type": "boolean"
          },
          "_lt": {
            "$ref": "#/components/schemas/numeric"
          },
          "_lte": {
            "$ref": "#/components/schemas/numeric"
          },
          "_neq": {
            "$ref": "#/components/schemas/numeric"
          },
          "_nin": {
            "items": {
              "$ref": "#/components/schemas/numeric!"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "title": "numeric_comparison_exp",
        "type": "object"
      },
      "freelances_bool_exp!": {
        "description": "Boolean expression to filter rows from the table \"freelances\". All fields are combined with a logical 'AND'.",
        "nullable": false,
        "properties": {
          "_and": {
            "items": {
              "$ref": "#/components/schemas/freelances_bool_exp!"
            },
            "nullable": true,
            "type": "array"
          },
          "_not": {
            "$ref": "#/components/schemas/freelances_bool_exp"
          },
          "_or": {
            "items": {
              "$ref": "#/components/schemas/freelances_bool_exp!"
            },
            "nullable": true,
            "type": "array"
          },
          "created_at": {
            "$ref": "#/components/schemas/timestamp_comparison_exp"
          },
          "daily_rate": {
            "$ref": "#/components/schemas/numeric_comparison_exp"
          },
          "email": {
            "$ref": "#/components/schemas/String_comparison_exp"
          },
          "id": {
            "$ref": "#/components/schemas/uuid_comparison_exp"
          },
          "timesheets": {
            "$ref": "#/components/schemas/timesheets_bool_exp"
          },
          "timesheets_aggregate": {
            "$ref": "#/components/schemas/timesheets_aggregate_bool_exp"
          },
          "updated_at": {
            "$ref": "#/components/schemas/timestamp_comparison_exp"
          }
        },
        "title": "freelances_bool_exp",
        "type": "object"
      },
      "freelances_bool_exp": {
        "description": "Boolean expression to filter rows from the table \"freelances\". All fields are combined with a logical 'AND'.",
        "nullable": true,
        "properties": {
          "_and": {
            "items": {
              "$ref": "#/components/schemas/freelances_bool_exp!"
            },
            "nullable": true,
            "type": "array"
          },
          "_not": {
            "$ref": "#/components/schemas/freelances_bool_exp"
          },
          "_or": {
            "items": {
              "$ref": "#/components/schemas/freelances_bool_exp!"
            },
            "nullable": true,
            "type": "array"
          },
          "created_at": {
            "$ref": "#/components/schemas/timestamp_comparison_exp"
          },
          "daily_rate": {
            "$ref": "#/components/schemas/numeric_comparison_exp"
          },
          "email": {
            "$ref": "#/components/schemas/String_comparison_exp"
          },
          "id": {
            "$ref": "#/components/schemas/uuid_comparison_exp"
          },
          "timesheets": {
            "$ref": "#/components/schemas/timesheets_bool_exp"
          },
          "timesheets_aggregate": {
            "$ref": "#/components/schemas/timesheets_aggregate_bool_exp"
          },
          "updated_at": {
            "$ref": "#/components/schemas/timestamp_comparison_exp"
          }
        },
        "title": "freelances_bool_exp",
        "type": "object"
      },
      "timesheets_bool_exp!": {
        "description": "Boolean expression to filter rows from the table \"timesheets\". All fields are combined with a logical 'AND'.",
        "nullable": false,
        "properties": {
          "_and": {
            "items": {
              "$ref": "#/components/schemas/timesheets_bool_exp!"
            },
            "nullable": true,
            "type": "array"
          },
          "_not": {
            "$ref": "#/components/schemas/timesheets_bool_exp"
          },
          "_or": {
            "items": {
              "$ref": "#/components/schemas/timesheets_bool_exp!"
            },
            "nullable": true,
            "type": "array"
          },
          "client": {
            "$ref": "#/components/schemas/clients_bool_exp"
          },
          "client_id": {
            "$ref": "#/components/schemas/uuid_comparison_exp"
          },
          "created_at": {
            "$ref": "#/components/schemas/timestamp_comparison_exp"
          },
          "freelance": {
            "$ref": "#/components/schemas/freelances_bool_exp"
          },
          "freelance_id": {
            "$ref": "#/components/schemas/uuid_comparison_exp"
          },
          "id": {
            "$ref": "#/components/schemas/uuid_comparison_exp"
          },
          "project_task_id": {
            "$ref": "#/components/schemas/uuid_comparison_exp"
          },
          "projects_task": {
            "$ref": "#/components/schemas/projects_tasks_bool_exp"
          },
          "updated_at": {
            "$ref": "#/components/schemas/timestamp_comparison_exp"
          },
          "working_date": {
            "$ref": "#/components/schemas/String_comparison_exp"
          },
          "working_durations": {
            "$ref": "#/components/schemas/jsonb_comparison_exp"
          }
        },
        "title": "timesheets_bool_exp",
        "type": "object"
      },
      "timesheets_bool_exp": {
        "description": "Boolean expression to filter rows from the table \"timesheets\". All fields are combined with a logical 'AND'.",
        "nullable": true,
        "properties": {
          "_and": {
            "items": {
              "$ref": "#/components/schemas/timesheets_bool_exp!"
            },
            "nullable": true,
            "type": "array"
          },
          "_not": {
            "$ref": "#/components/schemas/timesheets_bool_exp"
          },
          "_or": {
            "items": {
              "$ref": "#/components/schemas/timesheets_bool_exp!"
            },
            "nullable": true,
            "type": "array"
          },
          "client": {
            "$ref": "#/components/schemas/clients_bool_exp"
          },
          "client_id": {
            "$ref": "#/components/schemas/uuid_comparison_exp"
          },
          "created_at": {
            "$ref": "#/components/schemas/timestamp_comparison_exp"
          },
          "freelance": {
            "$ref": "#/components/schemas/freelances_bool_exp"
          },
          "freelance_id": {
            "$ref": "#/components/schemas/uuid_comparison_exp"
          },
          "id": {
            "$ref": "#/components/schemas/uuid_comparison_exp"
          },
          "project_task_id": {
            "$ref": "#/components/schemas/uuid_comparison_exp"
          },
          "projects_task": {
            "$ref": "#/components/schemas/projects_tasks_bool_exp"
          },
          "updated_at": {
            "$ref": "#/components/schemas/timestamp_comparison_exp"
          },
          "working_date": {
            "$ref": "#/components/schemas/String_comparison_exp"
          },
          "working_durations": {
            "$ref": "#/components/schemas/jsonb_comparison_exp"
          }
        },
        "title": "timesheets_bool_exp",
        "type": "object"
      },
      "timesheets_select_column!": {
        "description": "select columns of table \"timesheets\"",
        "enum": [
          "client_id",
          "created_at",
          "freelance_id",
          "id",
          "project_task_id",
          "updated_at",
          "working_date",
          "working_durations"
        ],
        "nullable": false,
        "title": "timesheets_select_column"
      },
      "Int_comparison_exp!": {
        "description": "Boolean expression to compare columns of type \"Int\". All fields are combined with logical 'AND'.",
        "nullable": false,
        "properties": {
          "_eq": {
            "nullable": true,
            "title": "Int",
            "type": "integer"
          },
          "_gt": {
            "nullable": true,
            "title": "Int",
            "type": "integer"
          },
          "_gte": {
            "nullable": true,
            "title": "Int",
            "type": "integer"
          },
          "_in": {
            "items": {
              "nullable": false,
              "title": "Int",
              "type": "integer"
            },
            "nullable": true,
            "type": "array"
          },
          "_is_null": {
            "nullable": true,
            "title": "Boolean",
            "type": "boolean"
          },
          "_lt": {
            "nullable": true,
            "title": "Int",
            "type": "integer"
          },
          "_lte": {
            "nullable": true,
            "title": "Int",
            "type": "integer"
          },
          "_neq": {
            "nullable": true,
            "title": "Int",
            "type": "integer"
          },
          "_nin": {
            "items": {
              "nullable": false,
              "title": "Int",
              "type": "integer"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "title": "Int_comparison_exp",
        "type": "object"
      },
      "timesheets_aggregate_bool_exp_count": {
        "nullable": true,
        "properties": {
          "arguments": {
            "items": {
              "$ref": "#/components/schemas/timesheets_select_column!"
            },
            "nullable": true,
            "type": "array"
          },
          "distinct": {
            "nullable": true,
            "title": "Boolean",
            "type": "boolean"
          },
          "filter": {
            "$ref": "#/components/schemas/timesheets_bool_exp"
          },
          "predicate": {
            "$ref": "#/components/schemas/Int_comparison_exp!"
          }
        },
        "title": "timesheets_aggregate_bool_exp_count",
        "type": "object"
      },
      "timesheets_aggregate_bool_exp": {
        "nullable": true,
        "properties": {
          "count": {
            "$ref": "#/components/schemas/timesheets_aggregate_bool_exp_count"
          }
        },
        "title": "timesheets_aggregate_bool_exp",
        "type": "object"
      },
      "projects_tasks_select_column!": {
        "description": "select columns of table \"projects_tasks\"",
        "enum": [
          "created_at",
          "date",
          "id",
          "project_id",
          "task_description",
          "updated_at"
        ],
        "nullable": false,
        "title": "projects_tasks_select_column"
      },
      "projects_tasks_aggregate_bool_exp_count": {
        "nullable": true,
        "properties": {
          "arguments": {
            "items": {
              "$ref": "#/components/schemas/projects_tasks_select_column!"
            },
            "nullable": true,
            "type": "array"
          },
          "distinct": {
            "nullable": true,
            "title": "Boolean",
            "type": "boolean"
          },
          "filter": {
            "$ref": "#/components/schemas/projects_tasks_bool_exp"
          },
          "predicate": {
            "$ref": "#/components/schemas/Int_comparison_exp!"
          }
        },
        "title": "projects_tasks_aggregate_bool_exp_count",
        "type": "object"
      },
      "projects_tasks_aggregate_bool_exp": {
        "nullable": true,
        "properties": {
          "count": {
            "$ref": "#/components/schemas/projects_tasks_aggregate_bool_exp_count"
          }
        },
        "title": "projects_tasks_aggregate_bool_exp",
        "type": "object"
      },
      "Boolean_comparison_exp": {
        "description": "Boolean expression to compare columns of type \"Boolean\". All fields are combined with logical 'AND'.",
        "nullable": true,
        "properties": {
          "_eq": {
            "nullable": true,
            "title": "Boolean",
            "type": "boolean"
          },
          "_gt": {
            "nullable": true,
            "title": "Boolean",
            "type": "boolean"
          },
          "_gte": {
            "nullable": true,
            "title": "Boolean",
            "type": "boolean"
          },
          "_in": {
            "items": {
              "nullable": false,
              "title": "Boolean",
              "type": "boolean"
            },
            "nullable": true,
            "type": "array"
          },
          "_is_null": {
            "nullable": true,
            "title": "Boolean",
            "type": "boolean"
          },
          "_lt": {
            "nullable": true,
            "title": "Boolean",
            "type": "boolean"
          },
          "_lte": {
            "nullable": true,
            "title": "Boolean",
            "type": "boolean"
          },
          "_neq": {
            "nullable": true,
            "title": "Boolean",
            "type": "boolean"
          },
          "_nin": {
            "items": {
              "nullable": false,
              "title": "Boolean",
              "type": "boolean"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "title": "Boolean_comparison_exp",
        "type": "object"
      },
      "projects_bool_exp!": {
        "description": "Boolean expression to filter rows from the table \"projects\". All fields are combined with a logical 'AND'.",
        "nullable": false,
        "properties": {
          "_and": {
            "items": {
              "$ref": "#/components/schemas/projects_bool_exp!"
            },
            "nullable": true,
            "type": "array"
          },
          "_not": {
            "$ref": "#/components/schemas/projects_bool_exp"
          },
          "_or": {
            "items": {
              "$ref": "#/components/schemas/projects_bool_exp!"
            },
            "nullable": true,
            "type": "array"
          },
          "created_at": {
            "$ref": "#/components/schemas/timestamp_comparison_exp"
          },
          "description": {
            "$ref": "#/components/schemas/String_comparison_exp"
          },
          "end_date": {
            "$ref": "#/components/schemas/timestamp_comparison_exp"
          },
          "id": {
            "$ref": "#/components/schemas/uuid_comparison_exp"
          },
          "is_active": {
            "$ref": "#/components/schemas/Boolean_comparison_exp"
          },
          "name": {
            "$ref": "#/components/schemas/String_comparison_exp"
          },
          "projects_tasks": {
            "$ref": "#/components/schemas/projects_tasks_bool_exp"
          },
          "projects_tasks_aggregate": {
            "$ref": "#/components/schemas/projects_tasks_aggregate_bool_exp"
          },
          "start_date": {
            "$ref": "#/components/schemas/timestamp_comparison_exp"
          },
          "updated_at": {
            "$ref": "#/components/schemas/timestamp_comparison_exp"
          }
        },
        "title": "projects_bool_exp",
        "type": "object"
      },
      "projects_bool_exp": {
        "description": "Boolean expression to filter rows from the table \"projects\". All fields are combined with a logical 'AND'.",
        "nullable": true,
        "properties": {
          "_and": {
            "items": {
              "$ref": "#/components/schemas/projects_bool_exp!"
            },
            "nullable": true,
            "type": "array"
          },
          "_not": {
            "$ref": "#/components/schemas/projects_bool_exp"
          },
          "_or": {
            "items": {
              "$ref": "#/components/schemas/projects_bool_exp!"
            },
            "nullable": true,
            "type": "array"
          },
          "created_at": {
            "$ref": "#/components/schemas/timestamp_comparison_exp"
          },
          "description": {
            "$ref": "#/components/schemas/String_comparison_exp"
          },
          "end_date": {
            "$ref": "#/components/schemas/timestamp_comparison_exp"
          },
          "id": {
            "$ref": "#/components/schemas/uuid_comparison_exp"
          },
          "is_active": {
            "$ref": "#/components/schemas/Boolean_comparison_exp"
          },
          "name": {
            "$ref": "#/components/schemas/String_comparison_exp"
          },
          "projects_tasks": {
            "$ref": "#/components/schemas/projects_tasks_bool_exp"
          },
          "projects_tasks_aggregate": {
            "$ref": "#/components/schemas/projects_tasks_aggregate_bool_exp"
          },
          "start_date": {
            "$ref": "#/components/schemas/timestamp_comparison_exp"
          },
          "updated_at": {
            "$ref": "#/components/schemas/timestamp_comparison_exp"
          }
        },
        "title": "projects_bool_exp",
        "type": "object"
      },
      "projects_tasks_bool_exp!": {
        "description": "Boolean expression to filter rows from the table \"projects_tasks\". All fields are combined with a logical 'AND'.",
        "nullable": false,
        "properties": {
          "_and": {
            "items": {
              "$ref": "#/components/schemas/projects_tasks_bool_exp!"
            },
            "nullable": true,
            "type": "array"
          },
          "_not": {
            "$ref": "#/components/schemas/projects_tasks_bool_exp"
          },
          "_or": {
            "items": {
              "$ref": "#/components/schemas/projects_tasks_bool_exp!"
            },
            "nullable": true,
            "type": "array"
          },
          "created_at": {
            "$ref": "#/components/schemas/timestamp_comparison_exp"
          },
          "date": {
            "$ref": "#/components/schemas/timestamp_comparison_exp"
          },
          "id": {
            "$ref": "#/components/schemas/uuid_comparison_exp"
          },
          "project": {
            "$ref": "#/components/schemas/projects_bool_exp"
          },
          "project_id": {
            "$ref": "#/components/schemas/uuid_comparison_exp"
          },
          "task_description": {
            "$ref": "#/components/schemas/String_comparison_exp"
          },
          "timesheets": {
            "$ref": "#/components/schemas/timesheets_bool_exp"
          },
          "timesheets_aggregate": {
            "$ref": "#/components/schemas/timesheets_aggregate_bool_exp"
          },
          "updated_at": {
            "$ref": "#/components/schemas/timestamp_comparison_exp"
          }
        },
        "title": "projects_tasks_bool_exp",
        "type": "object"
      },
      "projects_tasks_bool_exp": {
        "description": "Boolean expression to filter rows from the table \"projects_tasks\". All fields are combined with a logical 'AND'.",
        "nullable": true,
        "properties": {
          "_and": {
            "items": {
              "$ref": "#/components/schemas/projects_tasks_bool_exp!"
            },
            "nullable": true,
            "type": "array"
          },
          "_not": {
            "$ref": "#/components/schemas/projects_tasks_bool_exp"
          },
          "_or": {
            "items": {
              "$ref": "#/components/schemas/projects_tasks_bool_exp!"
            },
            "nullable": true,
            "type": "array"
          },
          "created_at": {
            "$ref": "#/components/schemas/timestamp_comparison_exp"
          },
          "date": {
            "$ref": "#/components/schemas/timestamp_comparison_exp"
          },
          "id": {
            "$ref": "#/components/schemas/uuid_comparison_exp"
          },
          "project": {
            "$ref": "#/components/schemas/projects_bool_exp"
          },
          "project_id": {
            "$ref": "#/components/schemas/uuid_comparison_exp"
          },
          "task_description": {
            "$ref": "#/components/schemas/String_comparison_exp"
          },
          "timesheets": {
            "$ref": "#/components/schemas/timesheets_bool_exp"
          },
          "timesheets_aggregate": {
            "$ref": "#/components/schemas/timesheets_aggregate_bool_exp"
          },
          "updated_at": {
            "$ref": "#/components/schemas/timestamp_comparison_exp"
          }
        },
        "title": "projects_tasks_bool_exp",
        "type": "object"
      },
      "projects_tasks_constraint!": {
        "description": "unique or primary key constraints on table \"projects_tasks\"",
        "enum": [
          "projects_tasks_pkey"
        ],
        "nullable": false,
        "title": "projects_tasks_constraint"
      },
      "projects_tasks_on_conflict": {
        "description": "on_conflict condition type for table \"projects_tasks\"",
        "nullable": true,
        "properties": {
          "constraint": {
            "$ref": "#/components/schemas/projects_tasks_constraint!"
          },
          "update_columns": {
            "items": {
              "$ref": "#/components/schemas/projects_tasks_update_column!"
            },
            "nullable": false,
            "type": "array"
          },
          "where": {
            "$ref": "#/components/schemas/projects_tasks_bool_exp"
          }
        },
        "title": "projects_tasks_on_conflict",
        "type": "object"
      },
      "projects_tasks_arr_rel_insert_input": {
        "description": "input type for inserting array relation for remote table \"projects_tasks\"",
        "nullable": true,
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/projects_tasks_insert_input!"
            },
            "nullable": false,
            "type": "array"
          },
          "on_conflict": {
            "$ref": "#/components/schemas/projects_tasks_on_conflict"
          }
        },
        "title": "projects_tasks_arr_rel_insert_input",
        "type": "object"
      },
      "projects_insert_input!": {
        "description": "input type for inserting data into table \"projects\"",
        "nullable": false,
        "properties": {
          "created_at": {
            "$ref": "#/components/schemas/timestamp"
          },
          "description": {
            "nullable": true,
            "title": "String",
            "type": "string"
          },
          "end_date": {
            "$ref": "#/components/schemas/timestamp"
          },
          "id": {
            "$ref": "#/components/schemas/uuid"
          },
          "is_active": {
            "nullable": true,
            "title": "Boolean",
            "type": "boolean"
          },
          "name": {
            "nullable": true,
            "title": "String",
            "type": "string"
          },
          "projects_tasks": {
            "$ref": "#/components/schemas/projects_tasks_arr_rel_insert_input"
          },
          "start_date": {
            "$ref": "#/components/schemas/timestamp"
          },
          "updated_at": {
            "$ref": "#/components/schemas/timestamp"
          }
        },
        "title": "projects_insert_input",
        "type": "object"
      },
      "projects_update_column!": {
        "description": "update columns of table \"projects\"",
        "enum": [
          "created_at",
          "description",
          "end_date",
          "id",
          "is_active",
          "name",
          "start_date",
          "updated_at"
        ],
        "nullable": false,
        "title": "projects_update_column"
      },
      "projects_constraint!": {
        "description": "unique or primary key constraints on table \"projects\"",
        "enum": [
          "projects_pkey"
        ],
        "nullable": false,
        "title": "projects_constraint"
      },
      "projects_on_conflict": {
        "description": "on_conflict condition type for table \"projects\"",
        "nullable": true,
        "properties": {
          "constraint": {
            "$ref": "#/components/schemas/projects_constraint!"
          },
          "update_columns": {
            "items": {
              "$ref": "#/components/schemas/projects_update_column!"
            },
            "nullable": false,
            "type": "array"
          },
          "where": {
            "$ref": "#/components/schemas/projects_bool_exp"
          }
        },
        "title": "projects_on_conflict",
        "type": "object"
      },
      "projects_obj_rel_insert_input": {
        "description": "input type for inserting object relation for remote table \"projects\"",
        "nullable": true,
        "properties": {
          "data": {
            "$ref": "#/components/schemas/projects_insert_input!"
          },
          "on_conflict": {
            "$ref": "#/components/schemas/projects_on_conflict"
          }
        },
        "title": "projects_obj_rel_insert_input",
        "type": "object"
      },
      "timesheets_update_column!": {
        "description": "update columns of table \"timesheets\"",
        "enum": [
          "client_id",
          "created_at",
          "freelance_id",
          "id",
          "project_task_id",
          "updated_at",
          "working_date",
          "working_durations"
        ],
        "nullable": false,
        "title": "timesheets_update_column"
      },
      "timesheets_constraint!": {
        "description": "unique or primary key constraints on table \"timesheets\"",
        "enum": [
          "timesheets_pkey"
        ],
        "nullable": false,
        "title": "timesheets_constraint"
      },
      "timesheets_on_conflict": {
        "description": "on_conflict condition type for table \"timesheets\"",
        "nullable": true,
        "properties": {
          "constraint": {
            "$ref": "#/components/schemas/timesheets_constraint!"
          },
          "update_columns": {
            "items": {
              "$ref": "#/components/schemas/timesheets_update_column!"
            },
            "nullable": false,
            "type": "array"
          },
          "where": {
            "$ref": "#/components/schemas/timesheets_bool_exp"
          }
        },
        "title": "timesheets_on_conflict",
        "type": "object"
      },
      "timesheets_arr_rel_insert_input": {
        "description": "input type for inserting array relation for remote table \"timesheets\"",
        "nullable": true,
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/timesheets_insert_input!"
            },
            "nullable": false,
            "type": "array"
          },
          "on_conflict": {
            "$ref": "#/components/schemas/timesheets_on_conflict"
          }
        },
        "title": "timesheets_arr_rel_insert_input",
        "type": "object"
      },
      "projects_tasks_insert_input!": {
        "description": "input type for inserting data into table \"projects_tasks\"",
        "nullable": false,
        "properties": {
          "created_at": {
            "$ref": "#/components/schemas/timestamp"
          },
          "date": {
            "$ref": "#/components/schemas/timestamp"
          },
          "id": {
            "$ref": "#/components/schemas/uuid"
          },
          "project": {
            "$ref": "#/components/schemas/projects_obj_rel_insert_input"
          },
          "project_id": {
            "$ref": "#/components/schemas/uuid"
          },
          "task_description": {
            "nullable": true,
            "title": "String",
            "type": "string"
          },
          "timesheets": {
            "$ref": "#/components/schemas/timesheets_arr_rel_insert_input"
          },
          "updated_at": {
            "$ref": "#/components/schemas/timestamp"
          }
        },
        "title": "projects_tasks_insert_input",
        "type": "object"
      },
      "projects_tasks_obj_rel_insert_input": {
        "description": "input type for inserting object relation for remote table \"projects_tasks\"",
        "nullable": true,
        "properties": {
          "data": {
            "$ref": "#/components/schemas/projects_tasks_insert_input!"
          },
          "on_conflict": {
            "$ref": "#/components/schemas/projects_tasks_on_conflict"
          }
        },
        "title": "projects_tasks_obj_rel_insert_input",
        "type": "object"
      },
      "clients_insert_input!": {
        "description": "input type for inserting data into table \"clients\"",
        "nullable": false,
        "properties": {
          "created_at": {
            "$ref": "#/components/schemas/timestamp"
          },
          "email": {
            "nullable": true,
            "title": "String",
            "type": "string"
          },
          "id": {
            "$ref": "#/components/schemas/uuid"
          },
          "name": {
            "nullable": true,
            "title": "String",
            "type": "string"
          },
          "phone": {
            "nullable": true,
            "title": "String",
            "type": "string"
          },
          "timesheets": {
            "$ref": "#/components/schemas/timesheets_arr_rel_insert_input"
          },
          "updated_at": {
            "$ref": "#/components/schemas/timestamp"
          }
        },
        "title": "clients_insert_input",
        "type": "object"
      },
      "clients_update_column!": {
        "description": "update columns of table \"clients\"",
        "enum": [
          "created_at",
          "email",
          "id",
          "name",
          "phone",
          "updated_at"
        ],
        "nullable": false,
        "title": "clients_update_column"
      },
      "clients_constraint!": {
        "description": "unique or primary key constraints on table \"clients\"",
        "enum": [
          "clients_pkey"
        ],
        "nullable": false,
        "title": "clients_constraint"
      },
      "clients_on_conflict": {
        "description": "on_conflict condition type for table \"clients\"",
        "nullable": true,
        "properties": {
          "constraint": {
            "$ref": "#/components/schemas/clients_constraint!"
          },
          "update_columns": {
            "items": {
              "$ref": "#/components/schemas/clients_update_column!"
            },
            "nullable": false,
            "type": "array"
          },
          "where": {
            "$ref": "#/components/schemas/clients_bool_exp"
          }
        },
        "title": "clients_on_conflict",
        "type": "object"
      },
      "clients_obj_rel_insert_input": {
        "description": "input type for inserting object relation for remote table \"clients\"",
        "nullable": true,
        "properties": {
          "data": {
            "$ref": "#/components/schemas/clients_insert_input!"
          },
          "on_conflict": {
            "$ref": "#/components/schemas/clients_on_conflict"
          }
        },
        "title": "clients_obj_rel_insert_input",
        "type": "object"
      },
      "freelances_insert_input!": {
        "description": "input type for inserting data into table \"freelances\"",
        "nullable": false,
        "properties": {
          "created_at": {
            "$ref": "#/components/schemas/timestamp"
          },
          "daily_rate": {
            "$ref": "#/components/schemas/numeric"
          },
          "email": {
            "nullable": true,
            "title": "String",
            "type": "string"
          },
          "id": {
            "$ref": "#/components/schemas/uuid"
          },
          "timesheets": {
            "$ref": "#/components/schemas/timesheets_arr_rel_insert_input"
          },
          "updated_at": {
            "$ref": "#/components/schemas/timestamp"
          }
        },
        "title": "freelances_insert_input",
        "type": "object"
      },
      "freelances_update_column!": {
        "description": "update columns of table \"freelances\"",
        "enum": [
          "created_at",
          "daily_rate",
          "email",
          "id",
          "updated_at"
        ],
        "nullable": false,
        "title": "freelances_update_column"
      },
      "freelances_constraint!": {
        "description": "unique or primary key constraints on table \"freelances\"",
        "enum": [
          "freelances_pkey"
        ],
        "nullable": false,
        "title": "freelances_constraint"
      },
      "freelances_on_conflict": {
        "description": "on_conflict condition type for table \"freelances\"",
        "nullable": true,
        "properties": {
          "constraint": {
            "$ref": "#/components/schemas/freelances_constraint!"
          },
          "update_columns": {
            "items": {
              "$ref": "#/components/schemas/freelances_update_column!"
            },
            "nullable": false,
            "type": "array"
          },
          "where": {
            "$ref": "#/components/schemas/freelances_bool_exp"
          }
        },
        "title": "freelances_on_conflict",
        "type": "object"
      },
      "freelances_obj_rel_insert_input": {
        "description": "input type for inserting object relation for remote table \"freelances\"",
        "nullable": true,
        "properties": {
          "data": {
            "$ref": "#/components/schemas/freelances_insert_input!"
          },
          "on_conflict": {
            "$ref": "#/components/schemas/freelances_on_conflict"
          }
        },
        "title": "freelances_obj_rel_insert_input",
        "type": "object"
      },
      "timesheets_insert_input!": {
        "description": "input type for inserting data into table \"timesheets\"",
        "nullable": false,
        "properties": {
          "client": {
            "$ref": "#/components/schemas/clients_obj_rel_insert_input"
          },
          "client_id": {
            "$ref": "#/components/schemas/uuid"
          },
          "created_at": {
            "$ref": "#/components/schemas/timestamp"
          },
          "freelance": {
            "$ref": "#/components/schemas/freelances_obj_rel_insert_input"
          },
          "freelance_id": {
            "$ref": "#/components/schemas/uuid"
          },
          "id": {
            "$ref": "#/components/schemas/uuid"
          },
          "project_task_id": {
            "$ref": "#/components/schemas/uuid"
          },
          "projects_task": {
            "$ref": "#/components/schemas/projects_tasks_obj_rel_insert_input"
          },
          "updated_at": {
            "$ref": "#/components/schemas/timestamp"
          },
          "working_date": {
            "nullable": true,
            "title": "String",
            "type": "string"
          },
          "working_durations": {
            "$ref": "#/components/schemas/jsonb"
          }
        },
        "title": "timesheets_insert_input",
        "type": "object"
      },
      "timesheets_set_input!": {
        "description": "input type for updating data in table \"timesheets\"",
        "nullable": false,
        "properties": {
          "client_id": {
            "$ref": "#/components/schemas/uuid"
          },
          "created_at": {
            "$ref": "#/components/schemas/timestamp"
          },
          "freelance_id": {
            "$ref": "#/components/schemas/uuid"
          },
          "id": {
            "$ref": "#/components/schemas/uuid"
          },
          "project_task_id": {
            "$ref": "#/components/schemas/uuid"
          },
          "updated_at": {
            "$ref": "#/components/schemas/timestamp"
          },
          "working_date": {
            "nullable": true,
            "title": "String",
            "type": "string"
          },
          "working_durations": {
            "$ref": "#/components/schemas/jsonb"
          }
        },
        "title": "timesheets_set_input",
        "type": "object"
      },
      "_PermissionToRole_insert_input!": {
        "description": "input type for inserting data into table \"_PermissionToRole\"",
        "nullable": false,
        "properties": {
          "A": {
            "$ref": "#/components/schemas/uuid"
          },
          "B": {
            "$ref": "#/components/schemas/uuid"
          },
          "Permission": {
            "$ref": "#/components/schemas/Permission_obj_rel_insert_input"
          },
          "Role": {
            "$ref": "#/components/schemas/Role_obj_rel_insert_input"
          }
        },
        "title": "_PermissionToRole_insert_input",
        "type": "object"
      },
      "_PermissionToRole_update_column!": {
        "description": "update columns of table \"_PermissionToRole\"",
        "enum": [
          "A",
          "B"
        ],
        "nullable": false,
        "title": "_PermissionToRole_update_column"
      },
      "Int_comparison_exp": {
        "description": "Boolean expression to compare columns of type \"Int\". All fields are combined with logical 'AND'.",
        "nullable": true,
        "properties": {
          "_eq": {
            "nullable": true,
            "title": "Int",
            "type": "integer"
          },
          "_gt": {
            "nullable": true,
            "title": "Int",
            "type": "integer"
          },
          "_gte": {
            "nullable": true,
            "title": "Int",
            "type": "integer"
          },
          "_in": {
            "items": {
              "nullable": false,
              "title": "Int",
              "type": "integer"
            },
            "nullable": true,
            "type": "array"
          },
          "_is_null": {
            "nullable": true,
            "title": "Boolean",
            "type": "boolean"
          },
          "_lt": {
            "nullable": true,
            "title": "Int",
            "type": "integer"
          },
          "_lte": {
            "nullable": true,
            "title": "Int",
            "type": "integer"
          },
          "_neq": {
            "nullable": true,
            "title": "Int",
            "type": "integer"
          },
          "_nin": {
            "items": {
              "nullable": false,
              "title": "Int",
              "type": "integer"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "title": "Int_comparison_exp",
        "type": "object"
      },
      "Authenticator_bool_exp!": {
        "description": "Boolean expression to filter rows from the table \"Authenticator\". All fields are combined with a logical 'AND'.",
        "nullable": false,
        "properties": {
          "User": {
            "$ref": "#/components/schemas/User_bool_exp"
          },
          "_and": {
            "items": {
              "$ref": "#/components/schemas/Authenticator_bool_exp!"
            },
            "nullable": true,
            "type": "array"
          },
          "_not": {
            "$ref": "#/components/schemas/Authenticator_bool_exp"
          },
          "_or": {
            "items": {
              "$ref": "#/components/schemas/Authenticator_bool_exp!"
            },
            "nullable": true,
            "type": "array"
          },
          "counter": {
            "$ref": "#/components/schemas/Int_comparison_exp"
          },
          "credentialBackedUp": {
            "$ref": "#/components/schemas/Boolean_comparison_exp"
          },
          "credentialDeviceType": {
            "$ref": "#/components/schemas/String_comparison_exp"
          },
          "credentialID": {
            "$ref": "#/components/schemas/String_comparison_exp"
          },
          "credentialPublicKey": {
            "$ref": "#/components/schemas/String_comparison_exp"
          },
          "providerAccountId": {
            "$ref": "#/components/schemas/String_comparison_exp"
          },
          "transports": {
            "$ref": "#/components/schemas/String_comparison_exp"
          },
          "userId": {
            "$ref": "#/components/schemas/uuid_comparison_exp"
          }
        },
        "title": "Authenticator_bool_exp",
        "type": "object"
      },
      "Authenticator_bool_exp": {
        "description": "Boolean expression to filter rows from the table \"Authenticator\". All fields are combined with a logical 'AND'.",
        "nullable": true,
        "properties": {
          "User": {
            "$ref": "#/components/schemas/User_bool_exp"
          },
          "_and": {
            "items": {
              "$ref": "#/components/schemas/Authenticator_bool_exp!"
            },
            "nullable": true,
            "type": "array"
          },
          "_not": {
            "$ref": "#/components/schemas/Authenticator_bool_exp"
          },
          "_or": {
            "items": {
              "$ref": "#/components/schemas/Authenticator_bool_exp!"
            },
            "nullable": true,
            "type": "array"
          },
          "counter": {
            "$ref": "#/components/schemas/Int_comparison_exp"
          },
          "credentialBackedUp": {
            "$ref": "#/components/schemas/Boolean_comparison_exp"
          },
          "credentialDeviceType": {
            "$ref": "#/components/schemas/String_comparison_exp"
          },
          "credentialID": {
            "$ref": "#/components/schemas/String_comparison_exp"
          },
          "credentialPublicKey": {
            "$ref": "#/components/schemas/String_comparison_exp"
          },
          "providerAccountId": {
            "$ref": "#/components/schemas/String_comparison_exp"
          },
          "transports": {
            "$ref": "#/components/schemas/String_comparison_exp"
          },
          "userId": {
            "$ref": "#/components/schemas/uuid_comparison_exp"
          }
        },
        "title": "Authenticator_bool_exp",
        "type": "object"
      },
      "Authenticator_select_column_Authenticator_aggregate_bool_exp_bool_and_arguments_columns!": {
        "description": "select \"Authenticator_aggregate_bool_exp_bool_and_arguments_columns\" columns of table \"Authenticator\"",
        "enum": [
          "credentialBackedUp"
        ],
        "nullable": false,
        "title": "Authenticator_select_column_Authenticator_aggregate_bool_exp_bool_and_arguments_columns"
      },
      "Boolean_comparison_exp!": {
        "description": "Boolean expression to compare columns of type \"Boolean\". All fields are combined with logical 'AND'.",
        "nullable": false,
        "properties": {
          "_eq": {
            "nullable": true,
            "title": "Boolean",
            "type": "boolean"
          },
          "_gt": {
            "nullable": true,
            "title": "Boolean",
            "type": "boolean"
          },
          "_gte": {
            "nullable": true,
            "title": "Boolean",
            "type": "boolean"
          },
          "_in": {
            "items": {
              "nullable": false,
              "title": "Boolean",
              "type": "boolean"
            },
            "nullable": true,
            "type": "array"
          },
          "_is_null": {
            "nullable": true,
            "title": "Boolean",
            "type": "boolean"
          },
          "_lt": {
            "nullable": true,
            "title": "Boolean",
            "type": "boolean"
          },
          "_lte": {
            "nullable": true,
            "title": "Boolean",
            "type": "boolean"
          },
          "_neq": {
            "nullable": true,
            "title": "Boolean",
            "type": "boolean"
          },
          "_nin": {
            "items": {
              "nullable": false,
              "title": "Boolean",
              "type": "boolean"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "title": "Boolean_comparison_exp",
        "type": "object"
      },
      "Authenticator_aggregate_bool_exp_bool_and": {
        "nullable": true,
        "properties": {
          "arguments": {
            "$ref": "#/components/schemas/Authenticator_select_column_Authenticator_aggregate_bool_exp_bool_and_arguments_columns!"
          },
          "distinct": {
            "nullable": true,
            "title": "Boolean",
            "type": "boolean"
          },
          "filter": {
            "$ref": "#/components/schemas/Authenticator_bool_exp"
          },
          "predicate": {
            "$ref": "#/components/schemas/Boolean_comparison_exp!"
          }
        },
        "title": "Authenticator_aggregate_bool_exp_bool_and",
        "type": "object"
      },
      "Authenticator_select_column_Authenticator_aggregate_bool_exp_bool_or_arguments_columns!": {
        "description": "select \"Authenticator_aggregate_bool_exp_bool_or_arguments_columns\" columns of table \"Authenticator\"",
        "enum": [
          "credentialBackedUp"
        ],
        "nullable": false,
        "title": "Authenticator_select_column_Authenticator_aggregate_bool_exp_bool_or_arguments_columns"
      },
      "Authenticator_aggregate_bool_exp_bool_or": {
        "nullable": true,
        "properties": {
          "arguments": {
            "$ref": "#/components/schemas/Authenticator_select_column_Authenticator_aggregate_bool_exp_bool_or_arguments_columns!"
          },
          "distinct": {
            "nullable": true,
            "title": "Boolean",
            "type": "boolean"
          },
          "filter": {
            "$ref": "#/components/schemas/Authenticator_bool_exp"
          },
          "predicate": {
            "$ref": "#/components/schemas/Boolean_comparison_exp!"
          }
        },
        "title": "Authenticator_aggregate_bool_exp_bool_or",
        "type": "object"
      },
      "Authenticator_select_column!": {
        "description": "select columns of table \"Authenticator\"",
        "enum": [
          "counter",
          "credentialBackedUp",
          "credentialDeviceType",
          "credentialID",
          "credentialPublicKey",
          "providerAccountId",
          "transports",
          "userId"
        ],
        "nullable": false,
        "title": "Authenticator_select_column"
      },
      "Authenticator_aggregate_bool_exp_count": {
        "nullable": true,
        "properties": {
          "arguments": {
            "items": {
              "$ref": "#/components/schemas/Authenticator_select_column!"
            },
            "nullable": true,
            "type": "array"
          },
          "distinct": {
            "nullable": true,
            "title": "Boolean",
            "type": "boolean"
          },
          "filter": {
            "$ref": "#/components/schemas/Authenticator_bool_exp"
          },
          "predicate": {
            "$ref": "#/components/schemas/Int_comparison_exp!"
          }
        },
        "title": "Authenticator_aggregate_bool_exp_count",
        "type": "object"
      },
      "Authenticator_aggregate_bool_exp": {
        "nullable": true,
        "properties": {
          "bool_and": {
            "$ref": "#/components/schemas/Authenticator_aggregate_bool_exp_bool_and"
          },
          "bool_or": {
            "$ref": "#/components/schemas/Authenticator_aggregate_bool_exp_bool_or"
          },
          "count": {
            "$ref": "#/components/schemas/Authenticator_aggregate_bool_exp_count"
          }
        },
        "title": "Authenticator_aggregate_bool_exp",
        "type": "object"
      },
      "Account_bool_exp!": {
        "description": "Boolean expression to filter rows from the table \"Account\". All fields are combined with a logical 'AND'.",
        "nullable": false,
        "properties": {
          "User": {
            "$ref": "#/components/schemas/User_bool_exp"
          },
          "_and": {
            "items": {
              "$ref": "#/components/schemas/Account_bool_exp!"
            },
            "nullable": true,
            "type": "array"
          },
          "_not": {
            "$ref": "#/components/schemas/Account_bool_exp"
          },
          "_or": {
            "items": {
              "$ref": "#/components/schemas/Account_bool_exp!"
            },
            "nullable": true,
            "type": "array"
          },
          "access_token": {
            "$ref": "#/components/schemas/String_comparison_exp"
          },
          "createdAt": {
            "$ref": "#/components/schemas/timestamp_comparison_exp"
          },
          "expires_at": {
            "$ref": "#/components/schemas/Int_comparison_exp"
          },
          "id_token": {
            "$ref": "#/components/schemas/String_comparison_exp"
          },
          "provider": {
            "$ref": "#/components/schemas/String_comparison_exp"
          },
          "providerAccountId": {
            "$ref": "#/components/schemas/String_comparison_exp"
          },
          "refresh_token": {
            "$ref": "#/components/schemas/String_comparison_exp"
          },
          "scope": {
            "$ref": "#/components/schemas/String_comparison_exp"
          },
          "session_state": {
            "$ref": "#/components/schemas/String_comparison_exp"
          },
          "token_type": {
            "$ref": "#/components/schemas/String_comparison_exp"
          },
          "type": {
            "$ref": "#/components/schemas/String_comparison_exp"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/timestamp_comparison_exp"
          },
          "userId": {
            "$ref": "#/components/schemas/uuid_comparison_exp"
          }
        },
        "title": "Account_bool_exp",
        "type": "object"
      },
      "Account_bool_exp": {
        "description": "Boolean expression to filter rows from the table \"Account\". All fields are combined with a logical 'AND'.",
        "nullable": true,
        "properties": {
          "User": {
            "$ref": "#/components/schemas/User_bool_exp"
          },
          "_and": {
            "items": {
              "$ref": "#/components/schemas/Account_bool_exp!"
            },
            "nullable": true,
            "type": "array"
          },
          "_not": {
            "$ref": "#/components/schemas/Account_bool_exp"
          },
          "_or": {
            "items": {
              "$ref": "#/components/schemas/Account_bool_exp!"
            },
            "nullable": true,
            "type": "array"
          },
          "access_token": {
            "$ref": "#/components/schemas/String_comparison_exp"
          },
          "createdAt": {
            "$ref": "#/components/schemas/timestamp_comparison_exp"
          },
          "expires_at": {
            "$ref": "#/components/schemas/Int_comparison_exp"
          },
          "id_token": {
            "$ref": "#/components/schemas/String_comparison_exp"
          },
          "provider": {
            "$ref": "#/components/schemas/String_comparison_exp"
          },
          "providerAccountId": {
            "$ref": "#/components/schemas/String_comparison_exp"
          },
          "refresh_token": {
            "$ref": "#/components/schemas/String_comparison_exp"
          },
          "scope": {
            "$ref": "#/components/schemas/String_comparison_exp"
          },
          "session_state": {
            "$ref": "#/components/schemas/String_comparison_exp"
          },
          "token_type": {
            "$ref": "#/components/schemas/String_comparison_exp"
          },
          "type": {
            "$ref": "#/components/schemas/String_comparison_exp"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/timestamp_comparison_exp"
          },
          "userId": {
            "$ref": "#/components/schemas/uuid_comparison_exp"
          }
        },
        "title": "Account_bool_exp",
        "type": "object"
      },
      "Account_select_column!": {
        "description": "select columns of table \"Account\"",
        "enum": [
          "access_token",
          "createdAt",
          "expires_at",
          "id_token",
          "provider",
          "providerAccountId",
          "refresh_token",
          "scope",
          "session_state",
          "token_type",
          "type",
          "updatedAt",
          "userId"
        ],
        "nullable": false,
        "title": "Account_select_column"
      },
      "Account_aggregate_bool_exp_count": {
        "nullable": true,
        "properties": {
          "arguments": {
            "items": {
              "$ref": "#/components/schemas/Account_select_column!"
            },
            "nullable": true,
            "type": "array"
          },
          "distinct": {
            "nullable": true,
            "title": "Boolean",
            "type": "boolean"
          },
          "filter": {
            "$ref": "#/components/schemas/Account_bool_exp"
          },
          "predicate": {
            "$ref": "#/components/schemas/Int_comparison_exp!"
          }
        },
        "title": "Account_aggregate_bool_exp_count",
        "type": "object"
      },
      "Account_aggregate_bool_exp": {
        "nullable": true,
        "properties": {
          "count": {
            "$ref": "#/components/schemas/Account_aggregate_bool_exp_count"
          }
        },
        "title": "Account_aggregate_bool_exp",
        "type": "object"
      },
      "Session_bool_exp!": {
        "description": "Boolean expression to filter rows from the table \"Session\". All fields are combined with a logical 'AND'.",
        "nullable": false,
        "properties": {
          "User": {
            "$ref": "#/components/schemas/User_bool_exp"
          },
          "_and": {
            "items": {
              "$ref": "#/components/schemas/Session_bool_exp!"
            },
            "nullable": true,
            "type": "array"
          },
          "_not": {
            "$ref": "#/components/schemas/Session_bool_exp"
          },
          "_or": {
            "items": {
              "$ref": "#/components/schemas/Session_bool_exp!"
            },
            "nullable": true,
            "type": "array"
          },
          "createdAt": {
            "$ref": "#/components/schemas/timestamp_comparison_exp"
          },
          "expires": {
            "$ref": "#/components/schemas/timestamp_comparison_exp"
          },
          "sessionToken": {
            "$ref": "#/components/schemas/String_comparison_exp"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/timestamp_comparison_exp"
          },
          "userId": {
            "$ref": "#/components/schemas/uuid_comparison_exp"
          }
        },
        "title": "Session_bool_exp",
        "type": "object"
      },
      "Session_bool_exp": {
        "description": "Boolean expression to filter rows from the table \"Session\". All fields are combined with a logical 'AND'.",
        "nullable": true,
        "properties": {
          "User": {
            "$ref": "#/components/schemas/User_bool_exp"
          },
          "_and": {
            "items": {
              "$ref": "#/components/schemas/Session_bool_exp!"
            },
            "nullable": true,
            "type": "array"
          },
          "_not": {
            "$ref": "#/components/schemas/Session_bool_exp"
          },
          "_or": {
            "items": {
              "$ref": "#/components/schemas/Session_bool_exp!"
            },
            "nullable": true,
            "type": "array"
          },
          "createdAt": {
            "$ref": "#/components/schemas/timestamp_comparison_exp"
          },
          "expires": {
            "$ref": "#/components/schemas/timestamp_comparison_exp"
          },
          "sessionToken": {
            "$ref": "#/components/schemas/String_comparison_exp"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/timestamp_comparison_exp"
          },
          "userId": {
            "$ref": "#/components/schemas/uuid_comparison_exp"
          }
        },
        "title": "Session_bool_exp",
        "type": "object"
      },
      "Session_select_column!": {
        "description": "select columns of table \"Session\"",
        "enum": [
          "createdAt",
          "expires",
          "sessionToken",
          "updatedAt",
          "userId"
        ],
        "nullable": false,
        "title": "Session_select_column"
      },
      "Session_aggregate_bool_exp_count": {
        "nullable": true,
        "properties": {
          "arguments": {
            "items": {
              "$ref": "#/components/schemas/Session_select_column!"
            },
            "nullable": true,
            "type": "array"
          },
          "distinct": {
            "nullable": true,
            "title": "Boolean",
            "type": "boolean"
          },
          "filter": {
            "$ref": "#/components/schemas/Session_bool_exp"
          },
          "predicate": {
            "$ref": "#/components/schemas/Int_comparison_exp!"
          }
        },
        "title": "Session_aggregate_bool_exp_count",
        "type": "object"
      },
      "Session_aggregate_bool_exp": {
        "nullable": true,
        "properties": {
          "count": {
            "$ref": "#/components/schemas/Session_aggregate_bool_exp_count"
          }
        },
        "title": "Session_aggregate_bool_exp",
        "type": "object"
      },
      "_RoleToUser_bool_exp!": {
        "description": "Boolean expression to filter rows from the table \"_RoleToUser\". All fields are combined with a logical 'AND'.",
        "nullable": false,
        "properties": {
          "A": {
            "$ref": "#/components/schemas/uuid_comparison_exp"
          },
          "B": {
            "$ref": "#/components/schemas/uuid_comparison_exp"
          },
          "Role": {
            "$ref": "#/components/schemas/Role_bool_exp"
          },
          "User": {
            "$ref": "#/components/schemas/User_bool_exp"
          },
          "_and": {
            "items": {
              "$ref": "#/components/schemas/_RoleToUser_bool_exp!"
            },
            "nullable": true,
            "type": "array"
          },
          "_not": {
            "$ref": "#/components/schemas/_RoleToUser_bool_exp"
          },
          "_or": {
            "items": {
              "$ref": "#/components/schemas/_RoleToUser_bool_exp!"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "title": "_RoleToUser_bool_exp",
        "type": "object"
      },
      "_RoleToUser_bool_exp": {
        "description": "Boolean expression to filter rows from the table \"_RoleToUser\". All fields are combined with a logical 'AND'.",
        "nullable": true,
        "properties": {
          "A": {
            "$ref": "#/components/schemas/uuid_comparison_exp"
          },
          "B": {
            "$ref": "#/components/schemas/uuid_comparison_exp"
          },
          "Role": {
            "$ref": "#/components/schemas/Role_bool_exp"
          },
          "User": {
            "$ref": "#/components/schemas/User_bool_exp"
          },
          "_and": {
            "items": {
              "$ref": "#/components/schemas/_RoleToUser_bool_exp!"
            },
            "nullable": true,
            "type": "array"
          },
          "_not": {
            "$ref": "#/components/schemas/_RoleToUser_bool_exp"
          },
          "_or": {
            "items": {
              "$ref": "#/components/schemas/_RoleToUser_bool_exp!"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "title": "_RoleToUser_bool_exp",
        "type": "object"
      },
      "_RoleToUser_select_column!": {
        "description": "select columns of table \"_RoleToUser\"",
        "enum": [
          "A",
          "B"
        ],
        "nullable": false,
        "title": "_RoleToUser_select_column"
      },
      "_RoleToUser_aggregate_bool_exp_count": {
        "nullable": true,
        "properties": {
          "arguments": {
            "items": {
              "$ref": "#/components/schemas/_RoleToUser_select_column!"
            },
            "nullable": true,
            "type": "array"
          },
          "distinct": {
            "nullable": true,
            "title": "Boolean",
            "type": "boolean"
          },
          "filter": {
            "$ref": "#/components/schemas/_RoleToUser_bool_exp"
          },
          "predicate": {
            "$ref": "#/components/schemas/Int_comparison_exp!"
          }
        },
        "title": "_RoleToUser_aggregate_bool_exp_count",
        "type": "object"
      },
      "_RoleToUser_aggregate_bool_exp": {
        "nullable": true,
        "properties": {
          "count": {
            "$ref": "#/components/schemas/_RoleToUser_aggregate_bool_exp_count"
          }
        },
        "title": "_RoleToUser_aggregate_bool_exp",
        "type": "object"
      },
      "User_bool_exp!": {
        "description": "Boolean expression to filter rows from the table \"User\". All fields are combined with a logical 'AND'.",
        "nullable": false,
        "properties": {
          "Accounts": {
            "$ref": "#/components/schemas/Account_bool_exp"
          },
          "Accounts_aggregate": {
            "$ref": "#/components/schemas/Account_aggregate_bool_exp"
          },
          "Authenticators": {
            "$ref": "#/components/schemas/Authenticator_bool_exp"
          },
          "Authenticators_aggregate": {
            "$ref": "#/components/schemas/Authenticator_aggregate_bool_exp"
          },
          "Sessions": {
            "$ref": "#/components/schemas/Session_bool_exp"
          },
          "Sessions_aggregate": {
            "$ref": "#/components/schemas/Session_aggregate_bool_exp"
          },
          "UserRoles": {
            "$ref": "#/components/schemas/UserRole_bool_exp"
          },
          "UserRoles_aggregate": {
            "$ref": "#/components/schemas/UserRole_aggregate_bool_exp"
          },
          "_RoleToUsers": {
            "$ref": "#/components/schemas/_RoleToUser_bool_exp"
          },
          "_RoleToUsers_aggregate": {
            "$ref": "#/components/schemas/_RoleToUser_aggregate_bool_exp"
          },
          "_and": {
            "items": {
              "$ref": "#/components/schemas/User_bool_exp!"
            },
            "nullable": true,
            "type": "array"
          },
          "_not": {
            "$ref": "#/components/schemas/User_bool_exp"
          },
          "_or": {
            "items": {
              "$ref": "#/components/schemas/User_bool_exp!"
            },
            "nullable": true,
            "type": "array"
          },
          "createdAt": {
            "$ref": "#/components/schemas/timestamp_comparison_exp"
          },
          "email": {
            "$ref": "#/components/schemas/String_comparison_exp"
          },
          "emailVerified": {
            "$ref": "#/components/schemas/timestamp_comparison_exp"
          },
          "id": {
            "$ref": "#/components/schemas/uuid_comparison_exp"
          },
          "image": {
            "$ref": "#/components/schemas/String_comparison_exp"
          },
          "name": {
            "$ref": "#/components/schemas/String_comparison_exp"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/timestamp_comparison_exp"
          }
        },
        "title": "User_bool_exp",
        "type": "object"
      },
      "User_bool_exp": {
        "description": "Boolean expression to filter rows from the table \"User\". All fields are combined with a logical 'AND'.",
        "nullable": true,
        "properties": {
          "Accounts": {
            "$ref": "#/components/schemas/Account_bool_exp"
          },
          "Accounts_aggregate": {
            "$ref": "#/components/schemas/Account_aggregate_bool_exp"
          },
          "Authenticators": {
            "$ref": "#/components/schemas/Authenticator_bool_exp"
          },
          "Authenticators_aggregate": {
            "$ref": "#/components/schemas/Authenticator_aggregate_bool_exp"
          },
          "Sessions": {
            "$ref": "#/components/schemas/Session_bool_exp"
          },
          "Sessions_aggregate": {
            "$ref": "#/components/schemas/Session_aggregate_bool_exp"
          },
          "UserRoles": {
            "$ref": "#/components/schemas/UserRole_bool_exp"
          },
          "UserRoles_aggregate": {
            "$ref": "#/components/schemas/UserRole_aggregate_bool_exp"
          },
          "_RoleToUsers": {
            "$ref": "#/components/schemas/_RoleToUser_bool_exp"
          },
          "_RoleToUsers_aggregate": {
            "$ref": "#/components/schemas/_RoleToUser_aggregate_bool_exp"
          },
          "_and": {
            "items": {
              "$ref": "#/components/schemas/User_bool_exp!"
            },
            "nullable": true,
            "type": "array"
          },
          "_not": {
            "$ref": "#/components/schemas/User_bool_exp"
          },
          "_or": {
            "items": {
              "$ref": "#/components/schemas/User_bool_exp!"
            },
            "nullable": true,
            "type": "array"
          },
          "createdAt": {
            "$ref": "#/components/schemas/timestamp_comparison_exp"
          },
          "email": {
            "$ref": "#/components/schemas/String_comparison_exp"
          },
          "emailVerified": {
            "$ref": "#/components/schemas/timestamp_comparison_exp"
          },
          "id": {
            "$ref": "#/components/schemas/uuid_comparison_exp"
          },
          "image": {
            "$ref": "#/components/schemas/String_comparison_exp"
          },
          "name": {
            "$ref": "#/components/schemas/String_comparison_exp"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/timestamp_comparison_exp"
          }
        },
        "title": "User_bool_exp",
        "type": "object"
      },
      "UserRole_bool_exp!": {
        "description": "Boolean expression to filter rows from the table \"UserRole\". All fields are combined with a logical 'AND'.",
        "nullable": false,
        "properties": {
          "Role": {
            "$ref": "#/components/schemas/Role_bool_exp"
          },
          "User": {
            "$ref": "#/components/schemas/User_bool_exp"
          },
          "_and": {
            "items": {
              "$ref": "#/components/schemas/UserRole_bool_exp!"
            },
            "nullable": true,
            "type": "array"
          },
          "_not": {
            "$ref": "#/components/schemas/UserRole_bool_exp"
          },
          "_or": {
            "items": {
              "$ref": "#/components/schemas/UserRole_bool_exp!"
            },
            "nullable": true,
            "type": "array"
          },
          "roleId": {
            "$ref": "#/components/schemas/uuid_comparison_exp"
          },
          "userId": {
            "$ref": "#/components/schemas/uuid_comparison_exp"
          }
        },
        "title": "UserRole_bool_exp",
        "type": "object"
      },
      "UserRole_bool_exp": {
        "description": "Boolean expression to filter rows from the table \"UserRole\". All fields are combined with a logical 'AND'.",
        "nullable": true,
        "properties": {
          "Role": {
            "$ref": "#/components/schemas/Role_bool_exp"
          },
          "User": {
            "$ref": "#/components/schemas/User_bool_exp"
          },
          "_and": {
            "items": {
              "$ref": "#/components/schemas/UserRole_bool_exp!"
            },
            "nullable": true,
            "type": "array"
          },
          "_not": {
            "$ref": "#/components/schemas/UserRole_bool_exp"
          },
          "_or": {
            "items": {
              "$ref": "#/components/schemas/UserRole_bool_exp!"
            },
            "nullable": true,
            "type": "array"
          },
          "roleId": {
            "$ref": "#/components/schemas/uuid_comparison_exp"
          },
          "userId": {
            "$ref": "#/components/schemas/uuid_comparison_exp"
          }
        },
        "title": "UserRole_bool_exp",
        "type": "object"
      },
      "UserRole_select_column!": {
        "description": "select columns of table \"UserRole\"",
        "enum": [
          "roleId",
          "userId"
        ],
        "nullable": false,
        "title": "UserRole_select_column"
      },
      "UserRole_aggregate_bool_exp_count": {
        "nullable": true,
        "properties": {
          "arguments": {
            "items": {
              "$ref": "#/components/schemas/UserRole_select_column!"
            },
            "nullable": true,
            "type": "array"
          },
          "distinct": {
            "nullable": true,
            "title": "Boolean",
            "type": "boolean"
          },
          "filter": {
            "$ref": "#/components/schemas/UserRole_bool_exp"
          },
          "predicate": {
            "$ref": "#/components/schemas/Int_comparison_exp!"
          }
        },
        "title": "UserRole_aggregate_bool_exp_count",
        "type": "object"
      },
      "UserRole_aggregate_bool_exp": {
        "nullable": true,
        "properties": {
          "count": {
            "$ref": "#/components/schemas/UserRole_aggregate_bool_exp_count"
          }
        },
        "title": "UserRole_aggregate_bool_exp",
        "type": "object"
      },
      "_PermissionToRole_select_column!": {
        "description": "select columns of table \"_PermissionToRole\"",
        "enum": [
          "A",
          "B"
        ],
        "nullable": false,
        "title": "_PermissionToRole_select_column"
      },
      "_PermissionToRole_aggregate_bool_exp_count": {
        "nullable": true,
        "properties": {
          "arguments": {
            "items": {
              "$ref": "#/components/schemas/_PermissionToRole_select_column!"
            },
            "nullable": true,
            "type": "array"
          },
          "distinct": {
            "nullable": true,
            "title": "Boolean",
            "type": "boolean"
          },
          "filter": {
            "$ref": "#/components/schemas/_PermissionToRole_bool_exp"
          },
          "predicate": {
            "$ref": "#/components/schemas/Int_comparison_exp!"
          }
        },
        "title": "_PermissionToRole_aggregate_bool_exp_count",
        "type": "object"
      },
      "_PermissionToRole_aggregate_bool_exp": {
        "nullable": true,
        "properties": {
          "count": {
            "$ref": "#/components/schemas/_PermissionToRole_aggregate_bool_exp_count"
          }
        },
        "title": "_PermissionToRole_aggregate_bool_exp",
        "type": "object"
      },
      "Role_bool_exp!": {
        "description": "Boolean expression to filter rows from the table \"Role\". All fields are combined with a logical 'AND'.",
        "nullable": false,
        "properties": {
          "RolePermissions": {
            "$ref": "#/components/schemas/RolePermission_bool_exp"
          },
          "RolePermissions_aggregate": {
            "$ref": "#/components/schemas/RolePermission_aggregate_bool_exp"
          },
          "UserRoles": {
            "$ref": "#/components/schemas/UserRole_bool_exp"
          },
          "UserRoles_aggregate": {
            "$ref": "#/components/schemas/UserRole_aggregate_bool_exp"
          },
          "_PermissionToRoles": {
            "$ref": "#/components/schemas/_PermissionToRole_bool_exp"
          },
          "_PermissionToRoles_aggregate": {
            "$ref": "#/components/schemas/_PermissionToRole_aggregate_bool_exp"
          },
          "_RoleToUsers": {
            "$ref": "#/components/schemas/_RoleToUser_bool_exp"
          },
          "_RoleToUsers_aggregate": {
            "$ref": "#/components/schemas/_RoleToUser_aggregate_bool_exp"
          },
          "_and": {
            "items": {
              "$ref": "#/components/schemas/Role_bool_exp!"
            },
            "nullable": true,
            "type": "array"
          },
          "_not": {
            "$ref": "#/components/schemas/Role_bool_exp"
          },
          "_or": {
            "items": {
              "$ref": "#/components/schemas/Role_bool_exp!"
            },
            "nullable": true,
            "type": "array"
          },
          "createdAt": {
            "$ref": "#/components/schemas/timestamp_comparison_exp"
          },
          "description": {
            "$ref": "#/components/schemas/String_comparison_exp"
          },
          "id": {
            "$ref": "#/components/schemas/uuid_comparison_exp"
          },
          "name": {
            "$ref": "#/components/schemas/String_comparison_exp"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/timestamp_comparison_exp"
          }
        },
        "title": "Role_bool_exp",
        "type": "object"
      },
      "Role_bool_exp": {
        "description": "Boolean expression to filter rows from the table \"Role\". All fields are combined with a logical 'AND'.",
        "nullable": true,
        "properties": {
          "RolePermissions": {
            "$ref": "#/components/schemas/RolePermission_bool_exp"
          },
          "RolePermissions_aggregate": {
            "$ref": "#/components/schemas/RolePermission_aggregate_bool_exp"
          },
          "UserRoles": {
            "$ref": "#/components/schemas/UserRole_bool_exp"
          },
          "UserRoles_aggregate": {
            "$ref": "#/components/schemas/UserRole_aggregate_bool_exp"
          },
          "_PermissionToRoles": {
            "$ref": "#/components/schemas/_PermissionToRole_bool_exp"
          },
          "_PermissionToRoles_aggregate": {
            "$ref": "#/components/schemas/_PermissionToRole_aggregate_bool_exp"
          },
          "_RoleToUsers": {
            "$ref": "#/components/schemas/_RoleToUser_bool_exp"
          },
          "_RoleToUsers_aggregate": {
            "$ref": "#/components/schemas/_RoleToUser_aggregate_bool_exp"
          },
          "_and": {
            "items": {
              "$ref": "#/components/schemas/Role_bool_exp!"
            },
            "nullable": true,
            "type": "array"
          },
          "_not": {
            "$ref": "#/components/schemas/Role_bool_exp"
          },
          "_or": {
            "items": {
              "$ref": "#/components/schemas/Role_bool_exp!"
            },
            "nullable": true,
            "type": "array"
          },
          "createdAt": {
            "$ref": "#/components/schemas/timestamp_comparison_exp"
          },
          "description": {
            "$ref": "#/components/schemas/String_comparison_exp"
          },
          "id": {
            "$ref": "#/components/schemas/uuid_comparison_exp"
          },
          "name": {
            "$ref": "#/components/schemas/String_comparison_exp"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/timestamp_comparison_exp"
          }
        },
        "title": "Role_bool_exp",
        "type": "object"
      },
      "RolePermission_bool_exp!": {
        "description": "Boolean expression to filter rows from the table \"RolePermission\". All fields are combined with a logical 'AND'.",
        "nullable": false,
        "properties": {
          "Permission": {
            "$ref": "#/components/schemas/Permission_bool_exp"
          },
          "Role": {
            "$ref": "#/components/schemas/Role_bool_exp"
          },
          "_and": {
            "items": {
              "$ref": "#/components/schemas/RolePermission_bool_exp!"
            },
            "nullable": true,
            "type": "array"
          },
          "_not": {
            "$ref": "#/components/schemas/RolePermission_bool_exp"
          },
          "_or": {
            "items": {
              "$ref": "#/components/schemas/RolePermission_bool_exp!"
            },
            "nullable": true,
            "type": "array"
          },
          "permissionId": {
            "$ref": "#/components/schemas/uuid_comparison_exp"
          },
          "roleId": {
            "$ref": "#/components/schemas/uuid_comparison_exp"
          }
        },
        "title": "RolePermission_bool_exp",
        "type": "object"
      },
      "RolePermission_bool_exp": {
        "description": "Boolean expression to filter rows from the table \"RolePermission\". All fields are combined with a logical 'AND'.",
        "nullable": true,
        "properties": {
          "Permission": {
            "$ref": "#/components/schemas/Permission_bool_exp"
          },
          "Role": {
            "$ref": "#/components/schemas/Role_bool_exp"
          },
          "_and": {
            "items": {
              "$ref": "#/components/schemas/RolePermission_bool_exp!"
            },
            "nullable": true,
            "type": "array"
          },
          "_not": {
            "$ref": "#/components/schemas/RolePermission_bool_exp"
          },
          "_or": {
            "items": {
              "$ref": "#/components/schemas/RolePermission_bool_exp!"
            },
            "nullable": true,
            "type": "array"
          },
          "permissionId": {
            "$ref": "#/components/schemas/uuid_comparison_exp"
          },
          "roleId": {
            "$ref": "#/components/schemas/uuid_comparison_exp"
          }
        },
        "title": "RolePermission_bool_exp",
        "type": "object"
      },
      "RolePermission_select_column!": {
        "description": "select columns of table \"RolePermission\"",
        "enum": [
          "permissionId",
          "roleId"
        ],
        "nullable": false,
        "title": "RolePermission_select_column"
      },
      "RolePermission_aggregate_bool_exp_count": {
        "nullable": true,
        "properties": {
          "arguments": {
            "items": {
              "$ref": "#/components/schemas/RolePermission_select_column!"
            },
            "nullable": true,
            "type": "array"
          },
          "distinct": {
            "nullable": true,
            "title": "Boolean",
            "type": "boolean"
          },
          "filter": {
            "$ref": "#/components/schemas/RolePermission_bool_exp"
          },
          "predicate": {
            "$ref": "#/components/schemas/Int_comparison_exp!"
          }
        },
        "title": "RolePermission_aggregate_bool_exp_count",
        "type": "object"
      },
      "RolePermission_aggregate_bool_exp": {
        "nullable": true,
        "properties": {
          "count": {
            "$ref": "#/components/schemas/RolePermission_aggregate_bool_exp_count"
          }
        },
        "title": "RolePermission_aggregate_bool_exp",
        "type": "object"
      },
      "Permission_bool_exp!": {
        "description": "Boolean expression to filter rows from the table \"Permission\". All fields are combined with a logical 'AND'.",
        "nullable": false,
        "properties": {
          "RolePermissions": {
            "$ref": "#/components/schemas/RolePermission_bool_exp"
          },
          "RolePermissions_aggregate": {
            "$ref": "#/components/schemas/RolePermission_aggregate_bool_exp"
          },
          "_PermissionToRoles": {
            "$ref": "#/components/schemas/_PermissionToRole_bool_exp"
          },
          "_PermissionToRoles_aggregate": {
            "$ref": "#/components/schemas/_PermissionToRole_aggregate_bool_exp"
          },
          "_and": {
            "items": {
              "$ref": "#/components/schemas/Permission_bool_exp!"
            },
            "nullable": true,
            "type": "array"
          },
          "_not": {
            "$ref": "#/components/schemas/Permission_bool_exp"
          },
          "_or": {
            "items": {
              "$ref": "#/components/schemas/Permission_bool_exp!"
            },
            "nullable": true,
            "type": "array"
          },
          "code": {
            "$ref": "#/components/schemas/String_comparison_exp"
          },
          "createdAt": {
            "$ref": "#/components/schemas/timestamp_comparison_exp"
          },
          "description": {
            "$ref": "#/components/schemas/String_comparison_exp"
          },
          "id": {
            "$ref": "#/components/schemas/uuid_comparison_exp"
          },
          "name": {
            "$ref": "#/components/schemas/String_comparison_exp"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/timestamp_comparison_exp"
          }
        },
        "title": "Permission_bool_exp",
        "type": "object"
      },
      "Permission_bool_exp": {
        "description": "Boolean expression to filter rows from the table \"Permission\". All fields are combined with a logical 'AND'.",
        "nullable": true,
        "properties": {
          "RolePermissions": {
            "$ref": "#/components/schemas/RolePermission_bool_exp"
          },
          "RolePermissions_aggregate": {
            "$ref": "#/components/schemas/RolePermission_aggregate_bool_exp"
          },
          "_PermissionToRoles": {
            "$ref": "#/components/schemas/_PermissionToRole_bool_exp"
          },
          "_PermissionToRoles_aggregate": {
            "$ref": "#/components/schemas/_PermissionToRole_aggregate_bool_exp"
          },
          "_and": {
            "items": {
              "$ref": "#/components/schemas/Permission_bool_exp!"
            },
            "nullable": true,
            "type": "array"
          },
          "_not": {
            "$ref": "#/components/schemas/Permission_bool_exp"
          },
          "_or": {
            "items": {
              "$ref": "#/components/schemas/Permission_bool_exp!"
            },
            "nullable": true,
            "type": "array"
          },
          "code": {
            "$ref": "#/components/schemas/String_comparison_exp"
          },
          "createdAt": {
            "$ref": "#/components/schemas/timestamp_comparison_exp"
          },
          "description": {
            "$ref": "#/components/schemas/String_comparison_exp"
          },
          "id": {
            "$ref": "#/components/schemas/uuid_comparison_exp"
          },
          "name": {
            "$ref": "#/components/schemas/String_comparison_exp"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/timestamp_comparison_exp"
          }
        },
        "title": "Permission_bool_exp",
        "type": "object"
      },
      "_PermissionToRole_bool_exp!": {
        "description": "Boolean expression to filter rows from the table \"_PermissionToRole\". All fields are combined with a logical 'AND'.",
        "nullable": false,
        "properties": {
          "A": {
            "$ref": "#/components/schemas/uuid_comparison_exp"
          },
          "B": {
            "$ref": "#/components/schemas/uuid_comparison_exp"
          },
          "Permission": {
            "$ref": "#/components/schemas/Permission_bool_exp"
          },
          "Role": {
            "$ref": "#/components/schemas/Role_bool_exp"
          },
          "_and": {
            "items": {
              "$ref": "#/components/schemas/_PermissionToRole_bool_exp!"
            },
            "nullable": true,
            "type": "array"
          },
          "_not": {
            "$ref": "#/components/schemas/_PermissionToRole_bool_exp"
          },
          "_or": {
            "items": {
              "$ref": "#/components/schemas/_PermissionToRole_bool_exp!"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "title": "_PermissionToRole_bool_exp",
        "type": "object"
      },
      "_PermissionToRole_bool_exp": {
        "description": "Boolean expression to filter rows from the table \"_PermissionToRole\". All fields are combined with a logical 'AND'.",
        "nullable": true,
        "properties": {
          "A": {
            "$ref": "#/components/schemas/uuid_comparison_exp"
          },
          "B": {
            "$ref": "#/components/schemas/uuid_comparison_exp"
          },
          "Permission": {
            "$ref": "#/components/schemas/Permission_bool_exp"
          },
          "Role": {
            "$ref": "#/components/schemas/Role_bool_exp"
          },
          "_and": {
            "items": {
              "$ref": "#/components/schemas/_PermissionToRole_bool_exp!"
            },
            "nullable": true,
            "type": "array"
          },
          "_not": {
            "$ref": "#/components/schemas/_PermissionToRole_bool_exp"
          },
          "_or": {
            "items": {
              "$ref": "#/components/schemas/_PermissionToRole_bool_exp!"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "title": "_PermissionToRole_bool_exp",
        "type": "object"
      },
      "_PermissionToRole_constraint!": {
        "description": "unique or primary key constraints on table \"_PermissionToRole\"",
        "enum": [
          "_PermissionToRole_AB_pkey"
        ],
        "nullable": false,
        "title": "_PermissionToRole_constraint"
      },
      "_PermissionToRole_on_conflict": {
        "description": "on_conflict condition type for table \"_PermissionToRole\"",
        "nullable": true,
        "properties": {
          "constraint": {
            "$ref": "#/components/schemas/_PermissionToRole_constraint!"
          },
          "update_columns": {
            "items": {
              "$ref": "#/components/schemas/_PermissionToRole_update_column!"
            },
            "nullable": false,
            "type": "array"
          },
          "where": {
            "$ref": "#/components/schemas/_PermissionToRole_bool_exp"
          }
        },
        "title": "_PermissionToRole_on_conflict",
        "type": "object"
      },
      "_PermissionToRole_arr_rel_insert_input": {
        "description": "input type for inserting array relation for remote table \"_PermissionToRole\"",
        "nullable": true,
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/_PermissionToRole_insert_input!"
            },
            "nullable": false,
            "type": "array"
          },
          "on_conflict": {
            "$ref": "#/components/schemas/_PermissionToRole_on_conflict"
          }
        },
        "title": "_PermissionToRole_arr_rel_insert_input",
        "type": "object"
      },
      "Permission_insert_input!": {
        "description": "input type for inserting data into table \"Permission\"",
        "nullable": false,
        "properties": {
          "RolePermissions": {
            "$ref": "#/components/schemas/RolePermission_arr_rel_insert_input"
          },
          "_PermissionToRoles": {
            "$ref": "#/components/schemas/_PermissionToRole_arr_rel_insert_input"
          },
          "code": {
            "nullable": true,
            "title": "String",
            "type": "string"
          },
          "createdAt": {
            "$ref": "#/components/schemas/timestamp"
          },
          "description": {
            "nullable": true,
            "title": "String",
            "type": "string"
          },
          "id": {
            "$ref": "#/components/schemas/uuid"
          },
          "name": {
            "nullable": true,
            "title": "String",
            "type": "string"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/timestamp"
          }
        },
        "title": "Permission_insert_input",
        "type": "object"
      },
      "Permission_update_column!": {
        "description": "update columns of table \"Permission\"",
        "enum": [
          "code",
          "createdAt",
          "description",
          "id",
          "name",
          "updatedAt"
        ],
        "nullable": false,
        "title": "Permission_update_column"
      },
      "Permission_constraint!": {
        "description": "unique or primary key constraints on table \"Permission\"",
        "enum": [
          "Permission_code_key",
          "Permission_pkey"
        ],
        "nullable": false,
        "title": "Permission_constraint"
      },
      "Permission_on_conflict": {
        "description": "on_conflict condition type for table \"Permission\"",
        "nullable": true,
        "properties": {
          "constraint": {
            "$ref": "#/components/schemas/Permission_constraint!"
          },
          "update_columns": {
            "items": {
              "$ref": "#/components/schemas/Permission_update_column!"
            },
            "nullable": false,
            "type": "array"
          },
          "where": {
            "$ref": "#/components/schemas/Permission_bool_exp"
          }
        },
        "title": "Permission_on_conflict",
        "type": "object"
      },
      "Permission_obj_rel_insert_input": {
        "description": "input type for inserting object relation for remote table \"Permission\"",
        "nullable": true,
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Permission_insert_input!"
          },
          "on_conflict": {
            "$ref": "#/components/schemas/Permission_on_conflict"
          }
        },
        "title": "Permission_obj_rel_insert_input",
        "type": "object"
      },
      "RolePermission_insert_input!": {
        "description": "input type for inserting data into table \"RolePermission\"",
        "nullable": false,
        "properties": {
          "Permission": {
            "$ref": "#/components/schemas/Permission_obj_rel_insert_input"
          },
          "Role": {
            "$ref": "#/components/schemas/Role_obj_rel_insert_input"
          },
          "permissionId": {
            "$ref": "#/components/schemas/uuid"
          },
          "roleId": {
            "$ref": "#/components/schemas/uuid"
          }
        },
        "title": "RolePermission_insert_input",
        "type": "object"
      },
      "RolePermission_update_column!": {
        "description": "update columns of table \"RolePermission\"",
        "enum": [
          "permissionId",
          "roleId"
        ],
        "nullable": false,
        "title": "RolePermission_update_column"
      },
      "RolePermission_constraint!": {
        "description": "unique or primary key constraints on table \"RolePermission\"",
        "enum": [
          "RolePermission_pkey"
        ],
        "nullable": false,
        "title": "RolePermission_constraint"
      },
      "RolePermission_on_conflict": {
        "description": "on_conflict condition type for table \"RolePermission\"",
        "nullable": true,
        "properties": {
          "constraint": {
            "$ref": "#/components/schemas/RolePermission_constraint!"
          },
          "update_columns": {
            "items": {
              "$ref": "#/components/schemas/RolePermission_update_column!"
            },
            "nullable": false,
            "type": "array"
          },
          "where": {
            "$ref": "#/components/schemas/RolePermission_bool_exp"
          }
        },
        "title": "RolePermission_on_conflict",
        "type": "object"
      },
      "RolePermission_arr_rel_insert_input": {
        "description": "input type for inserting array relation for remote table \"RolePermission\"",
        "nullable": true,
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/RolePermission_insert_input!"
            },
            "nullable": false,
            "type": "array"
          },
          "on_conflict": {
            "$ref": "#/components/schemas/RolePermission_on_conflict"
          }
        },
        "title": "RolePermission_arr_rel_insert_input",
        "type": "object"
      },
      "_RoleToUser_insert_input!": {
        "description": "input type for inserting data into table \"_RoleToUser\"",
        "nullable": false,
        "properties": {
          "A": {
            "$ref": "#/components/schemas/uuid"
          },
          "B": {
            "$ref": "#/components/schemas/uuid"
          },
          "Role": {
            "$ref": "#/components/schemas/Role_obj_rel_insert_input"
          },
          "User": {
            "$ref": "#/components/schemas/User_obj_rel_insert_input"
          }
        },
        "title": "_RoleToUser_insert_input",
        "type": "object"
      },
      "_RoleToUser_update_column!": {
        "description": "update columns of table \"_RoleToUser\"",
        "enum": [
          "A",
          "B"
        ],
        "nullable": false,
        "title": "_RoleToUser_update_column"
      },
      "_RoleToUser_constraint!": {
        "description": "unique or primary key constraints on table \"_RoleToUser\"",
        "enum": [
          "_RoleToUser_AB_pkey"
        ],
        "nullable": false,
        "title": "_RoleToUser_constraint"
      },
      "_RoleToUser_on_conflict": {
        "description": "on_conflict condition type for table \"_RoleToUser\"",
        "nullable": true,
        "properties": {
          "constraint": {
            "$ref": "#/components/schemas/_RoleToUser_constraint!"
          },
          "update_columns": {
            "items": {
              "$ref": "#/components/schemas/_RoleToUser_update_column!"
            },
            "nullable": false,
            "type": "array"
          },
          "where": {
            "$ref": "#/components/schemas/_RoleToUser_bool_exp"
          }
        },
        "title": "_RoleToUser_on_conflict",
        "type": "object"
      },
      "_RoleToUser_arr_rel_insert_input": {
        "description": "input type for inserting array relation for remote table \"_RoleToUser\"",
        "nullable": true,
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/_RoleToUser_insert_input!"
            },
            "nullable": false,
            "type": "array"
          },
          "on_conflict": {
            "$ref": "#/components/schemas/_RoleToUser_on_conflict"
          }
        },
        "title": "_RoleToUser_arr_rel_insert_input",
        "type": "object"
      },
      "Role_insert_input!": {
        "description": "input type for inserting data into table \"Role\"",
        "nullable": false,
        "properties": {
          "RolePermissions": {
            "$ref": "#/components/schemas/RolePermission_arr_rel_insert_input"
          },
          "UserRoles": {
            "$ref": "#/components/schemas/UserRole_arr_rel_insert_input"
          },
          "_PermissionToRoles": {
            "$ref": "#/components/schemas/_PermissionToRole_arr_rel_insert_input"
          },
          "_RoleToUsers": {
            "$ref": "#/components/schemas/_RoleToUser_arr_rel_insert_input"
          },
          "createdAt": {
            "$ref": "#/components/schemas/timestamp"
          },
          "description": {
            "nullable": true,
            "title": "String",
            "type": "string"
          },
          "id": {
            "$ref": "#/components/schemas/uuid"
          },
          "name": {
            "nullable": true,
            "title": "String",
            "type": "string"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/timestamp"
          }
        },
        "title": "Role_insert_input",
        "type": "object"
      },
      "Role_update_column!": {
        "description": "update columns of table \"Role\"",
        "enum": [
          "createdAt",
          "description",
          "id",
          "name",
          "updatedAt"
        ],
        "nullable": false,
        "title": "Role_update_column"
      },
      "Role_constraint!": {
        "description": "unique or primary key constraints on table \"Role\"",
        "enum": [
          "Role_pkey"
        ],
        "nullable": false,
        "title": "Role_constraint"
      },
      "Role_on_conflict": {
        "description": "on_conflict condition type for table \"Role\"",
        "nullable": true,
        "properties": {
          "constraint": {
            "$ref": "#/components/schemas/Role_constraint!"
          },
          "update_columns": {
            "items": {
              "$ref": "#/components/schemas/Role_update_column!"
            },
            "nullable": false,
            "type": "array"
          },
          "where": {
            "$ref": "#/components/schemas/Role_bool_exp"
          }
        },
        "title": "Role_on_conflict",
        "type": "object"
      },
      "Role_obj_rel_insert_input": {
        "description": "input type for inserting object relation for remote table \"Role\"",
        "nullable": true,
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Role_insert_input!"
          },
          "on_conflict": {
            "$ref": "#/components/schemas/Role_on_conflict"
          }
        },
        "title": "Role_obj_rel_insert_input",
        "type": "object"
      },
      "UserRole_insert_input!": {
        "description": "input type for inserting data into table \"UserRole\"",
        "nullable": false,
        "properties": {
          "Role": {
            "$ref": "#/components/schemas/Role_obj_rel_insert_input"
          },
          "User": {
            "$ref": "#/components/schemas/User_obj_rel_insert_input"
          },
          "roleId": {
            "$ref": "#/components/schemas/uuid"
          },
          "userId": {
            "$ref": "#/components/schemas/uuid"
          }
        },
        "title": "UserRole_insert_input",
        "type": "object"
      },
      "UserRole_update_column!": {
        "description": "update columns of table \"UserRole\"",
        "enum": [
          "roleId",
          "userId"
        ],
        "nullable": false,
        "title": "UserRole_update_column"
      },
      "UserRole_constraint!": {
        "description": "unique or primary key constraints on table \"UserRole\"",
        "enum": [
          "UserRole_pkey"
        ],
        "nullable": false,
        "title": "UserRole_constraint"
      },
      "UserRole_on_conflict": {
        "description": "on_conflict condition type for table \"UserRole\"",
        "nullable": true,
        "properties": {
          "constraint": {
            "$ref": "#/components/schemas/UserRole_constraint!"
          },
          "update_columns": {
            "items": {
              "$ref": "#/components/schemas/UserRole_update_column!"
            },
            "nullable": false,
            "type": "array"
          },
          "where": {
            "$ref": "#/components/schemas/UserRole_bool_exp"
          }
        },
        "title": "UserRole_on_conflict",
        "type": "object"
      },
      "UserRole_arr_rel_insert_input": {
        "description": "input type for inserting array relation for remote table \"UserRole\"",
        "nullable": true,
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/UserRole_insert_input!"
            },
            "nullable": false,
            "type": "array"
          },
          "on_conflict": {
            "$ref": "#/components/schemas/UserRole_on_conflict"
          }
        },
        "title": "UserRole_arr_rel_insert_input",
        "type": "object"
      },
      "Authenticator_insert_input!": {
        "description": "input type for inserting data into table \"Authenticator\"",
        "nullable": false,
        "properties": {
          "User": {
            "$ref": "#/components/schemas/User_obj_rel_insert_input"
          },
          "counter": {
            "nullable": true,
            "title": "Int",
            "type": "integer"
          },
          "credentialBackedUp": {
            "nullable": true,
            "title": "Boolean",
            "type": "boolean"
          },
          "credentialDeviceType": {
            "nullable": true,
            "title": "String",
            "type": "string"
          },
          "credentialID": {
            "nullable": true,
            "title": "String",
            "type": "string"
          },
          "credentialPublicKey": {
            "nullable": true,
            "title": "String",
            "type": "string"
          },
          "providerAccountId": {
            "nullable": true,
            "title": "String",
            "type": "string"
          },
          "transports": {
            "nullable": true,
            "title": "String",
            "type": "string"
          },
          "userId": {
            "$ref": "#/components/schemas/uuid"
          }
        },
        "title": "Authenticator_insert_input",
        "type": "object"
      },
      "Authenticator_update_column!": {
        "description": "update columns of table \"Authenticator\"",
        "enum": [
          "counter",
          "credentialBackedUp",
          "credentialDeviceType",
          "credentialID",
          "credentialPublicKey",
          "providerAccountId",
          "transports",
          "userId"
        ],
        "nullable": false,
        "title": "Authenticator_update_column"
      },
      "Authenticator_constraint!": {
        "description": "unique or primary key constraints on table \"Authenticator\"",
        "enum": [
          "Authenticator_credentialID_key",
          "Authenticator_pkey"
        ],
        "nullable": false,
        "title": "Authenticator_constraint"
      },
      "Authenticator_on_conflict": {
        "description": "on_conflict condition type for table \"Authenticator\"",
        "nullable": true,
        "properties": {
          "constraint": {
            "$ref": "#/components/schemas/Authenticator_constraint!"
          },
          "update_columns": {
            "items": {
              "$ref": "#/components/schemas/Authenticator_update_column!"
            },
            "nullable": false,
            "type": "array"
          },
          "where": {
            "$ref": "#/components/schemas/Authenticator_bool_exp"
          }
        },
        "title": "Authenticator_on_conflict",
        "type": "object"
      },
      "Authenticator_arr_rel_insert_input": {
        "description": "input type for inserting array relation for remote table \"Authenticator\"",
        "nullable": true,
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Authenticator_insert_input!"
            },
            "nullable": false,
            "type": "array"
          },
          "on_conflict": {
            "$ref": "#/components/schemas/Authenticator_on_conflict"
          }
        },
        "title": "Authenticator_arr_rel_insert_input",
        "type": "object"
      },
      "Session_update_column!": {
        "description": "update columns of table \"Session\"",
        "enum": [
          "createdAt",
          "expires",
          "sessionToken",
          "updatedAt",
          "userId"
        ],
        "nullable": false,
        "title": "Session_update_column"
      },
      "Session_constraint!": {
        "description": "unique or primary key constraints on table \"Session\"",
        "enum": [
          "Session_sessionToken_key"
        ],
        "nullable": false,
        "title": "Session_constraint"
      },
      "Session_on_conflict": {
        "description": "on_conflict condition type for table \"Session\"",
        "nullable": true,
        "properties": {
          "constraint": {
            "$ref": "#/components/schemas/Session_constraint!"
          },
          "update_columns": {
            "items": {
              "$ref": "#/components/schemas/Session_update_column!"
            },
            "nullable": false,
            "type": "array"
          },
          "where": {
            "$ref": "#/components/schemas/Session_bool_exp"
          }
        },
        "title": "Session_on_conflict",
        "type": "object"
      },
      "Session_arr_rel_insert_input": {
        "description": "input type for inserting array relation for remote table \"Session\"",
        "nullable": true,
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Session_insert_input!"
            },
            "nullable": false,
            "type": "array"
          },
          "on_conflict": {
            "$ref": "#/components/schemas/Session_on_conflict"
          }
        },
        "title": "Session_arr_rel_insert_input",
        "type": "object"
      },
      "Account_insert_input!": {
        "description": "input type for inserting data into table \"Account\"",
        "nullable": false,
        "properties": {
          "User": {
            "$ref": "#/components/schemas/User_obj_rel_insert_input"
          },
          "access_token": {
            "nullable": true,
            "title": "String",
            "type": "string"
          },
          "createdAt": {
            "$ref": "#/components/schemas/timestamp"
          },
          "expires_at": {
            "nullable": true,
            "title": "Int",
            "type": "integer"
          },
          "id_token": {
            "nullable": true,
            "title": "String",
            "type": "string"
          },
          "provider": {
            "nullable": true,
            "title": "String",
            "type": "string"
          },
          "providerAccountId": {
            "nullable": true,
            "title": "String",
            "type": "string"
          },
          "refresh_token": {
            "nullable": true,
            "title": "String",
            "type": "string"
          },
          "scope": {
            "nullable": true,
            "title": "String",
            "type": "string"
          },
          "session_state": {
            "nullable": true,
            "title": "String",
            "type": "string"
          },
          "token_type": {
            "nullable": true,
            "title": "String",
            "type": "string"
          },
          "type": {
            "nullable": true,
            "title": "String",
            "type": "string"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/timestamp"
          },
          "userId": {
            "$ref": "#/components/schemas/uuid"
          }
        },
        "title": "Account_insert_input",
        "type": "object"
      },
      "Account_update_column!": {
        "description": "update columns of table \"Account\"",
        "enum": [
          "access_token",
          "createdAt",
          "expires_at",
          "id_token",
          "provider",
          "providerAccountId",
          "refresh_token",
          "scope",
          "session_state",
          "token_type",
          "type",
          "updatedAt",
          "userId"
        ],
        "nullable": false,
        "title": "Account_update_column"
      },
      "Account_constraint!": {
        "description": "unique or primary key constraints on table \"Account\"",
        "enum": [
          "Account_pkey"
        ],
        "nullable": false,
        "title": "Account_constraint"
      },
      "Account_on_conflict": {
        "description": "on_conflict condition type for table \"Account\"",
        "nullable": true,
        "properties": {
          "constraint": {
            "$ref": "#/components/schemas/Account_constraint!"
          },
          "update_columns": {
            "items": {
              "$ref": "#/components/schemas/Account_update_column!"
            },
            "nullable": false,
            "type": "array"
          },
          "where": {
            "$ref": "#/components/schemas/Account_bool_exp"
          }
        },
        "title": "Account_on_conflict",
        "type": "object"
      },
      "Account_arr_rel_insert_input": {
        "description": "input type for inserting array relation for remote table \"Account\"",
        "nullable": true,
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Account_insert_input!"
            },
            "nullable": false,
            "type": "array"
          },
          "on_conflict": {
            "$ref": "#/components/schemas/Account_on_conflict"
          }
        },
        "title": "Account_arr_rel_insert_input",
        "type": "object"
      },
      "User_insert_input!": {
        "description": "input type for inserting data into table \"User\"",
        "nullable": false,
        "properties": {
          "Accounts": {
            "$ref": "#/components/schemas/Account_arr_rel_insert_input"
          },
          "Authenticators": {
            "$ref": "#/components/schemas/Authenticator_arr_rel_insert_input"
          },
          "Sessions": {
            "$ref": "#/components/schemas/Session_arr_rel_insert_input"
          },
          "UserRoles": {
            "$ref": "#/components/schemas/UserRole_arr_rel_insert_input"
          },
          "_RoleToUsers": {
            "$ref": "#/components/schemas/_RoleToUser_arr_rel_insert_input"
          },
          "createdAt": {
            "$ref": "#/components/schemas/timestamp"
          },
          "email": {
            "nullable": true,
            "title": "String",
            "type": "string"
          },
          "emailVerified": {
            "$ref": "#/components/schemas/timestamp"
          },
          "id": {
            "$ref": "#/components/schemas/uuid"
          },
          "image": {
            "nullable": true,
            "title": "String",
            "type": "string"
          },
          "name": {
            "nullable": true,
            "title": "String",
            "type": "string"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/timestamp"
          }
        },
        "title": "User_insert_input",
        "type": "object"
      },
      "User_update_column!": {
        "description": "update columns of table \"User\"",
        "enum": [
          "createdAt",
          "email",
          "emailVerified",
          "id",
          "image",
          "name",
          "updatedAt"
        ],
        "nullable": false,
        "title": "User_update_column"
      },
      "User_constraint!": {
        "description": "unique or primary key constraints on table \"User\"",
        "enum": [
          "User_email_key",
          "User_pkey"
        ],
        "nullable": false,
        "title": "User_constraint"
      },
      "User_on_conflict": {
        "description": "on_conflict condition type for table \"User\"",
        "nullable": true,
        "properties": {
          "constraint": {
            "$ref": "#/components/schemas/User_constraint!"
          },
          "update_columns": {
            "items": {
              "$ref": "#/components/schemas/User_update_column!"
            },
            "nullable": false,
            "type": "array"
          },
          "where": {
            "$ref": "#/components/schemas/User_bool_exp"
          }
        },
        "title": "User_on_conflict",
        "type": "object"
      },
      "User_obj_rel_insert_input": {
        "description": "input type for inserting object relation for remote table \"User\"",
        "nullable": true,
        "properties": {
          "data": {
            "$ref": "#/components/schemas/User_insert_input!"
          },
          "on_conflict": {
            "$ref": "#/components/schemas/User_on_conflict"
          }
        },
        "title": "User_obj_rel_insert_input",
        "type": "object"
      },
      "Session_insert_input!": {
        "description": "input type for inserting data into table \"Session\"",
        "nullable": false,
        "properties": {
          "User": {
            "$ref": "#/components/schemas/User_obj_rel_insert_input"
          },
          "createdAt": {
            "$ref": "#/components/schemas/timestamp"
          },
          "expires": {
            "$ref": "#/components/schemas/timestamp"
          },
          "sessionToken": {
            "nullable": true,
            "title": "String",
            "type": "string"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/timestamp"
          },
          "userId": {
            "$ref": "#/components/schemas/uuid"
          }
        },
        "title": "Session_insert_input",
        "type": "object"
      },
      "freelances_set_input!": {
        "description": "input type for updating data in table \"freelances\"",
        "nullable": false,
        "properties": {
          "created_at": {
            "$ref": "#/components/schemas/timestamp"
          },
          "daily_rate": {
            "$ref": "#/components/schemas/numeric"
          },
          "email": {
            "nullable": true,
            "title": "String",
            "type": "string"
          },
          "id": {
            "$ref": "#/components/schemas/uuid"
          },
          "updated_at": {
            "$ref": "#/components/schemas/timestamp"
          }
        },
        "title": "freelances_set_input",
        "type": "object"
      },
      "clients_set_input!": {
        "description": "input type for updating data in table \"clients\"",
        "nullable": false,
        "properties": {
          "created_at": {
            "$ref": "#/components/schemas/timestamp"
          },
          "email": {
            "nullable": true,
            "title": "String",
            "type": "string"
          },
          "id": {
            "$ref": "#/components/schemas/uuid"
          },
          "name": {
            "nullable": true,
            "title": "String",
            "type": "string"
          },
          "phone": {
            "nullable": true,
            "title": "String",
            "type": "string"
          },
          "updated_at": {
            "$ref": "#/components/schemas/timestamp"
          }
        },
        "title": "clients_set_input",
        "type": "object"
      },
      "projects_set_input!": {
        "description": "input type for updating data in table \"projects\"",
        "nullable": false,
        "properties": {
          "created_at": {
            "$ref": "#/components/schemas/timestamp"
          },
          "description": {
            "nullable": true,
            "title": "String",
            "type": "string"
          },
          "end_date": {
            "$ref": "#/components/schemas/timestamp"
          },
          "id": {
            "$ref": "#/components/schemas/uuid"
          },
          "is_active": {
            "nullable": true,
            "title": "Boolean",
            "type": "boolean"
          },
          "name": {
            "nullable": true,
            "title": "String",
            "type": "string"
          },
          "start_date": {
            "$ref": "#/components/schemas/timestamp"
          },
          "updated_at": {
            "$ref": "#/components/schemas/timestamp"
          }
        },
        "title": "projects_set_input",
        "type": "object"
      },
      "projects_tasks_set_input!": {
        "description": "input type for updating data in table \"projects_tasks\"",
        "nullable": false,
        "properties": {
          "created_at": {
            "$ref": "#/components/schemas/timestamp"
          },
          "date": {
            "$ref": "#/components/schemas/timestamp"
          },
          "id": {
            "$ref": "#/components/schemas/uuid"
          },
          "project_id": {
            "$ref": "#/components/schemas/uuid"
          },
          "task_description": {
            "nullable": true,
            "title": "String",
            "type": "string"
          },
          "updated_at": {
            "$ref": "#/components/schemas/timestamp"
          }
        },
        "title": "projects_tasks_set_input",
        "type": "object"
      },
      "Role_set_input!": {
        "description": "input type for updating data in table \"Role\"",
        "nullable": false,
        "properties": {
          "createdAt": {
            "$ref": "#/components/schemas/timestamp"
          },
          "description": {
            "nullable": true,
            "title": "String",
            "type": "string"
          },
          "id": {
            "$ref": "#/components/schemas/uuid"
          },
          "name": {
            "nullable": true,
            "title": "String",
            "type": "string"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/timestamp"
          }
        },
        "title": "Role_set_input",
        "type": "object"
      },
      "Permission_set_input!": {
        "description": "input type for updating data in table \"Permission\"",
        "nullable": false,
        "properties": {
          "code": {
            "nullable": true,
            "title": "String",
            "type": "string"
          },
          "createdAt": {
            "$ref": "#/components/schemas/timestamp"
          },
          "description": {
            "nullable": true,
            "title": "String",
            "type": "string"
          },
          "id": {
            "$ref": "#/components/schemas/uuid"
          },
          "name": {
            "nullable": true,
            "title": "String",
            "type": "string"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/timestamp"
          }
        },
        "title": "Permission_set_input",
        "type": "object"
      },
      "User_set_input!": {
        "description": "input type for updating data in table \"User\"",
        "nullable": false,
        "properties": {
          "createdAt": {
            "$ref": "#/components/schemas/timestamp"
          },
          "email": {
            "nullable": true,
            "title": "String",
            "type": "string"
          },
          "emailVerified": {
            "$ref": "#/components/schemas/timestamp"
          },
          "id": {
            "$ref": "#/components/schemas/uuid"
          },
          "image": {
            "nullable": true,
            "title": "String",
            "type": "string"
          },
          "name": {
            "nullable": true,
            "title": "String",
            "type": "string"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/timestamp"
          }
        },
        "title": "User_set_input",
        "type": "object"
      },
      "Account_set_input!": {
        "description": "input type for updating data in table \"Account\"",
        "nullable": false,
        "properties": {
          "access_token": {
            "nullable": true,
            "title": "String",
            "type": "string"
          },
          "createdAt": {
            "$ref": "#/components/schemas/timestamp"
          },
          "expires_at": {
            "nullable": true,
            "title": "Int",
            "type": "integer"
          },
          "id_token": {
            "nullable": true,
            "title": "String",
            "type": "string"
          },
          "provider": {
            "nullable": true,
            "title": "String",
            "type": "string"
          },
          "providerAccountId": {
            "nullable": true,
            "title": "String",
            "type": "string"
          },
          "refresh_token": {
            "nullable": true,
            "title": "String",
            "type": "string"
          },
          "scope": {
            "nullable": true,
            "title": "String",
            "type": "string"
          },
          "session_state": {
            "nullable": true,
            "title": "String",
            "type": "string"
          },
          "token_type": {
            "nullable": true,
            "title": "String",
            "type": "string"
          },
          "type": {
            "nullable": true,
            "title": "String",
            "type": "string"
          },
          "updatedAt": {
            "$ref": "#/components/schemas/timestamp"
          },
          "userId": {
            "$ref": "#/components/schemas/uuid"
          }
        },
        "title": "Account_set_input",
        "type": "object"
      },
      "UserRole_set_input!": {
        "description": "input type for updating data in table \"UserRole\"",
        "nullable": false,
        "properties": {
          "roleId": {
            "$ref": "#/components/schemas/uuid"
          },
          "userId": {
            "$ref": "#/components/schemas/uuid"
          }
        },
        "title": "UserRole_set_input",
        "type": "object"
      },
      "Authenticator_set_input!": {
        "description": "input type for updating data in table \"Authenticator\"",
        "nullable": false,
        "properties": {
          "counter": {
            "nullable": true,
            "title": "Int",
            "type": "integer"
          },
          "credentialBackedUp": {
            "nullable": true,
            "title": "Boolean",
            "type": "boolean"
          },
          "credentialDeviceType": {
            "nullable": true,
            "title": "String",
            "type": "string"
          },
          "credentialID": {
            "nullable": true,
            "title": "String",
            "type": "string"
          },
          "credentialPublicKey": {
            "nullable": true,
            "title": "String",
            "type": "string"
          },
          "providerAccountId": {
            "nullable": true,
            "title": "String",
            "type": "string"
          },
          "transports": {
            "nullable": true,
            "title": "String",
            "type": "string"
          },
          "userId": {
            "$ref": "#/components/schemas/uuid"
          }
        },
        "title": "Authenticator_set_input",
        "type": "object"
      }
    }
  },
  "openapi": "3.0.0"
}