/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/rest/projects-tasks/project/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * projects_tasks_by_project_id
         * @description ***
         *     The GraphQl query for this endpoint is:
         *     ``` graphql
         *     query projects_tasks_by_project_id($id: uuid!) {
         *       projects_tasks(where: {project_id: {_eq: $id}}) {
         *         id
         *         project_id
         *         task_description
         *         updated_at
         *         date
         *         created_at
         *       }
         *     }
         *     ```
         */
        get: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Your x-hasura-admin-secret will be used for authentication of the API request. */
                    "x-hasura-admin-secret"?: string;
                };
                path: {
                    /** @description _"id" is required (enter it either in parameters or request body)_ */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Query parameters can also be provided in the request body as a JSON object */
            requestBody?: {
                content: {
                    "application/json": {
                        id?: components["schemas"]["uuid!"];
                    };
                };
            };
            responses: {
                /** @description Responses for GET /api/rest/projects-tasks/project/{id} */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            projects_tasks?: {
                                created_at?: components["schemas"]["timestamp!"];
                                date?: components["schemas"]["timestamp"];
                                id?: components["schemas"]["uuid!"];
                                project_id?: components["schemas"]["uuid!"];
                                /** String */
                                task_description?: string | null;
                                updated_at?: components["schemas"]["timestamp"];
                            }[];
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/timesheets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * timesheets
         * @description ***
         *     The GraphQl query for this endpoint is:
         *     ``` graphql
         *     query timesheets {
         *       timesheets {
         *         client_id
         *         created_at
         *         freelance_id
         *         id
         *         project_task_id
         *         updated_at
         *         working_date
         *         working_duration
         *         working_unit
         *       }
         *     }
         *
         *     ```
         */
        get: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Your x-hasura-admin-secret will be used for authentication of the API request. */
                    "x-hasura-admin-secret"?: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Responses for GET /api/rest/timesheets */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            timesheets?: {
                                client_id?: components["schemas"]["uuid!"];
                                created_at?: components["schemas"]["timestamp!"];
                                freelance_id?: components["schemas"]["uuid!"];
                                id?: components["schemas"]["uuid!"];
                                project_task_id?: components["schemas"]["uuid!"];
                                updated_at?: components["schemas"]["timestamp"];
                                /** String */
                                working_date?: string;
                            }[];
                        };
                    };
                };
            };
        };
        put?: never;
        /**
         * insert_timesheets_one
         * @description ***
         *     The GraphQl query for this endpoint is:
         *     ``` graphql
         *     mutation insert_timesheets_one($object: timesheets_insert_input!) {
         *       insert_timesheets_one(object: $object) {
         *         client_id
         *         created_at
         *         freelance_id
         *         id
         *         project_task_id
         *         updated_at
         *         working_date
         *         working_duration
         *         working_unit
         *       }
         *     }
         *
         *     ```
         */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Your x-hasura-admin-secret will be used for authentication of the API request. */
                    "x-hasura-admin-secret"?: string;
                };
                path?: never;
                cookie?: never;
            };
            /** @description Query parameters can also be provided in the request body as a JSON object */
            requestBody: {
                content: {
                    "application/json": {
                        object?: components["schemas"]["timesheets_insert_input!"];
                    };
                };
            };
            responses: {
                /** @description Responses for POST /api/rest/timesheets */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * timesheets
                             * @description columns and relationships of "timesheets"
                             */
                            insert_timesheets_one?: {
                                client_id?: components["schemas"]["uuid!"];
                                created_at?: components["schemas"]["timestamp!"];
                                freelance_id?: components["schemas"]["uuid!"];
                                id?: components["schemas"]["uuid!"];
                                project_task_id?: components["schemas"]["uuid!"];
                                updated_at?: components["schemas"]["timestamp"];
                                /** String */
                                working_date?: string;
                            } | null;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/timesheets/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * timesheets_by_pk
         * @description ***
         *     The GraphQl query for this endpoint is:
         *     ``` graphql
         *     query timesheets_by_pk($id: uuid!) {
         *       timesheets_by_pk(id: $id) {
         *         client_id
         *         created_at
         *         freelance_id
         *         id
         *         project_task_id
         *         updated_at
         *         working_date
         *         working_duration
         *         working_unit
         *       }
         *     }
         *
         *     ```
         */
        get: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Your x-hasura-admin-secret will be used for authentication of the API request. */
                    "x-hasura-admin-secret"?: string;
                };
                path: {
                    /** @description _"id" is required (enter it either in parameters or request body)_ */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Query parameters can also be provided in the request body as a JSON object */
            requestBody?: {
                content: {
                    "application/json": {
                        id?: components["schemas"]["uuid!"];
                    };
                };
            };
            responses: {
                /** @description Responses for GET /api/rest/timesheets/{id} */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * timesheets
                             * @description columns and relationships of "timesheets"
                             */
                            timesheets_by_pk?: {
                                client_id?: components["schemas"]["uuid!"];
                                created_at?: components["schemas"]["timestamp!"];
                                freelance_id?: components["schemas"]["uuid!"];
                                id?: components["schemas"]["uuid!"];
                                project_task_id?: components["schemas"]["uuid!"];
                                updated_at?: components["schemas"]["timestamp"];
                                /** String */
                                working_date?: string;
                            } | null;
                        };
                    };
                };
            };
        };
        put?: never;
        /**
         * update_timesheets_by_pk
         * @description ***
         *     The GraphQl query for this endpoint is:
         *     ``` graphql
         *     mutation update_timesheets_by_pk($id: uuid!, $object: timesheets_set_input!) {
         *       update_timesheets_by_pk(pk_columns: {id: $id}, _set: $object) {
         *         client_id
         *         created_at
         *         freelance_id
         *         id
         *         project_task_id
         *         updated_at
         *         working_date
         *         working_duration
         *         working_unit
         *       }
         *     }
         *
         *     ```
         */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Your x-hasura-admin-secret will be used for authentication of the API request. */
                    "x-hasura-admin-secret"?: string;
                };
                path: {
                    /** @description _"id" is required (enter it either in parameters or request body)_ */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Query parameters can also be provided in the request body as a JSON object */
            requestBody: {
                content: {
                    "application/json": {
                        id?: components["schemas"]["uuid!"];
                        object?: components["schemas"]["timesheets_set_input!"];
                    };
                };
            };
            responses: {
                /** @description Responses for POST /api/rest/timesheets/{id} */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * timesheets
                             * @description columns and relationships of "timesheets"
                             */
                            update_timesheets_by_pk?: {
                                client_id?: components["schemas"]["uuid!"];
                                created_at?: components["schemas"]["timestamp!"];
                                freelance_id?: components["schemas"]["uuid!"];
                                id?: components["schemas"]["uuid!"];
                                project_task_id?: components["schemas"]["uuid!"];
                                updated_at?: components["schemas"]["timestamp"];
                                /** String */
                                working_date?: string;
                            } | null;
                        };
                    };
                };
            };
        };
        /**
         * delete_timesheets_by_pk
         * @description ***
         *     The GraphQl query for this endpoint is:
         *     ``` graphql
         *     mutation delete_timesheets_by_pk($id: uuid!) {
         *       delete_timesheets_by_pk(id: $id) {
         *         client_id
         *         created_at
         *         freelance_id
         *         id
         *         project_task_id
         *         updated_at
         *         working_date
         *         working_duration
         *         working_unit
         *       }
         *     }
         *
         *     ```
         */
        delete: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Your x-hasura-admin-secret will be used for authentication of the API request. */
                    "x-hasura-admin-secret"?: string;
                };
                path: {
                    /** @description _"id" is required (enter it either in parameters or request body)_ */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Query parameters can also be provided in the request body as a JSON object */
            requestBody?: {
                content: {
                    "application/json": {
                        id?: components["schemas"]["uuid!"];
                    };
                };
            };
            responses: {
                /** @description Responses for DELETE /api/rest/timesheets/{id} */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * timesheets
                             * @description columns and relationships of "timesheets"
                             */
                            delete_timesheets_by_pk?: {
                                client_id?: components["schemas"]["uuid!"];
                                created_at?: components["schemas"]["timestamp!"];
                                freelance_id?: components["schemas"]["uuid!"];
                                id?: components["schemas"]["uuid!"];
                                project_task_id?: components["schemas"]["uuid!"];
                                updated_at?: components["schemas"]["timestamp"];
                                /** String */
                                working_date?: string;
                            } | null;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/freelances": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * freelances
         * @description ***
         *     The GraphQl query for this endpoint is:
         *     ``` graphql
         *     query freelances {
         *       freelances {
         *         created_at
         *         daily_rate
         *         email
         *         id
         *         updated_at
         *       }
         *     }
         *
         *     ```
         */
        get: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Your x-hasura-admin-secret will be used for authentication of the API request. */
                    "x-hasura-admin-secret"?: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Responses for GET /api/rest/freelances */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            freelances?: {
                                created_at?: components["schemas"]["timestamp!"];
                                daily_rate?: components["schemas"]["numeric!"];
                                /** String */
                                email?: string | null;
                                id?: components["schemas"]["uuid!"];
                                updated_at?: components["schemas"]["timestamp"];
                            }[];
                        };
                    };
                };
            };
        };
        put?: never;
        /**
         * insert_freelances_one
         * @description ***
         *     The GraphQl query for this endpoint is:
         *     ``` graphql
         *     mutation insert_freelances_one($object: freelances_insert_input!) {
         *       insert_freelances_one(object: $object) {
         *         created_at
         *         daily_rate
         *         email
         *         id
         *         updated_at
         *       }
         *     }
         *
         *     ```
         */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Your x-hasura-admin-secret will be used for authentication of the API request. */
                    "x-hasura-admin-secret"?: string;
                };
                path?: never;
                cookie?: never;
            };
            /** @description Query parameters can also be provided in the request body as a JSON object */
            requestBody: {
                content: {
                    "application/json": {
                        object?: components["schemas"]["freelances_insert_input!"];
                    };
                };
            };
            responses: {
                /** @description Responses for POST /api/rest/freelances */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * freelances
                             * @description columns and relationships of "freelances"
                             */
                            insert_freelances_one?: {
                                created_at?: components["schemas"]["timestamp!"];
                                daily_rate?: components["schemas"]["numeric!"];
                                /** String */
                                email?: string | null;
                                id?: components["schemas"]["uuid!"];
                                updated_at?: components["schemas"]["timestamp"];
                            } | null;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/freelances/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * freelances_by_pk
         * @description ***
         *     The GraphQl query for this endpoint is:
         *     ``` graphql
         *     query freelances_by_pk($id: uuid!) {
         *       freelances_by_pk(id: $id) {
         *         created_at
         *         daily_rate
         *         email
         *         id
         *         updated_at
         *       }
         *     }
         *
         *     ```
         */
        get: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Your x-hasura-admin-secret will be used for authentication of the API request. */
                    "x-hasura-admin-secret"?: string;
                };
                path: {
                    /** @description _"id" is required (enter it either in parameters or request body)_ */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Query parameters can also be provided in the request body as a JSON object */
            requestBody?: {
                content: {
                    "application/json": {
                        id?: components["schemas"]["uuid!"];
                    };
                };
            };
            responses: {
                /** @description Responses for GET /api/rest/freelances/{id} */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * freelances
                             * @description columns and relationships of "freelances"
                             */
                            freelances_by_pk?: {
                                created_at?: components["schemas"]["timestamp!"];
                                daily_rate?: components["schemas"]["numeric!"];
                                /** String */
                                email?: string | null;
                                id?: components["schemas"]["uuid!"];
                                updated_at?: components["schemas"]["timestamp"];
                            } | null;
                        };
                    };
                };
            };
        };
        put?: never;
        /**
         * update_freelances_by_pk
         * @description ***
         *     The GraphQl query for this endpoint is:
         *     ``` graphql
         *     mutation update_freelances_by_pk($id: uuid!, $object: freelances_set_input!) {
         *       update_freelances_by_pk(pk_columns: {id: $id}, _set: $object) {
         *         created_at
         *         daily_rate
         *         email
         *         id
         *         updated_at
         *       }
         *     }
         *
         *     ```
         */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Your x-hasura-admin-secret will be used for authentication of the API request. */
                    "x-hasura-admin-secret"?: string;
                };
                path: {
                    /** @description _"id" is required (enter it either in parameters or request body)_ */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Query parameters can also be provided in the request body as a JSON object */
            requestBody: {
                content: {
                    "application/json": {
                        id?: components["schemas"]["uuid!"];
                        object?: components["schemas"]["freelances_set_input!"];
                    };
                };
            };
            responses: {
                /** @description Responses for POST /api/rest/freelances/{id} */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * freelances
                             * @description columns and relationships of "freelances"
                             */
                            update_freelances_by_pk?: {
                                created_at?: components["schemas"]["timestamp!"];
                                daily_rate?: components["schemas"]["numeric!"];
                                /** String */
                                email?: string | null;
                                id?: components["schemas"]["uuid!"];
                                updated_at?: components["schemas"]["timestamp"];
                            } | null;
                        };
                    };
                };
            };
        };
        /**
         * delete_freelances_by_pk
         * @description ***
         *     The GraphQl query for this endpoint is:
         *     ``` graphql
         *     mutation delete_freelances_by_pk($id: uuid!) {
         *       delete_freelances_by_pk(id: $id) {
         *         created_at
         *         daily_rate
         *         email
         *         id
         *         updated_at
         *       }
         *     }
         *
         *     ```
         */
        delete: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Your x-hasura-admin-secret will be used for authentication of the API request. */
                    "x-hasura-admin-secret"?: string;
                };
                path: {
                    /** @description _"id" is required (enter it either in parameters or request body)_ */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Query parameters can also be provided in the request body as a JSON object */
            requestBody?: {
                content: {
                    "application/json": {
                        id?: components["schemas"]["uuid!"];
                    };
                };
            };
            responses: {
                /** @description Responses for DELETE /api/rest/freelances/{id} */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * freelances
                             * @description columns and relationships of "freelances"
                             */
                            delete_freelances_by_pk?: {
                                created_at?: components["schemas"]["timestamp!"];
                                daily_rate?: components["schemas"]["numeric!"];
                                /** String */
                                email?: string | null;
                                id?: components["schemas"]["uuid!"];
                                updated_at?: components["schemas"]["timestamp"];
                            } | null;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/clients": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * clients
         * @description ***
         *     The GraphQl query for this endpoint is:
         *     ``` graphql
         *     query clients {
         *       clients {
         *         created_at
         *         email
         *         id
         *         name
         *         phone
         *         updated_at
         *       }
         *     }
         *
         *     ```
         */
        get: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Your x-hasura-admin-secret will be used for authentication of the API request. */
                    "x-hasura-admin-secret"?: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Responses for GET /api/rest/clients */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            clients?: {
                                created_at?: components["schemas"]["timestamp!"];
                                /** String */
                                email?: string;
                                id?: components["schemas"]["uuid!"];
                                /** String */
                                name?: string;
                                /** String */
                                phone?: string;
                                updated_at?: components["schemas"]["timestamp"];
                            }[];
                        };
                    };
                };
            };
        };
        put?: never;
        /**
         * insert_clients_one
         * @description ***
         *     The GraphQl query for this endpoint is:
         *     ``` graphql
         *     mutation insert_clients_one($object: clients_insert_input!) {
         *       insert_clients_one(object: $object) {
         *         created_at
         *         email
         *         id
         *         name
         *         phone
         *         updated_at
         *       }
         *     }
         *
         *     ```
         */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Your x-hasura-admin-secret will be used for authentication of the API request. */
                    "x-hasura-admin-secret"?: string;
                };
                path?: never;
                cookie?: never;
            };
            /** @description Query parameters can also be provided in the request body as a JSON object */
            requestBody: {
                content: {
                    "application/json": {
                        object?: components["schemas"]["clients_insert_input!"];
                    };
                };
            };
            responses: {
                /** @description Responses for POST /api/rest/clients */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * clients
                             * @description columns and relationships of "clients"
                             */
                            insert_clients_one?: {
                                created_at?: components["schemas"]["timestamp!"];
                                /** String */
                                email?: string;
                                id?: components["schemas"]["uuid!"];
                                /** String */
                                name?: string;
                                /** String */
                                phone?: string;
                                updated_at?: components["schemas"]["timestamp"];
                            } | null;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/clients/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * clients_by_pk
         * @description ***
         *     The GraphQl query for this endpoint is:
         *     ``` graphql
         *     query clients_by_pk($id: uuid!) {
         *       clients_by_pk(id: $id) {
         *         created_at
         *         email
         *         id
         *         name
         *         phone
         *         updated_at
         *       }
         *     }
         *
         *     ```
         */
        get: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Your x-hasura-admin-secret will be used for authentication of the API request. */
                    "x-hasura-admin-secret"?: string;
                };
                path: {
                    /** @description _"id" is required (enter it either in parameters or request body)_ */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Query parameters can also be provided in the request body as a JSON object */
            requestBody?: {
                content: {
                    "application/json": {
                        id?: components["schemas"]["uuid!"];
                    };
                };
            };
            responses: {
                /** @description Responses for GET /api/rest/clients/{id} */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * clients
                             * @description columns and relationships of "clients"
                             */
                            clients_by_pk?: {
                                created_at?: components["schemas"]["timestamp!"];
                                /** String */
                                email?: string;
                                id?: components["schemas"]["uuid!"];
                                /** String */
                                name?: string;
                                /** String */
                                phone?: string;
                                updated_at?: components["schemas"]["timestamp"];
                            } | null;
                        };
                    };
                };
            };
        };
        put?: never;
        /**
         * update_clients_by_pk
         * @description ***
         *     The GraphQl query for this endpoint is:
         *     ``` graphql
         *     mutation update_clients_by_pk($id: uuid!, $object: clients_set_input!) {
         *       update_clients_by_pk(pk_columns: {id: $id}, _set: $object) {
         *         created_at
         *         email
         *         id
         *         name
         *         phone
         *         updated_at
         *       }
         *     }
         *
         *     ```
         */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Your x-hasura-admin-secret will be used for authentication of the API request. */
                    "x-hasura-admin-secret"?: string;
                };
                path: {
                    /** @description _"id" is required (enter it either in parameters or request body)_ */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Query parameters can also be provided in the request body as a JSON object */
            requestBody: {
                content: {
                    "application/json": {
                        id?: components["schemas"]["uuid!"];
                        object?: components["schemas"]["clients_set_input!"];
                    };
                };
            };
            responses: {
                /** @description Responses for POST /api/rest/clients/{id} */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * clients
                             * @description columns and relationships of "clients"
                             */
                            update_clients_by_pk?: {
                                created_at?: components["schemas"]["timestamp!"];
                                /** String */
                                email?: string;
                                id?: components["schemas"]["uuid!"];
                                /** String */
                                name?: string;
                                /** String */
                                phone?: string;
                                updated_at?: components["schemas"]["timestamp"];
                            } | null;
                        };
                    };
                };
            };
        };
        /**
         * delete_clients_by_pk
         * @description ***
         *     The GraphQl query for this endpoint is:
         *     ``` graphql
         *     mutation delete_clients_by_pk($id: uuid!) {
         *       delete_clients_by_pk(id: $id) {
         *         created_at
         *         email
         *         id
         *         name
         *         phone
         *         updated_at
         *       }
         *     }
         *
         *     ```
         */
        delete: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Your x-hasura-admin-secret will be used for authentication of the API request. */
                    "x-hasura-admin-secret"?: string;
                };
                path: {
                    /** @description _"id" is required (enter it either in parameters or request body)_ */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Query parameters can also be provided in the request body as a JSON object */
            requestBody?: {
                content: {
                    "application/json": {
                        id?: components["schemas"]["uuid!"];
                    };
                };
            };
            responses: {
                /** @description Responses for DELETE /api/rest/clients/{id} */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * clients
                             * @description columns and relationships of "clients"
                             */
                            delete_clients_by_pk?: {
                                created_at?: components["schemas"]["timestamp!"];
                                /** String */
                                email?: string;
                                id?: components["schemas"]["uuid!"];
                                /** String */
                                name?: string;
                                /** String */
                                phone?: string;
                                updated_at?: components["schemas"]["timestamp"];
                            } | null;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/projects": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * projects
         * @description ***
         *     The GraphQl query for this endpoint is:
         *     ``` graphql
         *     query projects {
         *       projects {
         *         created_at
         *         description
         *         end_date
         *         id
         *         is_active
         *         name
         *         start_date
         *         updated_at
         *       }
         *     }
         *
         *     ```
         */
        get: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Your x-hasura-admin-secret will be used for authentication of the API request. */
                    "x-hasura-admin-secret"?: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Responses for GET /api/rest/projects */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            projects?: {
                                created_at?: components["schemas"]["timestamp!"];
                                /** String */
                                description?: string | null;
                                end_date?: components["schemas"]["timestamp"];
                                id?: components["schemas"]["uuid!"];
                                /** Boolean */
                                is_active?: boolean;
                                /** String */
                                name?: string;
                                start_date?: components["schemas"]["timestamp"];
                                updated_at?: components["schemas"]["timestamp"];
                            }[];
                        };
                    };
                };
            };
        };
        put?: never;
        /**
         * insert_projects_one
         * @description ***
         *     The GraphQl query for this endpoint is:
         *     ``` graphql
         *     mutation insert_projects_one($object: projects_insert_input!) {
         *       insert_projects_one(object: $object) {
         *         created_at
         *         description
         *         end_date
         *         id
         *         is_active
         *         name
         *         start_date
         *         updated_at
         *       }
         *     }
         *
         *     ```
         */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Your x-hasura-admin-secret will be used for authentication of the API request. */
                    "x-hasura-admin-secret"?: string;
                };
                path?: never;
                cookie?: never;
            };
            /** @description Query parameters can also be provided in the request body as a JSON object */
            requestBody: {
                content: {
                    "application/json": {
                        object?: components["schemas"]["projects_insert_input!"];
                    };
                };
            };
            responses: {
                /** @description Responses for POST /api/rest/projects */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * projects
                             * @description columns and relationships of "projects"
                             */
                            insert_projects_one?: {
                                created_at?: components["schemas"]["timestamp!"];
                                /** String */
                                description?: string | null;
                                end_date?: components["schemas"]["timestamp"];
                                id?: components["schemas"]["uuid!"];
                                /** Boolean */
                                is_active?: boolean;
                                /** String */
                                name?: string;
                                start_date?: components["schemas"]["timestamp"];
                                updated_at?: components["schemas"]["timestamp"];
                            } | null;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/projects/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * projects_by_pk
         * @description ***
         *     The GraphQl query for this endpoint is:
         *     ``` graphql
         *     query projects_by_pk($id: uuid!) {
         *       projects_by_pk(id: $id) {
         *         created_at
         *         description
         *         end_date
         *         id
         *         is_active
         *         name
         *         start_date
         *         updated_at
         *       }
         *     }
         *
         *     ```
         */
        get: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Your x-hasura-admin-secret will be used for authentication of the API request. */
                    "x-hasura-admin-secret"?: string;
                };
                path: {
                    /** @description _"id" is required (enter it either in parameters or request body)_ */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Query parameters can also be provided in the request body as a JSON object */
            requestBody?: {
                content: {
                    "application/json": {
                        id?: components["schemas"]["uuid!"];
                    };
                };
            };
            responses: {
                /** @description Responses for GET /api/rest/projects/{id} */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * projects
                             * @description columns and relationships of "projects"
                             */
                            projects_by_pk?: {
                                created_at?: components["schemas"]["timestamp!"];
                                /** String */
                                description?: string | null;
                                end_date?: components["schemas"]["timestamp"];
                                id?: components["schemas"]["uuid!"];
                                /** Boolean */
                                is_active?: boolean;
                                /** String */
                                name?: string;
                                start_date?: components["schemas"]["timestamp"];
                                updated_at?: components["schemas"]["timestamp"];
                            } | null;
                        };
                    };
                };
            };
        };
        put?: never;
        /**
         * update_projects_by_pk
         * @description ***
         *     The GraphQl query for this endpoint is:
         *     ``` graphql
         *     mutation update_projects_by_pk($id: uuid!, $object: projects_set_input!) {
         *       update_projects_by_pk(pk_columns: {id: $id}, _set: $object) {
         *         created_at
         *         description
         *         end_date
         *         id
         *         is_active
         *         name
         *         start_date
         *         updated_at
         *       }
         *     }
         *
         *     ```
         */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Your x-hasura-admin-secret will be used for authentication of the API request. */
                    "x-hasura-admin-secret"?: string;
                };
                path: {
                    /** @description _"id" is required (enter it either in parameters or request body)_ */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Query parameters can also be provided in the request body as a JSON object */
            requestBody: {
                content: {
                    "application/json": {
                        id?: components["schemas"]["uuid!"];
                        object?: components["schemas"]["projects_set_input!"];
                    };
                };
            };
            responses: {
                /** @description Responses for POST /api/rest/projects/{id} */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * projects
                             * @description columns and relationships of "projects"
                             */
                            update_projects_by_pk?: {
                                created_at?: components["schemas"]["timestamp!"];
                                /** String */
                                description?: string | null;
                                end_date?: components["schemas"]["timestamp"];
                                id?: components["schemas"]["uuid!"];
                                /** Boolean */
                                is_active?: boolean;
                                /** String */
                                name?: string;
                                start_date?: components["schemas"]["timestamp"];
                                updated_at?: components["schemas"]["timestamp"];
                            } | null;
                        };
                    };
                };
            };
        };
        /**
         * delete_projects_by_pk
         * @description ***
         *     The GraphQl query for this endpoint is:
         *     ``` graphql
         *     mutation delete_projects_by_pk($id: uuid!) {
         *       delete_projects_by_pk(id: $id) {
         *         created_at
         *         description
         *         end_date
         *         id
         *         is_active
         *         name
         *         start_date
         *         updated_at
         *       }
         *     }
         *
         *     ```
         */
        delete: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Your x-hasura-admin-secret will be used for authentication of the API request. */
                    "x-hasura-admin-secret"?: string;
                };
                path: {
                    /** @description _"id" is required (enter it either in parameters or request body)_ */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Query parameters can also be provided in the request body as a JSON object */
            requestBody?: {
                content: {
                    "application/json": {
                        id?: components["schemas"]["uuid!"];
                    };
                };
            };
            responses: {
                /** @description Responses for DELETE /api/rest/projects/{id} */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * projects
                             * @description columns and relationships of "projects"
                             */
                            delete_projects_by_pk?: {
                                created_at?: components["schemas"]["timestamp!"];
                                /** String */
                                description?: string | null;
                                end_date?: components["schemas"]["timestamp"];
                                id?: components["schemas"]["uuid!"];
                                /** Boolean */
                                is_active?: boolean;
                                /** String */
                                name?: string;
                                start_date?: components["schemas"]["timestamp"];
                                updated_at?: components["schemas"]["timestamp"];
                            } | null;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/projects_tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * projects_tasks
         * @description ***
         *     The GraphQl query for this endpoint is:
         *     ``` graphql
         *     query projects_tasks {
         *       projects_tasks {
         *         created_at
         *         date
         *         hours_worked
         *         id
         *         project_id
         *         task_description
         *         updated_at
         *       }
         *     }
         *
         *     ```
         */
        get: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Your x-hasura-admin-secret will be used for authentication of the API request. */
                    "x-hasura-admin-secret"?: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Responses for GET /api/rest/projects_tasks */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            projects_tasks?: {
                                created_at?: components["schemas"]["timestamp!"];
                                date?: components["schemas"]["timestamp"];
                                hours_worked?: components["schemas"]["numeric!"];
                                id?: components["schemas"]["uuid!"];
                                project_id?: components["schemas"]["uuid!"];
                                /** String */
                                task_description?: string | null;
                                updated_at?: components["schemas"]["timestamp"];
                            }[];
                        };
                    };
                };
            };
        };
        put?: never;
        /**
         * insert_projects_tasks_one
         * @description ***
         *     The GraphQl query for this endpoint is:
         *     ``` graphql
         *     mutation insert_projects_tasks_one($object: projects_tasks_insert_input!) {
         *       insert_projects_tasks_one(object: $object) {
         *         created_at
         *         date
         *         hours_worked
         *         id
         *         project_id
         *         task_description
         *         updated_at
         *       }
         *     }
         *
         *     ```
         */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Your x-hasura-admin-secret will be used for authentication of the API request. */
                    "x-hasura-admin-secret"?: string;
                };
                path?: never;
                cookie?: never;
            };
            /** @description Query parameters can also be provided in the request body as a JSON object */
            requestBody: {
                content: {
                    "application/json": {
                        object?: components["schemas"]["projects_tasks_insert_input!"];
                    };
                };
            };
            responses: {
                /** @description Responses for POST /api/rest/projects_tasks */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * projects_tasks
                             * @description columns and relationships of "projects_tasks"
                             */
                            insert_projects_tasks_one?: {
                                created_at?: components["schemas"]["timestamp!"];
                                date?: components["schemas"]["timestamp"];
                                hours_worked?: components["schemas"]["numeric!"];
                                id?: components["schemas"]["uuid!"];
                                project_id?: components["schemas"]["uuid!"];
                                /** String */
                                task_description?: string | null;
                                updated_at?: components["schemas"]["timestamp"];
                            } | null;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/projects_tasks/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * projects_tasks_by_pk
         * @description ***
         *     The GraphQl query for this endpoint is:
         *     ``` graphql
         *     query projects_tasks_by_pk($id: uuid!) {
         *       projects_tasks_by_pk(id: $id) {
         *         created_at
         *         date
         *         hours_worked
         *         id
         *         project_id
         *         task_description
         *         updated_at
         *       }
         *     }
         *
         *     ```
         */
        get: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Your x-hasura-admin-secret will be used for authentication of the API request. */
                    "x-hasura-admin-secret"?: string;
                };
                path: {
                    /** @description _"id" is required (enter it either in parameters or request body)_ */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Query parameters can also be provided in the request body as a JSON object */
            requestBody?: {
                content: {
                    "application/json": {
                        id?: components["schemas"]["uuid!"];
                    };
                };
            };
            responses: {
                /** @description Responses for GET /api/rest/projects_tasks/{id} */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * projects_tasks
                             * @description columns and relationships of "projects_tasks"
                             */
                            projects_tasks_by_pk?: {
                                created_at?: components["schemas"]["timestamp!"];
                                date?: components["schemas"]["timestamp"];
                                hours_worked?: components["schemas"]["numeric!"];
                                id?: components["schemas"]["uuid!"];
                                project_id?: components["schemas"]["uuid!"];
                                /** String */
                                task_description?: string | null;
                                updated_at?: components["schemas"]["timestamp"];
                            } | null;
                        };
                    };
                };
            };
        };
        put?: never;
        /**
         * update_projects_tasks_by_pk
         * @description ***
         *     The GraphQl query for this endpoint is:
         *     ``` graphql
         *     mutation update_projects_tasks_by_pk($id: uuid!, $object: projects_tasks_set_input!) {
         *       update_projects_tasks_by_pk(pk_columns: {id: $id}, _set: $object) {
         *         created_at
         *         date
         *         hours_worked
         *         id
         *         project_id
         *         task_description
         *         updated_at
         *       }
         *     }
         *
         *     ```
         */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Your x-hasura-admin-secret will be used for authentication of the API request. */
                    "x-hasura-admin-secret"?: string;
                };
                path: {
                    /** @description _"id" is required (enter it either in parameters or request body)_ */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Query parameters can also be provided in the request body as a JSON object */
            requestBody: {
                content: {
                    "application/json": {
                        id?: components["schemas"]["uuid!"];
                        object?: components["schemas"]["projects_tasks_set_input!"];
                    };
                };
            };
            responses: {
                /** @description Responses for POST /api/rest/projects_tasks/{id} */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * projects_tasks
                             * @description columns and relationships of "projects_tasks"
                             */
                            update_projects_tasks_by_pk?: {
                                created_at?: components["schemas"]["timestamp!"];
                                date?: components["schemas"]["timestamp"];
                                hours_worked?: components["schemas"]["numeric!"];
                                id?: components["schemas"]["uuid!"];
                                project_id?: components["schemas"]["uuid!"];
                                /** String */
                                task_description?: string | null;
                                updated_at?: components["schemas"]["timestamp"];
                            } | null;
                        };
                    };
                };
            };
        };
        /**
         * delete_projects_tasks_by_pk
         * @description ***
         *     The GraphQl query for this endpoint is:
         *     ``` graphql
         *     mutation delete_projects_tasks_by_pk($id: uuid!) {
         *       delete_projects_tasks_by_pk(id: $id) {
         *         created_at
         *         date
         *         hours_worked
         *         id
         *         project_id
         *         task_description
         *         updated_at
         *       }
         *     }
         *
         *     ```
         */
        delete: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Your x-hasura-admin-secret will be used for authentication of the API request. */
                    "x-hasura-admin-secret"?: string;
                };
                path: {
                    /** @description _"id" is required (enter it either in parameters or request body)_ */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Query parameters can also be provided in the request body as a JSON object */
            requestBody?: {
                content: {
                    "application/json": {
                        id?: components["schemas"]["uuid!"];
                    };
                };
            };
            responses: {
                /** @description Responses for DELETE /api/rest/projects_tasks/{id} */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * projects_tasks
                             * @description columns and relationships of "projects_tasks"
                             */
                            delete_projects_tasks_by_pk?: {
                                created_at?: components["schemas"]["timestamp!"];
                                date?: components["schemas"]["timestamp"];
                                hours_worked?: components["schemas"]["numeric!"];
                                id?: components["schemas"]["uuid!"];
                                project_id?: components["schemas"]["uuid!"];
                                /** String */
                                task_description?: string | null;
                                updated_at?: components["schemas"]["timestamp"];
                            } | null;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** uuid */
        "uuid!": string;
        /** timestamp */
        "timestamp!": unknown;
        /** timestamp */
        timestamp: unknown;
        /** uuid */
        uuid: string | null;
        /** jsonb */
        jsonb: unknown;
        /**
         * timesheets_insert_input
         * @description input type for inserting data into table "timesheets"
         */
        "timesheets_insert_input!": {
            client_id?: components["schemas"]["uuid"];
            created_at?: components["schemas"]["timestamp"];
            freelance_id?: components["schemas"]["uuid"];
            id?: components["schemas"]["uuid"];
            project_task_id?: components["schemas"]["uuid"];
            updated_at?: components["schemas"]["timestamp"];
            /** String */
            working_date?: string | null;
            working_durations?: components["schemas"]["jsonb"];
        };
        /**
         * timesheets_set_input
         * @description input type for updating data in table "timesheets"
         */
        "timesheets_set_input!": {
            client_id?: components["schemas"]["uuid"];
            created_at?: components["schemas"]["timestamp"];
            freelance_id?: components["schemas"]["uuid"];
            id?: components["schemas"]["uuid"];
            project_task_id?: components["schemas"]["uuid"];
            updated_at?: components["schemas"]["timestamp"];
            /** String */
            working_date?: string | null;
            working_durations?: components["schemas"]["jsonb"];
        };
        /** numeric */
        "numeric!": unknown;
        /** numeric */
        numeric: unknown;
        /**
         * freelances_insert_input
         * @description input type for inserting data into table "freelances"
         */
        "freelances_insert_input!": {
            created_at?: components["schemas"]["timestamp"];
            daily_rate?: components["schemas"]["numeric"];
            /** String */
            email?: string | null;
            id?: components["schemas"]["uuid"];
            updated_at?: components["schemas"]["timestamp"];
        };
        /**
         * freelances_set_input
         * @description input type for updating data in table "freelances"
         */
        "freelances_set_input!": {
            created_at?: components["schemas"]["timestamp"];
            daily_rate?: components["schemas"]["numeric"];
            /** String */
            email?: string | null;
            id?: components["schemas"]["uuid"];
            updated_at?: components["schemas"]["timestamp"];
        };
        /**
         * clients_insert_input
         * @description input type for inserting data into table "clients"
         */
        "clients_insert_input!": {
            created_at?: components["schemas"]["timestamp"];
            /** String */
            email?: string | null;
            id?: components["schemas"]["uuid"];
            /** String */
            name?: string | null;
            /** String */
            phone?: string | null;
            updated_at?: components["schemas"]["timestamp"];
        };
        /**
         * clients_set_input
         * @description input type for updating data in table "clients"
         */
        "clients_set_input!": {
            created_at?: components["schemas"]["timestamp"];
            /** String */
            email?: string | null;
            id?: components["schemas"]["uuid"];
            /** String */
            name?: string | null;
            /** String */
            phone?: string | null;
            updated_at?: components["schemas"]["timestamp"];
        };
        /**
         * projects_insert_input
         * @description input type for inserting data into table "projects"
         */
        "projects_insert_input!": {
            created_at?: components["schemas"]["timestamp"];
            /** String */
            description?: string | null;
            end_date?: components["schemas"]["timestamp"];
            id?: components["schemas"]["uuid"];
            /** Boolean */
            is_active?: boolean | null;
            /** String */
            name?: string | null;
            start_date?: components["schemas"]["timestamp"];
            updated_at?: components["schemas"]["timestamp"];
        };
        /**
         * projects_set_input
         * @description input type for updating data in table "projects"
         */
        "projects_set_input!": {
            created_at?: components["schemas"]["timestamp"];
            /** String */
            description?: string | null;
            end_date?: components["schemas"]["timestamp"];
            id?: components["schemas"]["uuid"];
            /** Boolean */
            is_active?: boolean | null;
            /** String */
            name?: string | null;
            start_date?: components["schemas"]["timestamp"];
            updated_at?: components["schemas"]["timestamp"];
        };
        /**
         * projects_tasks_insert_input
         * @description input type for inserting data into table "projects_tasks"
         */
        "projects_tasks_insert_input!": {
            created_at?: components["schemas"]["timestamp"];
            date?: components["schemas"]["timestamp"];
            hours_worked?: components["schemas"]["numeric"];
            id?: components["schemas"]["uuid"];
            project_id?: components["schemas"]["uuid"];
            /** String */
            task_description?: string | null;
            updated_at?: components["schemas"]["timestamp"];
        };
        /**
         * projects_tasks_set_input
         * @description input type for updating data in table "projects_tasks"
         */
        "projects_tasks_set_input!": {
            created_at?: components["schemas"]["timestamp"];
            date?: components["schemas"]["timestamp"];
            hours_worked?: components["schemas"]["numeric"];
            id?: components["schemas"]["uuid"];
            project_id?: components["schemas"]["uuid"];
            /** String */
            task_description?: string | null;
            updated_at?: components["schemas"]["timestamp"];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
