/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/rest/projects-tasks/project/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * projects_tasks_by_project_id
         * @description ***
         *     The GraphQl query for this endpoint is:
         *     ``` graphql
         *     query projects_tasks_by_project_id($id: uuid!) {
         *       projects_tasks(where: {project_id: {_eq: $id}}) {
         *         id
         *         project_id
         *         task_description
         *         updated_at
         *         date
         *         created_at
         *       }
         *     }
         *     ```
         */
        get: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Your x-hasura-admin-secret will be used for authentication of the API request. */
                    "x-hasura-admin-secret"?: string;
                };
                path: {
                    /** @description _"id" is required (enter it either in parameters or request body)_ */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Query parameters can also be provided in the request body as a JSON object */
            requestBody?: {
                content: {
                    "application/json": {
                        id?: components["schemas"]["uuid!"];
                    };
                };
            };
            responses: {
                /** @description Responses for GET /api/rest/projects-tasks/project/{id} */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            projects_tasks?: {
                                created_at?: components["schemas"]["timestamp!"];
                                date?: components["schemas"]["timestamp"];
                                id?: components["schemas"]["uuid!"];
                                project_id?: components["schemas"]["uuid!"];
                                /** String */
                                task_description?: string | null;
                                updated_at?: components["schemas"]["timestamp"];
                            }[];
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/timesheets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * timesheets
         * @description ***
         *     The GraphQl query for this endpoint is:
         *     ``` graphql
         *     query timesheets {
         *       timesheets {
         *         client_id
         *         created_at
         *         freelance_id
         *         id
         *         project_task_id
         *         updated_at
         *         working_date
         *         working_durations
         *         }
         *     }
         *
         *     ```
         */
        get: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Your x-hasura-admin-secret will be used for authentication of the API request. */
                    "x-hasura-admin-secret"?: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Responses for GET /api/rest/timesheets */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            timesheets?: {
                                client_id?: components["schemas"]["uuid!"];
                                created_at?: components["schemas"]["timestamp!"];
                                freelance_id?: components["schemas"]["uuid!"];
                                id?: components["schemas"]["uuid!"];
                                project_task_id?: components["schemas"]["uuid!"];
                                updated_at?: components["schemas"]["timestamp"];
                                /** String */
                                working_date?: string;
                                working_durations?: components["schemas"]["jsonb"];
                            }[];
                        };
                    };
                };
            };
        };
        put?: never;
        /**
         * insert_timesheets_one
         * @description ***
         *     The GraphQl query for this endpoint is:
         *     ``` graphql
         *     mutation insert_timesheets_one($object: timesheets_insert_input!) {
         *       insert_timesheets_one(object: $object) {
         *         client_id
         *         created_at
         *         freelance_id
         *         id
         *         project_task_id
         *         updated_at
         *         working_date
         *         working_durations
         *         }
         *     }
         *
         *     ```
         */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Your x-hasura-admin-secret will be used for authentication of the API request. */
                    "x-hasura-admin-secret"?: string;
                };
                path?: never;
                cookie?: never;
            };
            /** @description Query parameters can also be provided in the request body as a JSON object */
            requestBody: {
                content: {
                    "application/json": {
                        object?: components["schemas"]["timesheets_insert_input!"];
                    };
                };
            };
            responses: {
                /** @description Responses for POST /api/rest/timesheets */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * timesheets
                             * @description columns and relationships of "timesheets"
                             */
                            insert_timesheets_one?: {
                                client_id?: components["schemas"]["uuid!"];
                                created_at?: components["schemas"]["timestamp!"];
                                freelance_id?: components["schemas"]["uuid!"];
                                id?: components["schemas"]["uuid!"];
                                project_task_id?: components["schemas"]["uuid!"];
                                updated_at?: components["schemas"]["timestamp"];
                                /** String */
                                working_date?: string;
                                working_durations?: components["schemas"]["jsonb"];
                            } | null;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/timesheets/period/{period}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * timesheets_by_period
         * @description ***
         *     The GraphQl query for this endpoint is:
         *     ``` graphql
         *     query timesheets_by_period($period: String!) {
         *       timesheets(where: {working_date: {_eq: $period}}) {
         *         id
         *         client_id
         *         client {
         *           name
         *         }
         *       	project_task_id
         *         projects_task {
         *           task_description
         *           project_id
         *           project {
         *             name
         *             description
         *           }
         *         }
         *         created_at
         *         updated_at
         *         working_date
         *         working_durations
         *       }
         *     }
         *     ```
         */
        get: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Your x-hasura-admin-secret will be used for authentication of the API request. */
                    "x-hasura-admin-secret"?: string;
                };
                path: {
                    /** @description _"period" is required (enter it either in parameters or request body)_ */
                    period: string;
                };
                cookie?: never;
            };
            /** @description Query parameters can also be provided in the request body as a JSON object */
            requestBody?: {
                content: {
                    "application/json": {
                        /** String */
                        period?: string;
                    };
                };
            };
            responses: {
                /** @description Responses for GET /api/rest/timesheets/period/{period} */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            timesheets?: {
                                /**
                                 * clients
                                 * @description columns and relationships of "clients"
                                 */
                                client?: {
                                    /** String */
                                    name?: string;
                                };
                                client_id?: components["schemas"]["uuid!"];
                                created_at?: components["schemas"]["timestamp!"];
                                id?: components["schemas"]["uuid!"];
                                project_task_id?: components["schemas"]["uuid!"];
                                /**
                                 * projects_tasks
                                 * @description columns and relationships of "projects_tasks"
                                 */
                                projects_task?: {
                                    /**
                                     * projects
                                     * @description columns and relationships of "projects"
                                     */
                                    project?: {
                                        /** String */
                                        description?: string | null;
                                        /** String */
                                        name?: string;
                                    };
                                    project_id?: components["schemas"]["uuid!"];
                                    /** String */
                                    task_description?: string | null;
                                };
                                updated_at?: components["schemas"]["timestamp"];
                                /** String */
                                working_date?: string;
                                working_durations?: components["schemas"]["jsonb"];
                            }[];
                        };
                    };
                };
            };
        };
        /**
         * update_timesheet_by_period
         * @description ***
         *     The GraphQl query for this endpoint is:
         *     ``` graphql
         *     mutation UpdateTimesheetByPeriod($period: String!, $project_task_id: uuid!, $newData: timesheets_set_input!) {
         *       update_timesheets(
         *         where: {
         *           working_date: { _eq: $period}
         *           project_task_id: { _eq: $project_task_id }
         *         },
         *         _set: $newData
         *       ) {
         *         affected_rows
         *         returning {
         *           id
         *           working_date
         *           working_durations
         *           freelance_id
         *           projects_task {
         *             task_description
         *             project {
         *               name
         *               description
         *             }
         *           }
         *         }
         *       }
         *     }
         *     ```
         */
        put: {
            parameters: {
                query?: {
                    /** @description _"project_task_id" is required (enter it either in parameters or request body)_ */
                    project_task_id?: string;
                };
                header?: {
                    /** @description Your x-hasura-admin-secret will be used for authentication of the API request. */
                    "x-hasura-admin-secret"?: string;
                };
                path: {
                    /** @description _"period" is required (enter it either in parameters or request body)_ */
                    period: string;
                };
                cookie?: never;
            };
            /** @description Query parameters can also be provided in the request body as a JSON object */
            requestBody: {
                content: {
                    "application/json": {
                        newData?: components["schemas"]["timesheets_set_input!"];
                        /** String */
                        period?: string;
                        project_task_id?: components["schemas"]["uuid!"];
                    };
                };
            };
            responses: {
                /** @description Responses for PUT /api/rest/timesheets/period/{period} */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * timesheets_mutation_response
                             * @description response of any mutation on the table "timesheets"
                             */
                            update_timesheets?: {
                                /** Int */
                                affected_rows?: number;
                                returning?: {
                                    freelance_id?: components["schemas"]["uuid!"];
                                    id?: components["schemas"]["uuid!"];
                                    /**
                                     * projects_tasks
                                     * @description columns and relationships of "projects_tasks"
                                     */
                                    projects_task?: {
                                        /**
                                         * projects
                                         * @description columns and relationships of "projects"
                                         */
                                        project?: {
                                            /** String */
                                            description?: string | null;
                                            /** String */
                                            name?: string;
                                        };
                                        /** String */
                                        task_description?: string | null;
                                    };
                                    /** String */
                                    working_date?: string;
                                    working_durations?: components["schemas"]["jsonb"];
                                }[];
                            } | null;
                        };
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/timesheets/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * timesheets_by_pk
         * @description ***
         *     The GraphQl query for this endpoint is:
         *     ``` graphql
         *     query timesheets_by_pk($id: uuid!) {
         *       timesheets_by_pk(id: $id) {
         *         client_id
         *         created_at
         *         freelance_id
         *         id
         *         project_task_id
         *         updated_at
         *         working_date
         *         working_durations
         *      }
         *     }
         *
         *     ```
         */
        get: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Your x-hasura-admin-secret will be used for authentication of the API request. */
                    "x-hasura-admin-secret"?: string;
                };
                path: {
                    /** @description _"id" is required (enter it either in parameters or request body)_ */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Query parameters can also be provided in the request body as a JSON object */
            requestBody?: {
                content: {
                    "application/json": {
                        id?: components["schemas"]["uuid!"];
                    };
                };
            };
            responses: {
                /** @description Responses for GET /api/rest/timesheets/{id} */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * timesheets
                             * @description columns and relationships of "timesheets"
                             */
                            timesheets_by_pk?: {
                                client_id?: components["schemas"]["uuid!"];
                                created_at?: components["schemas"]["timestamp!"];
                                freelance_id?: components["schemas"]["uuid!"];
                                id?: components["schemas"]["uuid!"];
                                project_task_id?: components["schemas"]["uuid!"];
                                updated_at?: components["schemas"]["timestamp"];
                                /** String */
                                working_date?: string;
                                working_durations?: components["schemas"]["jsonb"];
                            } | null;
                        };
                    };
                };
            };
        };
        put?: never;
        /**
         * update_timesheets_by_pk
         * @description ***
         *     The GraphQl query for this endpoint is:
         *     ``` graphql
         *     mutation update_timesheets_by_pk($id: uuid!, $object: timesheets_set_input!) {
         *       update_timesheets_by_pk(pk_columns: {id: $id}, _set: $object) {
         *         client_id
         *         created_at
         *         freelance_id
         *         id
         *         project_task_id
         *         updated_at
         *         working_date
         *         working_durations
         *      }
         *     }
         *
         *     ```
         */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Your x-hasura-admin-secret will be used for authentication of the API request. */
                    "x-hasura-admin-secret"?: string;
                };
                path: {
                    /** @description _"id" is required (enter it either in parameters or request body)_ */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Query parameters can also be provided in the request body as a JSON object */
            requestBody: {
                content: {
                    "application/json": {
                        id?: components["schemas"]["uuid!"];
                        object?: components["schemas"]["timesheets_set_input!"];
                    };
                };
            };
            responses: {
                /** @description Responses for POST /api/rest/timesheets/{id} */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * timesheets
                             * @description columns and relationships of "timesheets"
                             */
                            update_timesheets_by_pk?: {
                                client_id?: components["schemas"]["uuid!"];
                                created_at?: components["schemas"]["timestamp!"];
                                freelance_id?: components["schemas"]["uuid!"];
                                id?: components["schemas"]["uuid!"];
                                project_task_id?: components["schemas"]["uuid!"];
                                updated_at?: components["schemas"]["timestamp"];
                                /** String */
                                working_date?: string;
                                working_durations?: components["schemas"]["jsonb"];
                            } | null;
                        };
                    };
                };
            };
        };
        /**
         * delete_timesheets_by_pk
         * @description ***
         *     The GraphQl query for this endpoint is:
         *     ``` graphql
         *     mutation delete_timesheets_by_pk($id: uuid!) {
         *       delete_timesheets_by_pk(id: $id) {
         *         client_id
         *         created_at
         *         freelance_id
         *         id
         *         project_task_id
         *         updated_at
         *         working_date
         *         working_durations
         *      }
         *     }
         *
         *     ```
         */
        delete: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Your x-hasura-admin-secret will be used for authentication of the API request. */
                    "x-hasura-admin-secret"?: string;
                };
                path: {
                    /** @description _"id" is required (enter it either in parameters or request body)_ */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Query parameters can also be provided in the request body as a JSON object */
            requestBody?: {
                content: {
                    "application/json": {
                        id?: components["schemas"]["uuid!"];
                    };
                };
            };
            responses: {
                /** @description Responses for DELETE /api/rest/timesheets/{id} */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * timesheets
                             * @description columns and relationships of "timesheets"
                             */
                            delete_timesheets_by_pk?: {
                                client_id?: components["schemas"]["uuid!"];
                                created_at?: components["schemas"]["timestamp!"];
                                freelance_id?: components["schemas"]["uuid!"];
                                id?: components["schemas"]["uuid!"];
                                project_task_id?: components["schemas"]["uuid!"];
                                updated_at?: components["schemas"]["timestamp"];
                                /** String */
                                working_date?: string;
                                working_durations?: components["schemas"]["jsonb"];
                            } | null;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/timesheets/project-task/{project_task_id}/period/{period}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * timesheet_by_project_task_id_and_period
         * @description ***
         *     The GraphQl query for this endpoint is:
         *     ``` graphql
         *     query timesheet_by_project_task_id_and_period($period: String!,$project_task_id: uuid!) {
         *       timesheets(
         *         where: {
         *           working_date: {_eq: $period}
         *           project_task_id: {_eq: $project_task_id}
         *         }
         *       ) {
         *         id
         *         client_id
         *         client {
         *           name
         *         }
         *       	project_task_id
         *         projects_task {
         *           task_description
         *           project_id
         *           project {
         *             name
         *             description
         *           }
         *         }
         *         created_at
         *         updated_at
         *         working_date
         *         working_durations
         *       }
         *     }
         *     ```
         */
        get: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Your x-hasura-admin-secret will be used for authentication of the API request. */
                    "x-hasura-admin-secret"?: string;
                };
                path: {
                    /** @description _"period" is required (enter it either in parameters or request body)_ */
                    period: string;
                    /** @description _"project_task_id" is required (enter it either in parameters or request body)_ */
                    project_task_id: string;
                };
                cookie?: never;
            };
            /** @description Query parameters can also be provided in the request body as a JSON object */
            requestBody?: {
                content: {
                    "application/json": {
                        /** String */
                        period?: string;
                        project_task_id?: components["schemas"]["uuid!"];
                    };
                };
            };
            responses: {
                /** @description Responses for GET /api/rest/timesheets/project-task/{project_task_id}/period/{period} */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            timesheets?: {
                                /**
                                 * clients
                                 * @description columns and relationships of "clients"
                                 */
                                client?: {
                                    /** String */
                                    name?: string;
                                };
                                client_id?: components["schemas"]["uuid!"];
                                created_at?: components["schemas"]["timestamp!"];
                                id?: components["schemas"]["uuid!"];
                                project_task_id?: components["schemas"]["uuid!"];
                                /**
                                 * projects_tasks
                                 * @description columns and relationships of "projects_tasks"
                                 */
                                projects_task?: {
                                    /**
                                     * projects
                                     * @description columns and relationships of "projects"
                                     */
                                    project?: {
                                        /** String */
                                        description?: string | null;
                                        /** String */
                                        name?: string;
                                    };
                                    project_id?: components["schemas"]["uuid!"];
                                    /** String */
                                    task_description?: string | null;
                                };
                                updated_at?: components["schemas"]["timestamp"];
                                /** String */
                                working_date?: string;
                                working_durations?: components["schemas"]["jsonb"];
                            }[];
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/freelance-by-email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * freelance_by_email
         * @description ***
         *     The GraphQl query for this endpoint is:
         *     ``` graphql
         *     query freelance_by_email($email: String){
         *       freelances(where: {email: {_eq: $email}}) {
         *           id
         *         email
         *         password
         *       }
         *     }
         *     ```
         */
        get: {
            parameters: {
                query?: {
                    email?: string;
                };
                header?: {
                    /** @description Your x-hasura-admin-secret will be used for authentication of the API request. */
                    "x-hasura-admin-secret"?: string;
                };
                path?: never;
                cookie?: never;
            };
            /** @description Query parameters can also be provided in the request body as a JSON object */
            requestBody?: {
                content: {
                    "application/json": {
                        /** String */
                        email?: string | null;
                    };
                };
            };
            responses: {
                /** @description Responses for GET /api/rest/freelance-by-email */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            freelances?: {
                                /** String */
                                email?: string;
                                id?: components["schemas"]["uuid!"];
                                /** String */
                                password?: string;
                            }[];
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/freelances": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * freelances
         * @description ***
         *     The GraphQl query for this endpoint is:
         *     ``` graphql
         *     query freelances {
         *       freelances {
         *         created_at
         *         daily_rate
         *         email
         *         id
         *         updated_at
         *       }
         *     }
         *
         *     ```
         */
        get: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Your x-hasura-admin-secret will be used for authentication of the API request. */
                    "x-hasura-admin-secret"?: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Responses for GET /api/rest/freelances */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            freelances?: {
                                created_at?: components["schemas"]["timestamp!"];
                                daily_rate?: components["schemas"]["numeric!"];
                                /** String */
                                email?: string;
                                id?: components["schemas"]["uuid!"];
                                updated_at?: components["schemas"]["timestamp"];
                            }[];
                        };
                    };
                };
            };
        };
        put?: never;
        /**
         * insert_freelances_one
         * @description ***
         *     The GraphQl query for this endpoint is:
         *     ``` graphql
         *     mutation insert_freelances_one($object: freelances_insert_input!) {
         *       insert_freelances_one(object: $object) {
         *         created_at
         *         daily_rate
         *         email
         *         id
         *         updated_at
         *       }
         *     }
         *
         *     ```
         */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Your x-hasura-admin-secret will be used for authentication of the API request. */
                    "x-hasura-admin-secret"?: string;
                };
                path?: never;
                cookie?: never;
            };
            /** @description Query parameters can also be provided in the request body as a JSON object */
            requestBody: {
                content: {
                    "application/json": {
                        object?: components["schemas"]["freelances_insert_input!"];
                    };
                };
            };
            responses: {
                /** @description Responses for POST /api/rest/freelances */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * freelances
                             * @description columns and relationships of "freelances"
                             */
                            insert_freelances_one?: {
                                created_at?: components["schemas"]["timestamp!"];
                                daily_rate?: components["schemas"]["numeric!"];
                                /** String */
                                email?: string;
                                id?: components["schemas"]["uuid!"];
                                updated_at?: components["schemas"]["timestamp"];
                            } | null;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/freelances/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * freelances_by_pk
         * @description ***
         *     The GraphQl query for this endpoint is:
         *     ``` graphql
         *     query freelances_by_pk($id: uuid!) {
         *       freelances_by_pk(id: $id) {
         *         created_at
         *         daily_rate
         *         email
         *         id
         *         updated_at
         *       }
         *     }
         *
         *     ```
         */
        get: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Your x-hasura-admin-secret will be used for authentication of the API request. */
                    "x-hasura-admin-secret"?: string;
                };
                path: {
                    /** @description _"id" is required (enter it either in parameters or request body)_ */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Query parameters can also be provided in the request body as a JSON object */
            requestBody?: {
                content: {
                    "application/json": {
                        id?: components["schemas"]["uuid!"];
                    };
                };
            };
            responses: {
                /** @description Responses for GET /api/rest/freelances/{id} */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * freelances
                             * @description columns and relationships of "freelances"
                             */
                            freelances_by_pk?: {
                                created_at?: components["schemas"]["timestamp!"];
                                daily_rate?: components["schemas"]["numeric!"];
                                /** String */
                                email?: string;
                                id?: components["schemas"]["uuid!"];
                                updated_at?: components["schemas"]["timestamp"];
                            } | null;
                        };
                    };
                };
            };
        };
        put?: never;
        /**
         * update_freelances_by_pk
         * @description ***
         *     The GraphQl query for this endpoint is:
         *     ``` graphql
         *     mutation update_freelances_by_pk($id: uuid!, $object: freelances_set_input!) {
         *       update_freelances_by_pk(pk_columns: {id: $id}, _set: $object) {
         *         created_at
         *         daily_rate
         *         email
         *         id
         *         updated_at
         *       }
         *     }
         *
         *     ```
         */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Your x-hasura-admin-secret will be used for authentication of the API request. */
                    "x-hasura-admin-secret"?: string;
                };
                path: {
                    /** @description _"id" is required (enter it either in parameters or request body)_ */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Query parameters can also be provided in the request body as a JSON object */
            requestBody: {
                content: {
                    "application/json": {
                        id?: components["schemas"]["uuid!"];
                        object?: components["schemas"]["freelances_set_input!"];
                    };
                };
            };
            responses: {
                /** @description Responses for POST /api/rest/freelances/{id} */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * freelances
                             * @description columns and relationships of "freelances"
                             */
                            update_freelances_by_pk?: {
                                created_at?: components["schemas"]["timestamp!"];
                                daily_rate?: components["schemas"]["numeric!"];
                                /** String */
                                email?: string;
                                id?: components["schemas"]["uuid!"];
                                updated_at?: components["schemas"]["timestamp"];
                            } | null;
                        };
                    };
                };
            };
        };
        /**
         * delete_freelances_by_pk
         * @description ***
         *     The GraphQl query for this endpoint is:
         *     ``` graphql
         *     mutation delete_freelances_by_pk($id: uuid!) {
         *       delete_freelances_by_pk(id: $id) {
         *         created_at
         *         daily_rate
         *         email
         *         id
         *         updated_at
         *       }
         *     }
         *
         *     ```
         */
        delete: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Your x-hasura-admin-secret will be used for authentication of the API request. */
                    "x-hasura-admin-secret"?: string;
                };
                path: {
                    /** @description _"id" is required (enter it either in parameters or request body)_ */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Query parameters can also be provided in the request body as a JSON object */
            requestBody?: {
                content: {
                    "application/json": {
                        id?: components["schemas"]["uuid!"];
                    };
                };
            };
            responses: {
                /** @description Responses for DELETE /api/rest/freelances/{id} */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * freelances
                             * @description columns and relationships of "freelances"
                             */
                            delete_freelances_by_pk?: {
                                created_at?: components["schemas"]["timestamp!"];
                                daily_rate?: components["schemas"]["numeric!"];
                                /** String */
                                email?: string;
                                id?: components["schemas"]["uuid!"];
                                updated_at?: components["schemas"]["timestamp"];
                            } | null;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/clients": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * clients
         * @description ***
         *     The GraphQl query for this endpoint is:
         *     ``` graphql
         *     query clients {
         *       clients {
         *         created_at
         *         email
         *         id
         *         name
         *         phone
         *         updated_at
         *       }
         *     }
         *
         *     ```
         */
        get: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Your x-hasura-admin-secret will be used for authentication of the API request. */
                    "x-hasura-admin-secret"?: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Responses for GET /api/rest/clients */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            clients?: {
                                created_at?: components["schemas"]["timestamp!"];
                                /** String */
                                email?: string;
                                id?: components["schemas"]["uuid!"];
                                /** String */
                                name?: string;
                                /** String */
                                phone?: string;
                                updated_at?: components["schemas"]["timestamp"];
                            }[];
                        };
                    };
                };
            };
        };
        put?: never;
        /**
         * insert_clients_one
         * @description ***
         *     The GraphQl query for this endpoint is:
         *     ``` graphql
         *     mutation insert_clients_one($object: clients_insert_input!) {
         *       insert_clients_one(object: $object) {
         *         created_at
         *         email
         *         id
         *         name
         *         phone
         *         updated_at
         *       }
         *     }
         *
         *     ```
         */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Your x-hasura-admin-secret will be used for authentication of the API request. */
                    "x-hasura-admin-secret"?: string;
                };
                path?: never;
                cookie?: never;
            };
            /** @description Query parameters can also be provided in the request body as a JSON object */
            requestBody: {
                content: {
                    "application/json": {
                        object?: components["schemas"]["clients_insert_input!"];
                    };
                };
            };
            responses: {
                /** @description Responses for POST /api/rest/clients */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * clients
                             * @description columns and relationships of "clients"
                             */
                            insert_clients_one?: {
                                created_at?: components["schemas"]["timestamp!"];
                                /** String */
                                email?: string;
                                id?: components["schemas"]["uuid!"];
                                /** String */
                                name?: string;
                                /** String */
                                phone?: string;
                                updated_at?: components["schemas"]["timestamp"];
                            } | null;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/clients/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * clients_by_pk
         * @description ***
         *     The GraphQl query for this endpoint is:
         *     ``` graphql
         *     query clients_by_pk($id: uuid!) {
         *       clients_by_pk(id: $id) {
         *         created_at
         *         email
         *         id
         *         name
         *         phone
         *         updated_at
         *       }
         *     }
         *
         *     ```
         */
        get: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Your x-hasura-admin-secret will be used for authentication of the API request. */
                    "x-hasura-admin-secret"?: string;
                };
                path: {
                    /** @description _"id" is required (enter it either in parameters or request body)_ */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Query parameters can also be provided in the request body as a JSON object */
            requestBody?: {
                content: {
                    "application/json": {
                        id?: components["schemas"]["uuid!"];
                    };
                };
            };
            responses: {
                /** @description Responses for GET /api/rest/clients/{id} */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * clients
                             * @description columns and relationships of "clients"
                             */
                            clients_by_pk?: {
                                created_at?: components["schemas"]["timestamp!"];
                                /** String */
                                email?: string;
                                id?: components["schemas"]["uuid!"];
                                /** String */
                                name?: string;
                                /** String */
                                phone?: string;
                                updated_at?: components["schemas"]["timestamp"];
                            } | null;
                        };
                    };
                };
            };
        };
        put?: never;
        /**
         * update_clients_by_pk
         * @description ***
         *     The GraphQl query for this endpoint is:
         *     ``` graphql
         *     mutation update_clients_by_pk($id: uuid!, $object: clients_set_input!) {
         *       update_clients_by_pk(pk_columns: {id: $id}, _set: $object) {
         *         created_at
         *         email
         *         id
         *         name
         *         phone
         *         updated_at
         *       }
         *     }
         *
         *     ```
         */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Your x-hasura-admin-secret will be used for authentication of the API request. */
                    "x-hasura-admin-secret"?: string;
                };
                path: {
                    /** @description _"id" is required (enter it either in parameters or request body)_ */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Query parameters can also be provided in the request body as a JSON object */
            requestBody: {
                content: {
                    "application/json": {
                        id?: components["schemas"]["uuid!"];
                        object?: components["schemas"]["clients_set_input!"];
                    };
                };
            };
            responses: {
                /** @description Responses for POST /api/rest/clients/{id} */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * clients
                             * @description columns and relationships of "clients"
                             */
                            update_clients_by_pk?: {
                                created_at?: components["schemas"]["timestamp!"];
                                /** String */
                                email?: string;
                                id?: components["schemas"]["uuid!"];
                                /** String */
                                name?: string;
                                /** String */
                                phone?: string;
                                updated_at?: components["schemas"]["timestamp"];
                            } | null;
                        };
                    };
                };
            };
        };
        /**
         * delete_clients_by_pk
         * @description ***
         *     The GraphQl query for this endpoint is:
         *     ``` graphql
         *     mutation delete_clients_by_pk($id: uuid!) {
         *       delete_clients_by_pk(id: $id) {
         *         created_at
         *         email
         *         id
         *         name
         *         phone
         *         updated_at
         *       }
         *     }
         *
         *     ```
         */
        delete: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Your x-hasura-admin-secret will be used for authentication of the API request. */
                    "x-hasura-admin-secret"?: string;
                };
                path: {
                    /** @description _"id" is required (enter it either in parameters or request body)_ */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Query parameters can also be provided in the request body as a JSON object */
            requestBody?: {
                content: {
                    "application/json": {
                        id?: components["schemas"]["uuid!"];
                    };
                };
            };
            responses: {
                /** @description Responses for DELETE /api/rest/clients/{id} */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * clients
                             * @description columns and relationships of "clients"
                             */
                            delete_clients_by_pk?: {
                                created_at?: components["schemas"]["timestamp!"];
                                /** String */
                                email?: string;
                                id?: components["schemas"]["uuid!"];
                                /** String */
                                name?: string;
                                /** String */
                                phone?: string;
                                updated_at?: components["schemas"]["timestamp"];
                            } | null;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/projects": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * projects
         * @description ***
         *     The GraphQl query for this endpoint is:
         *     ``` graphql
         *     query projects {
         *       projects {
         *         created_at
         *         description
         *         end_date
         *         id
         *         is_active
         *         name
         *         start_date
         *         updated_at
         *       }
         *     }
         *
         *     ```
         */
        get: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Your x-hasura-admin-secret will be used for authentication of the API request. */
                    "x-hasura-admin-secret"?: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Responses for GET /api/rest/projects */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            projects?: {
                                created_at?: components["schemas"]["timestamp!"];
                                /** String */
                                description?: string | null;
                                end_date?: components["schemas"]["timestamp"];
                                id?: components["schemas"]["uuid!"];
                                /** Boolean */
                                is_active?: boolean;
                                /** String */
                                name?: string;
                                start_date?: components["schemas"]["timestamp"];
                                updated_at?: components["schemas"]["timestamp"];
                            }[];
                        };
                    };
                };
            };
        };
        put?: never;
        /**
         * insert_projects_one
         * @description ***
         *     The GraphQl query for this endpoint is:
         *     ``` graphql
         *     mutation insert_projects_one($object: projects_insert_input!) {
         *       insert_projects_one(object: $object) {
         *         created_at
         *         description
         *         end_date
         *         id
         *         is_active
         *         name
         *         start_date
         *         updated_at
         *       }
         *     }
         *
         *     ```
         */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Your x-hasura-admin-secret will be used for authentication of the API request. */
                    "x-hasura-admin-secret"?: string;
                };
                path?: never;
                cookie?: never;
            };
            /** @description Query parameters can also be provided in the request body as a JSON object */
            requestBody: {
                content: {
                    "application/json": {
                        object?: components["schemas"]["projects_insert_input!"];
                    };
                };
            };
            responses: {
                /** @description Responses for POST /api/rest/projects */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * projects
                             * @description columns and relationships of "projects"
                             */
                            insert_projects_one?: {
                                created_at?: components["schemas"]["timestamp!"];
                                /** String */
                                description?: string | null;
                                end_date?: components["schemas"]["timestamp"];
                                id?: components["schemas"]["uuid!"];
                                /** Boolean */
                                is_active?: boolean;
                                /** String */
                                name?: string;
                                start_date?: components["schemas"]["timestamp"];
                                updated_at?: components["schemas"]["timestamp"];
                            } | null;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/projects/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * projects_by_pk
         * @description ***
         *     The GraphQl query for this endpoint is:
         *     ``` graphql
         *     query projects_by_pk($id: uuid!) {
         *       projects_by_pk(id: $id) {
         *         created_at
         *         description
         *         end_date
         *         id
         *         is_active
         *         name
         *         start_date
         *         updated_at
         *       }
         *     }
         *
         *     ```
         */
        get: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Your x-hasura-admin-secret will be used for authentication of the API request. */
                    "x-hasura-admin-secret"?: string;
                };
                path: {
                    /** @description _"id" is required (enter it either in parameters or request body)_ */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Query parameters can also be provided in the request body as a JSON object */
            requestBody?: {
                content: {
                    "application/json": {
                        id?: components["schemas"]["uuid!"];
                    };
                };
            };
            responses: {
                /** @description Responses for GET /api/rest/projects/{id} */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * projects
                             * @description columns and relationships of "projects"
                             */
                            projects_by_pk?: {
                                created_at?: components["schemas"]["timestamp!"];
                                /** String */
                                description?: string | null;
                                end_date?: components["schemas"]["timestamp"];
                                id?: components["schemas"]["uuid!"];
                                /** Boolean */
                                is_active?: boolean;
                                /** String */
                                name?: string;
                                start_date?: components["schemas"]["timestamp"];
                                updated_at?: components["schemas"]["timestamp"];
                            } | null;
                        };
                    };
                };
            };
        };
        put?: never;
        /**
         * update_projects_by_pk
         * @description ***
         *     The GraphQl query for this endpoint is:
         *     ``` graphql
         *     mutation update_projects_by_pk($id: uuid!, $object: projects_set_input!) {
         *       update_projects_by_pk(pk_columns: {id: $id}, _set: $object) {
         *         created_at
         *         description
         *         end_date
         *         id
         *         is_active
         *         name
         *         start_date
         *         updated_at
         *       }
         *     }
         *
         *     ```
         */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Your x-hasura-admin-secret will be used for authentication of the API request. */
                    "x-hasura-admin-secret"?: string;
                };
                path: {
                    /** @description _"id" is required (enter it either in parameters or request body)_ */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Query parameters can also be provided in the request body as a JSON object */
            requestBody: {
                content: {
                    "application/json": {
                        id?: components["schemas"]["uuid!"];
                        object?: components["schemas"]["projects_set_input!"];
                    };
                };
            };
            responses: {
                /** @description Responses for POST /api/rest/projects/{id} */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * projects
                             * @description columns and relationships of "projects"
                             */
                            update_projects_by_pk?: {
                                created_at?: components["schemas"]["timestamp!"];
                                /** String */
                                description?: string | null;
                                end_date?: components["schemas"]["timestamp"];
                                id?: components["schemas"]["uuid!"];
                                /** Boolean */
                                is_active?: boolean;
                                /** String */
                                name?: string;
                                start_date?: components["schemas"]["timestamp"];
                                updated_at?: components["schemas"]["timestamp"];
                            } | null;
                        };
                    };
                };
            };
        };
        /**
         * delete_projects_by_pk
         * @description ***
         *     The GraphQl query for this endpoint is:
         *     ``` graphql
         *     mutation delete_projects_by_pk($id: uuid!) {
         *       delete_projects_by_pk(id: $id) {
         *         created_at
         *         description
         *         end_date
         *         id
         *         is_active
         *         name
         *         start_date
         *         updated_at
         *       }
         *     }
         *
         *     ```
         */
        delete: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Your x-hasura-admin-secret will be used for authentication of the API request. */
                    "x-hasura-admin-secret"?: string;
                };
                path: {
                    /** @description _"id" is required (enter it either in parameters or request body)_ */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Query parameters can also be provided in the request body as a JSON object */
            requestBody?: {
                content: {
                    "application/json": {
                        id?: components["schemas"]["uuid!"];
                    };
                };
            };
            responses: {
                /** @description Responses for DELETE /api/rest/projects/{id} */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * projects
                             * @description columns and relationships of "projects"
                             */
                            delete_projects_by_pk?: {
                                created_at?: components["schemas"]["timestamp!"];
                                /** String */
                                description?: string | null;
                                end_date?: components["schemas"]["timestamp"];
                                id?: components["schemas"]["uuid!"];
                                /** Boolean */
                                is_active?: boolean;
                                /** String */
                                name?: string;
                                start_date?: components["schemas"]["timestamp"];
                                updated_at?: components["schemas"]["timestamp"];
                            } | null;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/projects_tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * projects_tasks
         * @description ***
         *     The GraphQl query for this endpoint is:
         *     ``` graphql
         *     query projects_tasks {
         *       projects_tasks {
         *         created_at
         *         date
         *         id
         *         project_id
         *         task_description
         *         updated_at
         *       }
         *     }
         *
         *     ```
         */
        get: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Your x-hasura-admin-secret will be used for authentication of the API request. */
                    "x-hasura-admin-secret"?: string;
                };
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Responses for GET /api/rest/projects_tasks */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            projects_tasks?: {
                                created_at?: components["schemas"]["timestamp!"];
                                date?: components["schemas"]["timestamp"];
                                id?: components["schemas"]["uuid!"];
                                project_id?: components["schemas"]["uuid!"];
                                /** String */
                                task_description?: string | null;
                                updated_at?: components["schemas"]["timestamp"];
                            }[];
                        };
                    };
                };
            };
        };
        put?: never;
        /**
         * insert_projects_tasks_one
         * @description ***
         *     The GraphQl query for this endpoint is:
         *     ``` graphql
         *     mutation insert_projects_tasks_one($object: projects_tasks_insert_input!) {
         *       insert_projects_tasks_one(object: $object) {
         *         created_at
         *         date
         *        id
         *         project_id
         *         task_description
         *         updated_at
         *       }
         *     }
         *
         *     ```
         */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Your x-hasura-admin-secret will be used for authentication of the API request. */
                    "x-hasura-admin-secret"?: string;
                };
                path?: never;
                cookie?: never;
            };
            /** @description Query parameters can also be provided in the request body as a JSON object */
            requestBody: {
                content: {
                    "application/json": {
                        object?: components["schemas"]["projects_tasks_insert_input!"];
                    };
                };
            };
            responses: {
                /** @description Responses for POST /api/rest/projects_tasks */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * projects_tasks
                             * @description columns and relationships of "projects_tasks"
                             */
                            insert_projects_tasks_one?: {
                                created_at?: components["schemas"]["timestamp!"];
                                date?: components["schemas"]["timestamp"];
                                id?: components["schemas"]["uuid!"];
                                project_id?: components["schemas"]["uuid!"];
                                /** String */
                                task_description?: string | null;
                                updated_at?: components["schemas"]["timestamp"];
                            } | null;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/projects_tasks/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * projects_tasks_by_pk
         * @description ***
         *     The GraphQl query for this endpoint is:
         *     ``` graphql
         *     query projects_tasks_by_pk($id: uuid!) {
         *       projects_tasks_by_pk(id: $id) {
         *         created_at
         *         date
         *          id
         *         project_id
         *         task_description
         *         updated_at
         *       }
         *     }
         *
         *     ```
         */
        get: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Your x-hasura-admin-secret will be used for authentication of the API request. */
                    "x-hasura-admin-secret"?: string;
                };
                path: {
                    /** @description _"id" is required (enter it either in parameters or request body)_ */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Query parameters can also be provided in the request body as a JSON object */
            requestBody?: {
                content: {
                    "application/json": {
                        id?: components["schemas"]["uuid!"];
                    };
                };
            };
            responses: {
                /** @description Responses for GET /api/rest/projects_tasks/{id} */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * projects_tasks
                             * @description columns and relationships of "projects_tasks"
                             */
                            projects_tasks_by_pk?: {
                                created_at?: components["schemas"]["timestamp!"];
                                date?: components["schemas"]["timestamp"];
                                id?: components["schemas"]["uuid!"];
                                project_id?: components["schemas"]["uuid!"];
                                /** String */
                                task_description?: string | null;
                                updated_at?: components["schemas"]["timestamp"];
                            } | null;
                        };
                    };
                };
            };
        };
        put?: never;
        /**
         * update_projects_tasks_by_pk
         * @description ***
         *     The GraphQl query for this endpoint is:
         *     ``` graphql
         *     mutation update_projects_tasks_by_pk($id: uuid!, $object: projects_tasks_set_input!) {
         *       update_projects_tasks_by_pk(pk_columns: {id: $id}, _set: $object) {
         *         created_at
         *         date
         *          id
         *         project_id
         *         task_description
         *         updated_at
         *       }
         *     }
         *
         *     ```
         */
        post: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Your x-hasura-admin-secret will be used for authentication of the API request. */
                    "x-hasura-admin-secret"?: string;
                };
                path: {
                    /** @description _"id" is required (enter it either in parameters or request body)_ */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Query parameters can also be provided in the request body as a JSON object */
            requestBody: {
                content: {
                    "application/json": {
                        id?: components["schemas"]["uuid!"];
                        object?: components["schemas"]["projects_tasks_set_input!"];
                    };
                };
            };
            responses: {
                /** @description Responses for POST /api/rest/projects_tasks/{id} */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * projects_tasks
                             * @description columns and relationships of "projects_tasks"
                             */
                            update_projects_tasks_by_pk?: {
                                created_at?: components["schemas"]["timestamp!"];
                                date?: components["schemas"]["timestamp"];
                                id?: components["schemas"]["uuid!"];
                                project_id?: components["schemas"]["uuid!"];
                                /** String */
                                task_description?: string | null;
                                updated_at?: components["schemas"]["timestamp"];
                            } | null;
                        };
                    };
                };
            };
        };
        /**
         * delete_projects_tasks_by_pk
         * @description ***
         *     The GraphQl query for this endpoint is:
         *     ``` graphql
         *     mutation delete_projects_tasks_by_pk($id: uuid!) {
         *       delete_projects_tasks_by_pk(id: $id) {
         *         created_at
         *         date
         *          id
         *         project_id
         *         task_description
         *         updated_at
         *       }
         *     }
         *
         *     ```
         */
        delete: {
            parameters: {
                query?: never;
                header?: {
                    /** @description Your x-hasura-admin-secret will be used for authentication of the API request. */
                    "x-hasura-admin-secret"?: string;
                };
                path: {
                    /** @description _"id" is required (enter it either in parameters or request body)_ */
                    id: string;
                };
                cookie?: never;
            };
            /** @description Query parameters can also be provided in the request body as a JSON object */
            requestBody?: {
                content: {
                    "application/json": {
                        id?: components["schemas"]["uuid!"];
                    };
                };
            };
            responses: {
                /** @description Responses for DELETE /api/rest/projects_tasks/{id} */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * projects_tasks
                             * @description columns and relationships of "projects_tasks"
                             */
                            delete_projects_tasks_by_pk?: {
                                created_at?: components["schemas"]["timestamp!"];
                                date?: components["schemas"]["timestamp"];
                                id?: components["schemas"]["uuid!"];
                                project_id?: components["schemas"]["uuid!"];
                                /** String */
                                task_description?: string | null;
                                updated_at?: components["schemas"]["timestamp"];
                            } | null;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rest/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * login
         * @description ***
         *     The GraphQl query for this endpoint is:
         *     ``` graphql
         *     query login($email: String, $password: String){
         *       freelances(where: {email: {_eq: $email}, password: {_eq: $password}}) {
         *         email
         *       }
         *     }
         *     ```
         */
        post: {
            parameters: {
                query?: {
                    email?: string;
                    password?: string;
                };
                header?: {
                    /** @description Your x-hasura-admin-secret will be used for authentication of the API request. */
                    "x-hasura-admin-secret"?: string;
                };
                path?: never;
                cookie?: never;
            };
            /** @description Query parameters can also be provided in the request body as a JSON object */
            requestBody?: {
                content: {
                    "application/json": {
                        /** String */
                        email?: string | null;
                        /** String */
                        password?: string | null;
                    };
                };
            };
            responses: {
                /** @description Responses for POST /api/rest/auth/login */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            freelances?: {
                                /** String */
                                email?: string;
                            }[];
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** uuid */
        "uuid!": string;
        /** timestamp */
        "timestamp!": unknown;
        /** timestamp */
        timestamp: unknown;
        /** jsonb */
        jsonb: unknown;
        /** uuid */
        uuid: string | null;
        /**
         * projects_tasks_update_column
         * @description update columns of table "projects_tasks"
         * @enum {unknown}
         */
        "projects_tasks_update_column!": "created_at" | "date" | "id" | "project_id" | "task_description" | "updated_at";
        /**
         * uuid_comparison_exp
         * @description Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.
         */
        uuid_comparison_exp: {
            _eq?: components["schemas"]["uuid"];
            _gt?: components["schemas"]["uuid"];
            _gte?: components["schemas"]["uuid"];
            _in?: components["schemas"]["uuid!"][] | null;
            /** Boolean */
            _is_null?: boolean | null;
            _lt?: components["schemas"]["uuid"];
            _lte?: components["schemas"]["uuid"];
            _neq?: components["schemas"]["uuid"];
            _nin?: components["schemas"]["uuid!"][] | null;
        } | null;
        /**
         * timestamp_comparison_exp
         * @description Boolean expression to compare columns of type "timestamp". All fields are combined with logical 'AND'.
         */
        timestamp_comparison_exp: {
            _eq?: components["schemas"]["timestamp"];
            _gt?: components["schemas"]["timestamp"];
            _gte?: components["schemas"]["timestamp"];
            _in?: components["schemas"]["timestamp!"][] | null;
            /** Boolean */
            _is_null?: boolean | null;
            _lt?: components["schemas"]["timestamp"];
            _lte?: components["schemas"]["timestamp"];
            _neq?: components["schemas"]["timestamp"];
            _nin?: components["schemas"]["timestamp!"][] | null;
        } | null;
        /** jsonb */
        "jsonb!": unknown;
        /**
         * String_comparison_exp
         * @description Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
         */
        String_comparison_exp: {
            /** String */
            _eq?: string | null;
            /** String */
            _gt?: string | null;
            /** String */
            _gte?: string | null;
            /** String */
            _ilike?: string | null;
            _in?: string[] | null;
            /** String */
            _iregex?: string | null;
            /** Boolean */
            _is_null?: boolean | null;
            /** String */
            _like?: string | null;
            /** String */
            _lt?: string | null;
            /** String */
            _lte?: string | null;
            /** String */
            _neq?: string | null;
            /** String */
            _nilike?: string | null;
            _nin?: string[] | null;
            /** String */
            _niregex?: string | null;
            /** String */
            _nlike?: string | null;
            /** String */
            _nregex?: string | null;
            /** String */
            _nsimilar?: string | null;
            /** String */
            _regex?: string | null;
            /** String */
            _similar?: string | null;
        } | null;
        /** jsonb_cast_exp */
        jsonb_cast_exp: {
            String?: components["schemas"]["String_comparison_exp"];
        } | null;
        /**
         * jsonb_comparison_exp
         * @description Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'.
         */
        jsonb_comparison_exp: {
            _cast?: components["schemas"]["jsonb_cast_exp"];
            _contained_in?: components["schemas"]["jsonb"];
            _contains?: components["schemas"]["jsonb"];
            _eq?: components["schemas"]["jsonb"];
            _gt?: components["schemas"]["jsonb"];
            _gte?: components["schemas"]["jsonb"];
            /** String */
            _has_key?: string | null;
            _has_keys_all?: string[] | null;
            _has_keys_any?: string[] | null;
            _in?: components["schemas"]["jsonb!"][] | null;
            /** Boolean */
            _is_null?: boolean | null;
            _lt?: components["schemas"]["jsonb"];
            _lte?: components["schemas"]["jsonb"];
            _neq?: components["schemas"]["jsonb"];
            _nin?: components["schemas"]["jsonb!"][] | null;
        } | null;
        /**
         * clients_bool_exp
         * @description Boolean expression to filter rows from the table "clients". All fields are combined with a logical 'AND'.
         */
        "clients_bool_exp!": {
            _and?: components["schemas"]["clients_bool_exp!"][] | null;
            _not?: components["schemas"]["clients_bool_exp"];
            _or?: components["schemas"]["clients_bool_exp!"][] | null;
            created_at?: components["schemas"]["timestamp_comparison_exp"];
            email?: components["schemas"]["String_comparison_exp"];
            id?: components["schemas"]["uuid_comparison_exp"];
            name?: components["schemas"]["String_comparison_exp"];
            phone?: components["schemas"]["String_comparison_exp"];
            timesheets?: components["schemas"]["timesheets_bool_exp"];
            timesheets_aggregate?: components["schemas"]["timesheets_aggregate_bool_exp"];
            updated_at?: components["schemas"]["timestamp_comparison_exp"];
        };
        /**
         * clients_bool_exp
         * @description Boolean expression to filter rows from the table "clients". All fields are combined with a logical 'AND'.
         */
        clients_bool_exp: {
            _and?: components["schemas"]["clients_bool_exp!"][] | null;
            _not?: components["schemas"]["clients_bool_exp"];
            _or?: components["schemas"]["clients_bool_exp!"][] | null;
            created_at?: components["schemas"]["timestamp_comparison_exp"];
            email?: components["schemas"]["String_comparison_exp"];
            id?: components["schemas"]["uuid_comparison_exp"];
            name?: components["schemas"]["String_comparison_exp"];
            phone?: components["schemas"]["String_comparison_exp"];
            timesheets?: components["schemas"]["timesheets_bool_exp"];
            timesheets_aggregate?: components["schemas"]["timesheets_aggregate_bool_exp"];
            updated_at?: components["schemas"]["timestamp_comparison_exp"];
        } | null;
        /** numeric */
        "numeric!": unknown;
        /** numeric */
        numeric: unknown;
        /**
         * numeric_comparison_exp
         * @description Boolean expression to compare columns of type "numeric". All fields are combined with logical 'AND'.
         */
        numeric_comparison_exp: {
            _eq?: components["schemas"]["numeric"];
            _gt?: components["schemas"]["numeric"];
            _gte?: components["schemas"]["numeric"];
            _in?: components["schemas"]["numeric!"][] | null;
            /** Boolean */
            _is_null?: boolean | null;
            _lt?: components["schemas"]["numeric"];
            _lte?: components["schemas"]["numeric"];
            _neq?: components["schemas"]["numeric"];
            _nin?: components["schemas"]["numeric!"][] | null;
        } | null;
        /**
         * freelances_bool_exp
         * @description Boolean expression to filter rows from the table "freelances". All fields are combined with a logical 'AND'.
         */
        "freelances_bool_exp!": {
            _and?: components["schemas"]["freelances_bool_exp!"][] | null;
            _not?: components["schemas"]["freelances_bool_exp"];
            _or?: components["schemas"]["freelances_bool_exp!"][] | null;
            created_at?: components["schemas"]["timestamp_comparison_exp"];
            daily_rate?: components["schemas"]["numeric_comparison_exp"];
            email?: components["schemas"]["String_comparison_exp"];
            id?: components["schemas"]["uuid_comparison_exp"];
            password?: components["schemas"]["String_comparison_exp"];
            timesheets?: components["schemas"]["timesheets_bool_exp"];
            timesheets_aggregate?: components["schemas"]["timesheets_aggregate_bool_exp"];
            updated_at?: components["schemas"]["timestamp_comparison_exp"];
        };
        /**
         * freelances_bool_exp
         * @description Boolean expression to filter rows from the table "freelances". All fields are combined with a logical 'AND'.
         */
        freelances_bool_exp: {
            _and?: components["schemas"]["freelances_bool_exp!"][] | null;
            _not?: components["schemas"]["freelances_bool_exp"];
            _or?: components["schemas"]["freelances_bool_exp!"][] | null;
            created_at?: components["schemas"]["timestamp_comparison_exp"];
            daily_rate?: components["schemas"]["numeric_comparison_exp"];
            email?: components["schemas"]["String_comparison_exp"];
            id?: components["schemas"]["uuid_comparison_exp"];
            password?: components["schemas"]["String_comparison_exp"];
            timesheets?: components["schemas"]["timesheets_bool_exp"];
            timesheets_aggregate?: components["schemas"]["timesheets_aggregate_bool_exp"];
            updated_at?: components["schemas"]["timestamp_comparison_exp"];
        } | null;
        /**
         * timesheets_bool_exp
         * @description Boolean expression to filter rows from the table "timesheets". All fields are combined with a logical 'AND'.
         */
        "timesheets_bool_exp!": {
            _and?: components["schemas"]["timesheets_bool_exp!"][] | null;
            _not?: components["schemas"]["timesheets_bool_exp"];
            _or?: components["schemas"]["timesheets_bool_exp!"][] | null;
            client?: components["schemas"]["clients_bool_exp"];
            client_id?: components["schemas"]["uuid_comparison_exp"];
            created_at?: components["schemas"]["timestamp_comparison_exp"];
            freelance?: components["schemas"]["freelances_bool_exp"];
            freelance_id?: components["schemas"]["uuid_comparison_exp"];
            id?: components["schemas"]["uuid_comparison_exp"];
            project_task_id?: components["schemas"]["uuid_comparison_exp"];
            projects_task?: components["schemas"]["projects_tasks_bool_exp"];
            updated_at?: components["schemas"]["timestamp_comparison_exp"];
            working_date?: components["schemas"]["String_comparison_exp"];
            working_durations?: components["schemas"]["jsonb_comparison_exp"];
        };
        /**
         * timesheets_bool_exp
         * @description Boolean expression to filter rows from the table "timesheets". All fields are combined with a logical 'AND'.
         */
        timesheets_bool_exp: {
            _and?: components["schemas"]["timesheets_bool_exp!"][] | null;
            _not?: components["schemas"]["timesheets_bool_exp"];
            _or?: components["schemas"]["timesheets_bool_exp!"][] | null;
            client?: components["schemas"]["clients_bool_exp"];
            client_id?: components["schemas"]["uuid_comparison_exp"];
            created_at?: components["schemas"]["timestamp_comparison_exp"];
            freelance?: components["schemas"]["freelances_bool_exp"];
            freelance_id?: components["schemas"]["uuid_comparison_exp"];
            id?: components["schemas"]["uuid_comparison_exp"];
            project_task_id?: components["schemas"]["uuid_comparison_exp"];
            projects_task?: components["schemas"]["projects_tasks_bool_exp"];
            updated_at?: components["schemas"]["timestamp_comparison_exp"];
            working_date?: components["schemas"]["String_comparison_exp"];
            working_durations?: components["schemas"]["jsonb_comparison_exp"];
        } | null;
        /**
         * timesheets_select_column
         * @description select columns of table "timesheets"
         * @enum {unknown}
         */
        "timesheets_select_column!": "client_id" | "created_at" | "freelance_id" | "id" | "project_task_id" | "updated_at" | "working_date" | "working_durations";
        /**
         * Int_comparison_exp
         * @description Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
         */
        "Int_comparison_exp!": {
            /** Int */
            _eq?: number | null;
            /** Int */
            _gt?: number | null;
            /** Int */
            _gte?: number | null;
            _in?: number[] | null;
            /** Boolean */
            _is_null?: boolean | null;
            /** Int */
            _lt?: number | null;
            /** Int */
            _lte?: number | null;
            /** Int */
            _neq?: number | null;
            _nin?: number[] | null;
        };
        /** timesheets_aggregate_bool_exp_count */
        timesheets_aggregate_bool_exp_count: {
            arguments?: components["schemas"]["timesheets_select_column!"][] | null;
            /** Boolean */
            distinct?: boolean | null;
            filter?: components["schemas"]["timesheets_bool_exp"];
            predicate?: components["schemas"]["Int_comparison_exp!"];
        } | null;
        /** timesheets_aggregate_bool_exp */
        timesheets_aggregate_bool_exp: {
            count?: components["schemas"]["timesheets_aggregate_bool_exp_count"];
        } | null;
        /**
         * projects_tasks_select_column
         * @description select columns of table "projects_tasks"
         * @enum {unknown}
         */
        "projects_tasks_select_column!": "created_at" | "date" | "id" | "project_id" | "task_description" | "updated_at";
        /** projects_tasks_aggregate_bool_exp_count */
        projects_tasks_aggregate_bool_exp_count: {
            arguments?: components["schemas"]["projects_tasks_select_column!"][] | null;
            /** Boolean */
            distinct?: boolean | null;
            filter?: components["schemas"]["projects_tasks_bool_exp"];
            predicate?: components["schemas"]["Int_comparison_exp!"];
        } | null;
        /** projects_tasks_aggregate_bool_exp */
        projects_tasks_aggregate_bool_exp: {
            count?: components["schemas"]["projects_tasks_aggregate_bool_exp_count"];
        } | null;
        /**
         * Boolean_comparison_exp
         * @description Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
         */
        Boolean_comparison_exp: {
            /** Boolean */
            _eq?: boolean | null;
            /** Boolean */
            _gt?: boolean | null;
            /** Boolean */
            _gte?: boolean | null;
            _in?: boolean[] | null;
            /** Boolean */
            _is_null?: boolean | null;
            /** Boolean */
            _lt?: boolean | null;
            /** Boolean */
            _lte?: boolean | null;
            /** Boolean */
            _neq?: boolean | null;
            _nin?: boolean[] | null;
        } | null;
        /**
         * projects_bool_exp
         * @description Boolean expression to filter rows from the table "projects". All fields are combined with a logical 'AND'.
         */
        "projects_bool_exp!": {
            _and?: components["schemas"]["projects_bool_exp!"][] | null;
            _not?: components["schemas"]["projects_bool_exp"];
            _or?: components["schemas"]["projects_bool_exp!"][] | null;
            created_at?: components["schemas"]["timestamp_comparison_exp"];
            description?: components["schemas"]["String_comparison_exp"];
            end_date?: components["schemas"]["timestamp_comparison_exp"];
            id?: components["schemas"]["uuid_comparison_exp"];
            is_active?: components["schemas"]["Boolean_comparison_exp"];
            name?: components["schemas"]["String_comparison_exp"];
            projects_tasks?: components["schemas"]["projects_tasks_bool_exp"];
            projects_tasks_aggregate?: components["schemas"]["projects_tasks_aggregate_bool_exp"];
            start_date?: components["schemas"]["timestamp_comparison_exp"];
            updated_at?: components["schemas"]["timestamp_comparison_exp"];
        };
        /**
         * projects_bool_exp
         * @description Boolean expression to filter rows from the table "projects". All fields are combined with a logical 'AND'.
         */
        projects_bool_exp: {
            _and?: components["schemas"]["projects_bool_exp!"][] | null;
            _not?: components["schemas"]["projects_bool_exp"];
            _or?: components["schemas"]["projects_bool_exp!"][] | null;
            created_at?: components["schemas"]["timestamp_comparison_exp"];
            description?: components["schemas"]["String_comparison_exp"];
            end_date?: components["schemas"]["timestamp_comparison_exp"];
            id?: components["schemas"]["uuid_comparison_exp"];
            is_active?: components["schemas"]["Boolean_comparison_exp"];
            name?: components["schemas"]["String_comparison_exp"];
            projects_tasks?: components["schemas"]["projects_tasks_bool_exp"];
            projects_tasks_aggregate?: components["schemas"]["projects_tasks_aggregate_bool_exp"];
            start_date?: components["schemas"]["timestamp_comparison_exp"];
            updated_at?: components["schemas"]["timestamp_comparison_exp"];
        } | null;
        /**
         * projects_tasks_bool_exp
         * @description Boolean expression to filter rows from the table "projects_tasks". All fields are combined with a logical 'AND'.
         */
        "projects_tasks_bool_exp!": {
            _and?: components["schemas"]["projects_tasks_bool_exp!"][] | null;
            _not?: components["schemas"]["projects_tasks_bool_exp"];
            _or?: components["schemas"]["projects_tasks_bool_exp!"][] | null;
            created_at?: components["schemas"]["timestamp_comparison_exp"];
            date?: components["schemas"]["timestamp_comparison_exp"];
            id?: components["schemas"]["uuid_comparison_exp"];
            project?: components["schemas"]["projects_bool_exp"];
            project_id?: components["schemas"]["uuid_comparison_exp"];
            task_description?: components["schemas"]["String_comparison_exp"];
            timesheets?: components["schemas"]["timesheets_bool_exp"];
            timesheets_aggregate?: components["schemas"]["timesheets_aggregate_bool_exp"];
            updated_at?: components["schemas"]["timestamp_comparison_exp"];
        };
        /**
         * projects_tasks_bool_exp
         * @description Boolean expression to filter rows from the table "projects_tasks". All fields are combined with a logical 'AND'.
         */
        projects_tasks_bool_exp: {
            _and?: components["schemas"]["projects_tasks_bool_exp!"][] | null;
            _not?: components["schemas"]["projects_tasks_bool_exp"];
            _or?: components["schemas"]["projects_tasks_bool_exp!"][] | null;
            created_at?: components["schemas"]["timestamp_comparison_exp"];
            date?: components["schemas"]["timestamp_comparison_exp"];
            id?: components["schemas"]["uuid_comparison_exp"];
            project?: components["schemas"]["projects_bool_exp"];
            project_id?: components["schemas"]["uuid_comparison_exp"];
            task_description?: components["schemas"]["String_comparison_exp"];
            timesheets?: components["schemas"]["timesheets_bool_exp"];
            timesheets_aggregate?: components["schemas"]["timesheets_aggregate_bool_exp"];
            updated_at?: components["schemas"]["timestamp_comparison_exp"];
        } | null;
        /**
         * projects_tasks_constraint
         * @description unique or primary key constraints on table "projects_tasks"
         * @enum {unknown}
         */
        "projects_tasks_constraint!": "projects_tasks_pkey";
        /**
         * projects_tasks_on_conflict
         * @description on_conflict condition type for table "projects_tasks"
         */
        projects_tasks_on_conflict: {
            constraint?: components["schemas"]["projects_tasks_constraint!"];
            update_columns?: components["schemas"]["projects_tasks_update_column!"][];
            where?: components["schemas"]["projects_tasks_bool_exp"];
        } | null;
        /**
         * projects_tasks_arr_rel_insert_input
         * @description input type for inserting array relation for remote table "projects_tasks"
         */
        projects_tasks_arr_rel_insert_input: {
            data?: components["schemas"]["projects_tasks_insert_input!"][];
            on_conflict?: components["schemas"]["projects_tasks_on_conflict"];
        } | null;
        /**
         * projects_insert_input
         * @description input type for inserting data into table "projects"
         */
        "projects_insert_input!": {
            created_at?: components["schemas"]["timestamp"];
            /** String */
            description?: string | null;
            end_date?: components["schemas"]["timestamp"];
            id?: components["schemas"]["uuid"];
            /** Boolean */
            is_active?: boolean | null;
            /** String */
            name?: string | null;
            projects_tasks?: components["schemas"]["projects_tasks_arr_rel_insert_input"];
            start_date?: components["schemas"]["timestamp"];
            updated_at?: components["schemas"]["timestamp"];
        };
        /**
         * projects_update_column
         * @description update columns of table "projects"
         * @enum {unknown}
         */
        "projects_update_column!": "created_at" | "description" | "end_date" | "id" | "is_active" | "name" | "start_date" | "updated_at";
        /**
         * projects_constraint
         * @description unique or primary key constraints on table "projects"
         * @enum {unknown}
         */
        "projects_constraint!": "projects_pkey";
        /**
         * projects_on_conflict
         * @description on_conflict condition type for table "projects"
         */
        projects_on_conflict: {
            constraint?: components["schemas"]["projects_constraint!"];
            update_columns?: components["schemas"]["projects_update_column!"][];
            where?: components["schemas"]["projects_bool_exp"];
        } | null;
        /**
         * projects_obj_rel_insert_input
         * @description input type for inserting object relation for remote table "projects"
         */
        projects_obj_rel_insert_input: {
            data?: components["schemas"]["projects_insert_input!"];
            on_conflict?: components["schemas"]["projects_on_conflict"];
        } | null;
        /**
         * timesheets_update_column
         * @description update columns of table "timesheets"
         * @enum {unknown}
         */
        "timesheets_update_column!": "client_id" | "created_at" | "freelance_id" | "id" | "project_task_id" | "updated_at" | "working_date" | "working_durations";
        /**
         * timesheets_constraint
         * @description unique or primary key constraints on table "timesheets"
         * @enum {unknown}
         */
        "timesheets_constraint!": "timesheets_pkey";
        /**
         * timesheets_on_conflict
         * @description on_conflict condition type for table "timesheets"
         */
        timesheets_on_conflict: {
            constraint?: components["schemas"]["timesheets_constraint!"];
            update_columns?: components["schemas"]["timesheets_update_column!"][];
            where?: components["schemas"]["timesheets_bool_exp"];
        } | null;
        /**
         * timesheets_arr_rel_insert_input
         * @description input type for inserting array relation for remote table "timesheets"
         */
        timesheets_arr_rel_insert_input: {
            data?: components["schemas"]["timesheets_insert_input!"][];
            on_conflict?: components["schemas"]["timesheets_on_conflict"];
        } | null;
        /**
         * projects_tasks_insert_input
         * @description input type for inserting data into table "projects_tasks"
         */
        "projects_tasks_insert_input!": {
            created_at?: components["schemas"]["timestamp"];
            date?: components["schemas"]["timestamp"];
            id?: components["schemas"]["uuid"];
            project?: components["schemas"]["projects_obj_rel_insert_input"];
            project_id?: components["schemas"]["uuid"];
            /** String */
            task_description?: string | null;
            timesheets?: components["schemas"]["timesheets_arr_rel_insert_input"];
            updated_at?: components["schemas"]["timestamp"];
        };
        /**
         * projects_tasks_obj_rel_insert_input
         * @description input type for inserting object relation for remote table "projects_tasks"
         */
        projects_tasks_obj_rel_insert_input: {
            data?: components["schemas"]["projects_tasks_insert_input!"];
            on_conflict?: components["schemas"]["projects_tasks_on_conflict"];
        } | null;
        /**
         * clients_insert_input
         * @description input type for inserting data into table "clients"
         */
        "clients_insert_input!": {
            created_at?: components["schemas"]["timestamp"];
            /** String */
            email?: string | null;
            id?: components["schemas"]["uuid"];
            /** String */
            name?: string | null;
            /** String */
            phone?: string | null;
            timesheets?: components["schemas"]["timesheets_arr_rel_insert_input"];
            updated_at?: components["schemas"]["timestamp"];
        };
        /**
         * clients_update_column
         * @description update columns of table "clients"
         * @enum {unknown}
         */
        "clients_update_column!": "created_at" | "email" | "id" | "name" | "phone" | "updated_at";
        /**
         * clients_constraint
         * @description unique or primary key constraints on table "clients"
         * @enum {unknown}
         */
        "clients_constraint!": "clients_pkey";
        /**
         * clients_on_conflict
         * @description on_conflict condition type for table "clients"
         */
        clients_on_conflict: {
            constraint?: components["schemas"]["clients_constraint!"];
            update_columns?: components["schemas"]["clients_update_column!"][];
            where?: components["schemas"]["clients_bool_exp"];
        } | null;
        /**
         * clients_obj_rel_insert_input
         * @description input type for inserting object relation for remote table "clients"
         */
        clients_obj_rel_insert_input: {
            data?: components["schemas"]["clients_insert_input!"];
            on_conflict?: components["schemas"]["clients_on_conflict"];
        } | null;
        /**
         * freelances_insert_input
         * @description input type for inserting data into table "freelances"
         */
        "freelances_insert_input!": {
            created_at?: components["schemas"]["timestamp"];
            daily_rate?: components["schemas"]["numeric"];
            /** String */
            email?: string | null;
            id?: components["schemas"]["uuid"];
            /** String */
            password?: string | null;
            timesheets?: components["schemas"]["timesheets_arr_rel_insert_input"];
            updated_at?: components["schemas"]["timestamp"];
        };
        /**
         * freelances_update_column
         * @description update columns of table "freelances"
         * @enum {unknown}
         */
        "freelances_update_column!": "created_at" | "daily_rate" | "email" | "id" | "password" | "updated_at";
        /**
         * freelances_constraint
         * @description unique or primary key constraints on table "freelances"
         * @enum {unknown}
         */
        "freelances_constraint!": "freelances_pkey";
        /**
         * freelances_on_conflict
         * @description on_conflict condition type for table "freelances"
         */
        freelances_on_conflict: {
            constraint?: components["schemas"]["freelances_constraint!"];
            update_columns?: components["schemas"]["freelances_update_column!"][];
            where?: components["schemas"]["freelances_bool_exp"];
        } | null;
        /**
         * freelances_obj_rel_insert_input
         * @description input type for inserting object relation for remote table "freelances"
         */
        freelances_obj_rel_insert_input: {
            data?: components["schemas"]["freelances_insert_input!"];
            on_conflict?: components["schemas"]["freelances_on_conflict"];
        } | null;
        /**
         * timesheets_insert_input
         * @description input type for inserting data into table "timesheets"
         */
        "timesheets_insert_input!": {
            client?: components["schemas"]["clients_obj_rel_insert_input"];
            client_id?: components["schemas"]["uuid"];
            created_at?: components["schemas"]["timestamp"];
            freelance?: components["schemas"]["freelances_obj_rel_insert_input"];
            freelance_id?: components["schemas"]["uuid"];
            id?: components["schemas"]["uuid"];
            project_task_id?: components["schemas"]["uuid"];
            projects_task?: components["schemas"]["projects_tasks_obj_rel_insert_input"];
            updated_at?: components["schemas"]["timestamp"];
            /** String */
            working_date?: string | null;
            working_durations?: components["schemas"]["jsonb"];
        };
        /**
         * timesheets_set_input
         * @description input type for updating data in table "timesheets"
         */
        "timesheets_set_input!": {
            client_id?: components["schemas"]["uuid"];
            created_at?: components["schemas"]["timestamp"];
            freelance_id?: components["schemas"]["uuid"];
            id?: components["schemas"]["uuid"];
            project_task_id?: components["schemas"]["uuid"];
            updated_at?: components["schemas"]["timestamp"];
            /** String */
            working_date?: string | null;
            working_durations?: components["schemas"]["jsonb"];
        };
        /**
         * freelances_set_input
         * @description input type for updating data in table "freelances"
         */
        "freelances_set_input!": {
            created_at?: components["schemas"]["timestamp"];
            daily_rate?: components["schemas"]["numeric"];
            /** String */
            email?: string | null;
            id?: components["schemas"]["uuid"];
            /** String */
            password?: string | null;
            updated_at?: components["schemas"]["timestamp"];
        };
        /**
         * clients_set_input
         * @description input type for updating data in table "clients"
         */
        "clients_set_input!": {
            created_at?: components["schemas"]["timestamp"];
            /** String */
            email?: string | null;
            id?: components["schemas"]["uuid"];
            /** String */
            name?: string | null;
            /** String */
            phone?: string | null;
            updated_at?: components["schemas"]["timestamp"];
        };
        /**
         * projects_set_input
         * @description input type for updating data in table "projects"
         */
        "projects_set_input!": {
            created_at?: components["schemas"]["timestamp"];
            /** String */
            description?: string | null;
            end_date?: components["schemas"]["timestamp"];
            id?: components["schemas"]["uuid"];
            /** Boolean */
            is_active?: boolean | null;
            /** String */
            name?: string | null;
            start_date?: components["schemas"]["timestamp"];
            updated_at?: components["schemas"]["timestamp"];
        };
        /**
         * projects_tasks_set_input
         * @description input type for updating data in table "projects_tasks"
         */
        "projects_tasks_set_input!": {
            created_at?: components["schemas"]["timestamp"];
            date?: components["schemas"]["timestamp"];
            id?: components["schemas"]["uuid"];
            project_id?: components["schemas"]["uuid"];
            /** String */
            task_description?: string | null;
            updated_at?: components["schemas"]["timestamp"];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
